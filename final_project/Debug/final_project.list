
final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cd0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08009e60  08009e60  00019e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a038  0800a038  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800a038  0800a038  0001a038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a040  0800a040  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a040  0800a040  0001a040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a044  0800a044  0001a044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800a048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000092c  20000208  0800a250  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b34  0800a250  00020b34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eca3  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e48  00000000  00000000  0003eedb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018b8  00000000  00000000  00042d28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001710  00000000  00000000  000445e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002561b  00000000  00000000  00045cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015502  00000000  00000000  0006b30b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4672  00000000  00000000  0008080d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00154e7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007094  00000000  00000000  00154efc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009e48 	.word	0x08009e48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	08009e48 	.word	0x08009e48

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <convertTime>:
stopWatch away;


vibrate vib;

float convertTime(int hr, int min, int sec) {
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
	return ((hr * 60) + min) * 60 + sec;
 80005ac:	68fa      	ldr	r2, [r7, #12]
 80005ae:	4613      	mov	r3, r2
 80005b0:	011b      	lsls	r3, r3, #4
 80005b2:	1a9b      	subs	r3, r3, r2
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	461a      	mov	r2, r3
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	441a      	add	r2, r3
 80005bc:	4613      	mov	r3, r2
 80005be:	011b      	lsls	r3, r3, #4
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	461a      	mov	r2, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4413      	add	r3, r2
 80005ca:	ee07 3a90 	vmov	s15, r3
 80005ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80005d2:	eeb0 0a67 	vmov.f32	s0, s15
 80005d6:	3714      	adds	r7, #20
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <doActionAway>:


v_error doActionAway(stopWatch * away, stopWatch * busy) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]

	if (away->status == STOPWATCH_READY) {
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d10b      	bne.n	800060a <doActionAway+0x2a>
		// do nothing
		if (busy->status == STOPWATCH_TIMEOUT) {
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2b02      	cmp	r3, #2
 80005f8:	d105      	bne.n	8000606 <doActionAway+0x26>
			// START ALERT
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 80005fa:	2201      	movs	r2, #1
 80005fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000600:	4819      	ldr	r0, [pc, #100]	; (8000668 <doActionAway+0x88>)
 8000602:	f001 fc3b 	bl	8001e7c <HAL_GPIO_WritePin>
		}
		return V_OK;
 8000606:	2301      	movs	r3, #1
 8000608:	e02a      	b.n	8000660 <doActionAway+0x80>
	} else if (away->status == STOPWATCH_RUN) {
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b01      	cmp	r3, #1
 8000610:	d113      	bne.n	800063a <doActionAway+0x5a>
		// decrement AWAY
		stopWatch_decrement(away, timeUnit);
 8000612:	4b16      	ldr	r3, [pc, #88]	; (800066c <doActionAway+0x8c>)
 8000614:	edd3 7a00 	vldr	s15, [r3]
 8000618:	eeb0 0a67 	vmov.f32	s0, s15
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f001 f852 	bl	80016c6 <stopWatch_decrement>
		if (busy->status == STOPWATCH_TIMEOUT) {
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2b02      	cmp	r3, #2
 8000628:	d105      	bne.n	8000636 <doActionAway+0x56>
			// STOP ALERT
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000630:	480d      	ldr	r0, [pc, #52]	; (8000668 <doActionAway+0x88>)
 8000632:	f001 fc23 	bl	8001e7c <HAL_GPIO_WritePin>
		}
		return V_OK;
 8000636:	2301      	movs	r3, #1
 8000638:	e012      	b.n	8000660 <doActionAway+0x80>
	} else if (away->status == STOPWATCH_TIMEOUT) {
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2b02      	cmp	r3, #2
 8000640:	d107      	bne.n	8000652 <doActionAway+0x72>

		// halt SIT
		stopWatch_halt(busy);
 8000642:	6838      	ldr	r0, [r7, #0]
 8000644:	f001 f80b 	bl	800165e <stopWatch_halt>

		// reset SIT
		stopWatch_reset(busy);
 8000648:	6838      	ldr	r0, [r7, #0]
 800064a:	f001 f820 	bl	800168e <stopWatch_reset>

		return V_OK;
 800064e:	2301      	movs	r3, #1
 8000650:	e006      	b.n	8000660 <doActionAway+0x80>
	} else if (away->status == STOPWATCH_HALT) {
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2b04      	cmp	r3, #4
 8000658:	d101      	bne.n	800065e <doActionAway+0x7e>

		return V_OK;
 800065a:	2301      	movs	r3, #1
 800065c:	e000      	b.n	8000660 <doActionAway+0x80>

	} else {

		// ERROR
		return V_ERROR;
 800065e:	2300      	movs	r3, #0

	}

}
 8000660:	4618      	mov	r0, r3
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40021000 	.word	0x40021000
 800066c:	20000008 	.word	0x20000008

08000670 <doActionBusy>:

v_error doActionBusy(stopWatch * busy) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]

	if (busy->status == STOPWATCH_READY) {
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d101      	bne.n	8000684 <doActionBusy+0x14>
		// do nothing
		return V_OK;
 8000680:	2301      	movs	r3, #1
 8000682:	e01a      	b.n	80006ba <doActionBusy+0x4a>
	} else if (busy->status == STOPWATCH_RUN) {
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d109      	bne.n	80006a0 <doActionBusy+0x30>
		// decrement SIT
		stopWatch_decrement(busy, timeUnit);
 800068c:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <doActionBusy+0x54>)
 800068e:	edd3 7a00 	vldr	s15, [r3]
 8000692:	eeb0 0a67 	vmov.f32	s0, s15
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f001 f815 	bl	80016c6 <stopWatch_decrement>
		return V_OK;
 800069c:	2301      	movs	r3, #1
 800069e:	e00c      	b.n	80006ba <doActionBusy+0x4a>
	} else if (busy->status == STOPWATCH_PAUSE) {
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b03      	cmp	r3, #3
 80006a6:	d101      	bne.n	80006ac <doActionBusy+0x3c>
		return V_OK;
 80006a8:	2301      	movs	r3, #1
 80006aa:	e006      	b.n	80006ba <doActionBusy+0x4a>
	} else if (busy->status == STOPWATCH_TIMEOUT) {
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b02      	cmp	r3, #2
 80006b2:	d101      	bne.n	80006b8 <doActionBusy+0x48>
		// ALERT!
		return V_OK;
 80006b4:	2301      	movs	r3, #1
 80006b6:	e000      	b.n	80006ba <doActionBusy+0x4a>
	} else {

		// ERROR
		return V_ERROR;
 80006b8:	2300      	movs	r3, #0
	}

}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000008 	.word	0x20000008

080006c8 <changeStateAway>:

v_error changeStateAway(stopWatch * away, stopWatch * busy, int checkBit) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	60b9      	str	r1, [r7, #8]
 80006d2:	607a      	str	r2, [r7, #4]

	if (away->status == STOPWATCH_READY) {
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d116      	bne.n	800070a <changeStateAway+0x42>
		if (busy->status == STOPWATCH_PAUSE) {
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b03      	cmp	r3, #3
 80006e2:	d104      	bne.n	80006ee <changeStateAway+0x26>
			stopWatch_start(away);
 80006e4:	68f8      	ldr	r0, [r7, #12]
 80006e6:	f000 ff6a 	bl	80015be <stopWatch_start>
			return V_OK;
 80006ea:	2301      	movs	r3, #1
 80006ec:	e053      	b.n	8000796 <changeStateAway+0xce>
		} else if (busy->status == STOPWATCH_TIMEOUT && checkBit == 0) {
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	2b02      	cmp	r3, #2
 80006f4:	d107      	bne.n	8000706 <changeStateAway+0x3e>
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d104      	bne.n	8000706 <changeStateAway+0x3e>
			stopWatch_start(away);
 80006fc:	68f8      	ldr	r0, [r7, #12]
 80006fe:	f000 ff5e 	bl	80015be <stopWatch_start>
			return V_OK;
 8000702:	2301      	movs	r3, #1
 8000704:	e047      	b.n	8000796 <changeStateAway+0xce>
		} else {
			return V_OK;
 8000706:	2301      	movs	r3, #1
 8000708:	e045      	b.n	8000796 <changeStateAway+0xce>
		}
	} else if (away->status == STOPWATCH_RUN) {
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2b01      	cmp	r3, #1
 8000710:	d127      	bne.n	8000762 <changeStateAway+0x9a>

		if (busy->status == STOPWATCH_TIMEOUT && checkBit == 1) {
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2b02      	cmp	r3, #2
 8000718:	d108      	bne.n	800072c <changeStateAway+0x64>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2b01      	cmp	r3, #1
 800071e:	d105      	bne.n	800072c <changeStateAway+0x64>
			stopWatch_halt(away);
 8000720:	68f8      	ldr	r0, [r7, #12]
 8000722:	f000 ff9c 	bl	800165e <stopWatch_halt>
			stopWatch_reset(away);
 8000726:	68f8      	ldr	r0, [r7, #12]
 8000728:	f000 ffb1 	bl	800168e <stopWatch_reset>
		}

		// check TIMEOUT
		if (away->timeCounter <= 0) {
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	edd3 7a01 	vldr	s15, [r3, #4]
 8000732:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800073a:	d804      	bhi.n	8000746 <changeStateAway+0x7e>
			// TIMEOUT
			stopWatch_timeout(away);
 800073c:	68f8      	ldr	r0, [r7, #12]
 800073e:	f000 ff7a 	bl	8001636 <stopWatch_timeout>
			return V_OK;
 8000742:	2301      	movs	r3, #1
 8000744:	e027      	b.n	8000796 <changeStateAway+0xce>
		} else {
			// check SIT
			if (busy->status == STOPWATCH_RUN) {
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d107      	bne.n	800075e <changeStateAway+0x96>
				stopWatch_halt(away);
 800074e:	68f8      	ldr	r0, [r7, #12]
 8000750:	f000 ff85 	bl	800165e <stopWatch_halt>
				stopWatch_reset(away);
 8000754:	68f8      	ldr	r0, [r7, #12]
 8000756:	f000 ff9a 	bl	800168e <stopWatch_reset>
				return V_OK;
 800075a:	2301      	movs	r3, #1
 800075c:	e01b      	b.n	8000796 <changeStateAway+0xce>
			} else {
				// do nothing
				return V_OK;
 800075e:	2301      	movs	r3, #1
 8000760:	e019      	b.n	8000796 <changeStateAway+0xce>
			}
		}
	} else if (away->status == STOPWATCH_TIMEOUT) {
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	2b02      	cmp	r3, #2
 8000768:	d10e      	bne.n	8000788 <changeStateAway+0xc0>
		if (busy->status == STOPWATCH_READY || busy->status == STOPWATCH_RUN) {
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d003      	beq.n	800077a <changeStateAway+0xb2>
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b01      	cmp	r3, #1
 8000778:	d104      	bne.n	8000784 <changeStateAway+0xbc>
			stopWatch_reset(away);
 800077a:	68f8      	ldr	r0, [r7, #12]
 800077c:	f000 ff87 	bl	800168e <stopWatch_reset>
			return V_OK;
 8000780:	2301      	movs	r3, #1
 8000782:	e008      	b.n	8000796 <changeStateAway+0xce>
		} else {
			return V_OK;
 8000784:	2301      	movs	r3, #1
 8000786:	e006      	b.n	8000796 <changeStateAway+0xce>
		}

	} else if (away->status == STOPWATCH_HALT) {
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b04      	cmp	r3, #4
 800078e:	d101      	bne.n	8000794 <changeStateAway+0xcc>

		return V_OK;
 8000790:	2301      	movs	r3, #1
 8000792:	e000      	b.n	8000796 <changeStateAway+0xce>

	} else {

		// ERROR
		return V_ERROR;
 8000794:	2300      	movs	r3, #0

	}
}
 8000796:	4618      	mov	r0, r3
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <changeStateBusy>:

v_error changeStateBusy(stopWatch * busy, int checkBit) {
 800079e:	b580      	push	{r7, lr}
 80007a0:	b082      	sub	sp, #8
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
 80007a6:	6039      	str	r1, [r7, #0]

	if (busy->status == STOPWATCH_READY) {
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d10e      	bne.n	80007ce <changeStateBusy+0x30>
		if (checkBit == 1) {
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d104      	bne.n	80007c0 <changeStateBusy+0x22>
			stopWatch_start(busy);
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f000 ff01 	bl	80015be <stopWatch_start>
			return V_OK;
 80007bc:	2301      	movs	r3, #1
 80007be:	e040      	b.n	8000842 <changeStateBusy+0xa4>
		} else if (checkBit == 0) {
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d101      	bne.n	80007ca <changeStateBusy+0x2c>
			// do nothing
			return V_OK;
 80007c6:	2301      	movs	r3, #1
 80007c8:	e03b      	b.n	8000842 <changeStateBusy+0xa4>
		} else {
			// ERROR
			return V_ERROR;
 80007ca:	2300      	movs	r3, #0
 80007cc:	e039      	b.n	8000842 <changeStateBusy+0xa4>
		}
	} else if (busy->status == STOPWATCH_RUN) {
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d11b      	bne.n	800080e <changeStateBusy+0x70>
		// check TIMEOUT
		if (busy->timeCounter <= 0) {
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80007dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80007e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007e4:	d804      	bhi.n	80007f0 <changeStateBusy+0x52>
			// TIMEOUT
			stopWatch_timeout(busy);
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f000 ff25 	bl	8001636 <stopWatch_timeout>
			return V_OK;
 80007ec:	2301      	movs	r3, #1
 80007ee:	e028      	b.n	8000842 <changeStateBusy+0xa4>
		} else {
			if (checkBit == 1) {
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d101      	bne.n	80007fa <changeStateBusy+0x5c>
				// do nothing
				return V_OK;
 80007f6:	2301      	movs	r3, #1
 80007f8:	e023      	b.n	8000842 <changeStateBusy+0xa4>
			} else if (checkBit == 0) {
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d104      	bne.n	800080a <changeStateBusy+0x6c>
				stopWatch_pause(busy);
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f000 fef0 	bl	80015e6 <stopWatch_pause>
				return V_OK;
 8000806:	2301      	movs	r3, #1
 8000808:	e01b      	b.n	8000842 <changeStateBusy+0xa4>
			} else {
				// ERROR
				return V_ERROR;
 800080a:	2300      	movs	r3, #0
 800080c:	e019      	b.n	8000842 <changeStateBusy+0xa4>
			}
		}
	} else if (busy->status == STOPWATCH_PAUSE) {
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2b03      	cmp	r3, #3
 8000814:	d10e      	bne.n	8000834 <changeStateBusy+0x96>
		if (checkBit == 1) {
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	2b01      	cmp	r3, #1
 800081a:	d104      	bne.n	8000826 <changeStateBusy+0x88>
			stopWatch_continue(busy);
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f000 fef6 	bl	800160e <stopWatch_continue>
			return V_OK;
 8000822:	2301      	movs	r3, #1
 8000824:	e00d      	b.n	8000842 <changeStateBusy+0xa4>
		} else if (checkBit == 0) {
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d101      	bne.n	8000830 <changeStateBusy+0x92>
			// do nothing
			return V_OK;
 800082c:	2301      	movs	r3, #1
 800082e:	e008      	b.n	8000842 <changeStateBusy+0xa4>
		} else {
			// ERROR
			return V_ERROR;
 8000830:	2300      	movs	r3, #0
 8000832:	e006      	b.n	8000842 <changeStateBusy+0xa4>
		}
	} else if (busy->status == STOPWATCH_TIMEOUT) {
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b02      	cmp	r3, #2
 800083a:	d101      	bne.n	8000840 <changeStateBusy+0xa2>

		// ALERT!
		return V_OK;
 800083c:	2301      	movs	r3, #1
 800083e:	e000      	b.n	8000842 <changeStateBusy+0xa4>

	} else {

		// ERROR
		return V_ERROR;
 8000840:	2300      	movs	r3, #0
	}
}
 8000842:	4618      	mov	r0, r3
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
	...

0800084c <isSitting>:

int isSitting() {
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_8) == GPIO_PIN_SET) {
 8000850:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000854:	4805      	ldr	r0, [pc, #20]	; (800086c <isSitting+0x20>)
 8000856:	f001 faf9 	bl	8001e4c <HAL_GPIO_ReadPin>
 800085a:	4603      	mov	r3, r0
 800085c:	2b01      	cmp	r3, #1
 800085e:	d101      	bne.n	8000864 <isSitting+0x18>
		return 1;
 8000860:	2301      	movs	r3, #1
 8000862:	e000      	b.n	8000866 <isSitting+0x1a>
	} else {
		return 0;
 8000864:	2300      	movs	r3, #0
	}
}
 8000866:	4618      	mov	r0, r3
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40021000 	.word	0x40021000

08000870 <isPlaying>:

int isPlaying() {
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
	return isplay;
 8000874:	4b03      	ldr	r3, [pc, #12]	; (8000884 <isPlaying+0x14>)
 8000876:	681b      	ldr	r3, [r3, #0]
}
 8000878:	4618      	mov	r0, r3
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	20000228 	.word	0x20000228

08000888 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	if (htim == &htim6) {
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4a1b      	ldr	r2, [pc, #108]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d12e      	bne.n	80008f6 <HAL_TIM_PeriodElapsedCallback+0x6e>

		// check MODE
		int checkBit;
		if (mode == 0) {
 8000898:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d103      	bne.n	80008a8 <HAL_TIM_PeriodElapsedCallback+0x20>
			// OFFICE MODE
			checkBit = isSitting();
 80008a0:	f7ff ffd4 	bl	800084c <isSitting>
 80008a4:	60f8      	str	r0, [r7, #12]
 80008a6:	e006      	b.n	80008b6 <HAL_TIM_PeriodElapsedCallback+0x2e>
		} else if (mode == 1) {
 80008a8:	4b16      	ldr	r3, [pc, #88]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d102      	bne.n	80008b6 <HAL_TIM_PeriodElapsedCallback+0x2e>
			// GAMEING MODE
			checkBit = isPlaying();
 80008b0:	f7ff ffde 	bl	8000870 <isPlaying>
 80008b4:	60f8      	str	r0, [r7, #12]
		} else {
			// ERROR
		}

		if (checkBit == 1) {
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d106      	bne.n	80008ca <HAL_TIM_PeriodElapsedCallback+0x42>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008c2:	4811      	ldr	r0, [pc, #68]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80008c4:	f001 fada 	bl	8001e7c <HAL_GPIO_WritePin>
 80008c8:	e005      	b.n	80008d6 <HAL_TIM_PeriodElapsedCallback+0x4e>
		} else {
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008d0:	480d      	ldr	r0, [pc, #52]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80008d2:	f001 fad3 	bl	8001e7c <HAL_GPIO_WritePin>
		}

		doActionBusy(&busy);
 80008d6:	480d      	ldr	r0, [pc, #52]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80008d8:	f7ff feca 	bl	8000670 <doActionBusy>
		doActionAway(&away, &busy);
 80008dc:	490b      	ldr	r1, [pc, #44]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80008de:	480c      	ldr	r0, [pc, #48]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80008e0:	f7ff fe7e 	bl	80005e0 <doActionAway>

		changeStateBusy(&busy, checkBit);
 80008e4:	68f9      	ldr	r1, [r7, #12]
 80008e6:	4809      	ldr	r0, [pc, #36]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80008e8:	f7ff ff59 	bl	800079e <changeStateBusy>
		changeStateAway(&away, &busy, checkBit);
 80008ec:	68fa      	ldr	r2, [r7, #12]
 80008ee:	4907      	ldr	r1, [pc, #28]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80008f0:	4807      	ldr	r0, [pc, #28]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80008f2:	f7ff fee9 	bl	80006c8 <changeStateAway>

	} else if (htim == &htim7) {
	}
}
 80008f6:	bf00      	nop
 80008f8:	3710      	adds	r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000324 	.word	0x20000324
 8000904:	20000224 	.word	0x20000224
 8000908:	40020c00 	.word	0x40020c00
 800090c:	20000300 	.word	0x20000300
 8000910:	20000364 	.word	0x20000364

08000914 <setMode>:

v_error setMode(int modeArg, int officeArg, int gameArg) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]

	stopWatch_halt(&busy);
 8000920:	4820      	ldr	r0, [pc, #128]	; (80009a4 <setMode+0x90>)
 8000922:	f000 fe9c 	bl	800165e <stopWatch_halt>
	stopWatch_halt(&away);
 8000926:	4820      	ldr	r0, [pc, #128]	; (80009a8 <setMode+0x94>)
 8000928:	f000 fe99 	bl	800165e <stopWatch_halt>

	mode = modeArg;
 800092c:	4a1f      	ldr	r2, [pc, #124]	; (80009ac <setMode+0x98>)
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	6013      	str	r3, [r2, #0]
	office = officeArg;
 8000932:	4a1f      	ldr	r2, [pc, #124]	; (80009b0 <setMode+0x9c>)
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	6013      	str	r3, [r2, #0]
	game = gameArg;
 8000938:	4a1e      	ldr	r2, [pc, #120]	; (80009b4 <setMode+0xa0>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6013      	str	r3, [r2, #0]

	// reset AWAY
	stopWatch_halt(&away);
 800093e:	481a      	ldr	r0, [pc, #104]	; (80009a8 <setMode+0x94>)
 8000940:	f000 fe8d 	bl	800165e <stopWatch_halt>
	stopWatch_reset(&away);
 8000944:	4818      	ldr	r0, [pc, #96]	; (80009a8 <setMode+0x94>)
 8000946:	f000 fea2 	bl	800168e <stopWatch_reset>

	// initialize BUSY
	if (mode == 0) {
 800094a:	4b18      	ldr	r3, [pc, #96]	; (80009ac <setMode+0x98>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d10e      	bne.n	8000970 <setMode+0x5c>
		stopWatch_init(&busy, convertTime(0, 0, office));
 8000952:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <setMode+0x9c>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	461a      	mov	r2, r3
 8000958:	2100      	movs	r1, #0
 800095a:	2000      	movs	r0, #0
 800095c:	f7ff fe20 	bl	80005a0 <convertTime>
 8000960:	eef0 7a40 	vmov.f32	s15, s0
 8000964:	eeb0 0a67 	vmov.f32	s0, s15
 8000968:	480e      	ldr	r0, [pc, #56]	; (80009a4 <setMode+0x90>)
 800096a:	f000 fe09 	bl	8001580 <stopWatch_init>
 800096e:	e014      	b.n	800099a <setMode+0x86>
	} else if (mode == 1) {
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <setMode+0x98>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d10e      	bne.n	8000996 <setMode+0x82>
		stopWatch_init(&busy, convertTime(0, 0, game));
 8000978:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <setMode+0xa0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	461a      	mov	r2, r3
 800097e:	2100      	movs	r1, #0
 8000980:	2000      	movs	r0, #0
 8000982:	f7ff fe0d 	bl	80005a0 <convertTime>
 8000986:	eef0 7a40 	vmov.f32	s15, s0
 800098a:	eeb0 0a67 	vmov.f32	s0, s15
 800098e:	4805      	ldr	r0, [pc, #20]	; (80009a4 <setMode+0x90>)
 8000990:	f000 fdf6 	bl	8001580 <stopWatch_init>
 8000994:	e001      	b.n	800099a <setMode+0x86>
	} else {
		return V_ERROR;
 8000996:	2300      	movs	r3, #0
 8000998:	e000      	b.n	800099c <setMode+0x88>
	}
	return V_OK;
 800099a:	2301      	movs	r3, #1

}
 800099c:	4618      	mov	r0, r3
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000300 	.word	0x20000300
 80009a8:	20000364 	.word	0x20000364
 80009ac:	20000224 	.word	0x20000224
 80009b0:	20000000 	.word	0x20000000
 80009b4:	20000004 	.word	0x20000004

080009b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08e      	sub	sp, #56	; 0x38
 80009bc:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009be:	f000 ff05 	bl	80017cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c2:	f000 f8bf 	bl	8000b44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c6:	f000 fab7 	bl	8000f38 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009ca:	f000 f93d 	bl	8000c48 <MX_I2C1_Init>
  MX_I2S3_Init();
 80009ce:	f000 f969 	bl	8000ca4 <MX_I2S3_Init>
  MX_SPI1_Init();
 80009d2:	f000 f997 	bl	8000d04 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80009d6:	f008 f915 	bl	8008c04 <MX_USB_HOST_Init>
  MX_TIM6_Init();
 80009da:	f000 fa17 	bl	8000e0c <MX_TIM6_Init>
  MX_TIM7_Init();
 80009de:	f000 fa4b 	bl	8000e78 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 80009e2:	f000 fa7f 	bl	8000ee4 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80009e6:	f000 f9c3 	bl	8000d70 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Base_Start_IT(&htim6);
//  HAL_TIM_Base_Start_IT(&htim7);

  stopWatch_init(&busy, convertTime(0, 0, 10));
 80009ea:	220a      	movs	r2, #10
 80009ec:	2100      	movs	r1, #0
 80009ee:	2000      	movs	r0, #0
 80009f0:	f7ff fdd6 	bl	80005a0 <convertTime>
 80009f4:	eef0 7a40 	vmov.f32	s15, s0
 80009f8:	eeb0 0a67 	vmov.f32	s0, s15
 80009fc:	4843      	ldr	r0, [pc, #268]	; (8000b0c <main+0x154>)
 80009fe:	f000 fdbf 	bl	8001580 <stopWatch_init>
  stopWatch_init(&away, convertTime(0, 0, 10));
 8000a02:	220a      	movs	r2, #10
 8000a04:	2100      	movs	r1, #0
 8000a06:	2000      	movs	r0, #0
 8000a08:	f7ff fdca 	bl	80005a0 <convertTime>
 8000a0c:	eef0 7a40 	vmov.f32	s15, s0
 8000a10:	eeb0 0a67 	vmov.f32	s0, s15
 8000a14:	483e      	ldr	r0, [pc, #248]	; (8000b10 <main+0x158>)
 8000a16:	f000 fdb3 	bl	8001580 <stopWatch_init>

  HAL_TIM_Base_Start_IT(&htim6);
 8000a1a:	483e      	ldr	r0, [pc, #248]	; (8000b14 <main+0x15c>)
 8000a1c:	f004 fab5 	bl	8004f8a <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	    // static cast (char *) to (uint_8 *) to suppress warnings.
	hal_rec = HAL_UART_Receive(&huart2, ubuff, sizeof(ubuff), 20000);
 8000a20:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000a24:	221e      	movs	r2, #30
 8000a26:	493c      	ldr	r1, [pc, #240]	; (8000b18 <main+0x160>)
 8000a28:	483c      	ldr	r0, [pc, #240]	; (8000b1c <main+0x164>)
 8000a2a:	f004 ff69 	bl	8005900 <HAL_UART_Receive>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	461a      	mov	r2, r3
 8000a32:	4b3b      	ldr	r3, [pc, #236]	; (8000b20 <main+0x168>)
 8000a34:	701a      	strb	r2, [r3, #0]
	if (hal_rec == HAL_OK) {
 8000a36:	4b3a      	ldr	r3, [pc, #232]	; (8000b20 <main+0x168>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d15a      	bne.n	8000af4 <main+0x13c>
		rec = 1;
 8000a3e:	4b39      	ldr	r3, [pc, #228]	; (8000b24 <main+0x16c>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	601a      	str	r2, [r3, #0]

		int arg1 = 0, arg2 = 1, arg3 = 1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	623b      	str	r3, [r7, #32]
 8000a48:	2301      	movs	r3, #1
 8000a4a:	61fb      	str	r3, [r7, #28]
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	61bb      	str	r3, [r7, #24]

		sscanf(ubuff, "%s %s %d %d %d", sudo, cmd, &arg1, &arg2, &arg3);
 8000a50:	f107 0318 	add.w	r3, r7, #24
 8000a54:	9302      	str	r3, [sp, #8]
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	9301      	str	r3, [sp, #4]
 8000a5c:	f107 0320 	add.w	r3, r7, #32
 8000a60:	9300      	str	r3, [sp, #0]
 8000a62:	4b31      	ldr	r3, [pc, #196]	; (8000b28 <main+0x170>)
 8000a64:	4a31      	ldr	r2, [pc, #196]	; (8000b2c <main+0x174>)
 8000a66:	4932      	ldr	r1, [pc, #200]	; (8000b30 <main+0x178>)
 8000a68:	482b      	ldr	r0, [pc, #172]	; (8000b18 <main+0x160>)
 8000a6a:	f008 fccd 	bl	8009408 <siscanf>
		memset(ubuff,0,sizeof(ubuff));
 8000a6e:	221e      	movs	r2, #30
 8000a70:	2100      	movs	r1, #0
 8000a72:	4829      	ldr	r0, [pc, #164]	; (8000b18 <main+0x160>)
 8000a74:	f008 fc08 	bl	8009288 <memset>
		int i = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24

		if (strcmp(cmd, "echo") == 0) {
 8000a7c:	492d      	ldr	r1, [pc, #180]	; (8000b34 <main+0x17c>)
 8000a7e:	482a      	ldr	r0, [pc, #168]	; (8000b28 <main+0x170>)
 8000a80:	f7ff fba6 	bl	80001d0 <strcmp>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d11b      	bne.n	8000ac2 <main+0x10a>

			// echo msg back ...
			char ret[20] = "echo";
 8000a8a:	4a2a      	ldr	r2, [pc, #168]	; (8000b34 <main+0x17c>)
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a92:	6018      	str	r0, [r3, #0]
 8000a94:	3304      	adds	r3, #4
 8000a96:	7019      	strb	r1, [r3, #0]
 8000a98:	f107 0309 	add.w	r3, r7, #9
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	f8c3 200b 	str.w	r2, [r3, #11]
			HAL_UART_Transmit(&huart2, ret, strlen(ret), 1000);
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fb9a 	bl	80001e4 <strlen>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	1d39      	adds	r1, r7, #4
 8000ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aba:	4818      	ldr	r0, [pc, #96]	; (8000b1c <main+0x164>)
 8000abc:	f004 fe87 	bl	80057ce <HAL_UART_Transmit>
 8000ac0:	e01d      	b.n	8000afe <main+0x146>

		} else if (strcmp(cmd, "set") == 0) {
 8000ac2:	491d      	ldr	r1, [pc, #116]	; (8000b38 <main+0x180>)
 8000ac4:	4818      	ldr	r0, [pc, #96]	; (8000b28 <main+0x170>)
 8000ac6:	f7ff fb83 	bl	80001d0 <strcmp>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d106      	bne.n	8000ade <main+0x126>

			// set mode office game alarm
			setMode(arg1, arg2, arg3);
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	69f9      	ldr	r1, [r7, #28]
 8000ad4:	69ba      	ldr	r2, [r7, #24]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff ff1c 	bl	8000914 <setMode>
 8000adc:	e00f      	b.n	8000afe <main+0x146>


		} else if (strcmp(cmd, "isplay") == 0) {
 8000ade:	4917      	ldr	r1, [pc, #92]	; (8000b3c <main+0x184>)
 8000ae0:	4811      	ldr	r0, [pc, #68]	; (8000b28 <main+0x170>)
 8000ae2:	f7ff fb75 	bl	80001d0 <strcmp>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d108      	bne.n	8000afe <main+0x146>

			// set mode office game alarm
			isplay = arg1;
 8000aec:	6a3b      	ldr	r3, [r7, #32]
 8000aee:	4a14      	ldr	r2, [pc, #80]	; (8000b40 <main+0x188>)
 8000af0:	6013      	str	r3, [r2, #0]
 8000af2:	e004      	b.n	8000afe <main+0x146>

		} else {
		}
	} else {
		memset(ubuff,0,sizeof(ubuff));
 8000af4:	221e      	movs	r2, #30
 8000af6:	2100      	movs	r1, #0
 8000af8:	4807      	ldr	r0, [pc, #28]	; (8000b18 <main+0x160>)
 8000afa:	f008 fbc5 	bl	8009288 <memset>
	}

	HAL_Delay(1000);
 8000afe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b02:	f000 fed5 	bl	80018b0 <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000b06:	f008 f8a3 	bl	8008c50 <MX_USB_HOST_Process>
	hal_rec = HAL_UART_Receive(&huart2, ubuff, sizeof(ubuff), 20000);
 8000b0a:	e789      	b.n	8000a20 <main+0x68>
 8000b0c:	20000300 	.word	0x20000300
 8000b10:	20000364 	.word	0x20000364
 8000b14:	20000324 	.word	0x20000324
 8000b18:	20000244 	.word	0x20000244
 8000b1c:	200003c8 	.word	0x200003c8
 8000b20:	200002fc 	.word	0x200002fc
 8000b24:	2000022c 	.word	0x2000022c
 8000b28:	20000490 	.word	0x20000490
 8000b2c:	20000318 	.word	0x20000318
 8000b30:	08009e60 	.word	0x08009e60
 8000b34:	08009e70 	.word	0x08009e70
 8000b38:	08009e78 	.word	0x08009e78
 8000b3c:	08009e7c 	.word	0x08009e7c
 8000b40:	20000228 	.word	0x20000228

08000b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b098      	sub	sp, #96	; 0x60
 8000b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b4e:	2230      	movs	r2, #48	; 0x30
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f008 fb98 	bl	8009288 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b58:	f107 031c 	add.w	r3, r7, #28
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	4b31      	ldr	r3, [pc, #196]	; (8000c40 <SystemClock_Config+0xfc>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	4a30      	ldr	r2, [pc, #192]	; (8000c40 <SystemClock_Config+0xfc>)
 8000b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b84:	6413      	str	r3, [r2, #64]	; 0x40
 8000b86:	4b2e      	ldr	r3, [pc, #184]	; (8000c40 <SystemClock_Config+0xfc>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b92:	2300      	movs	r3, #0
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	4b2b      	ldr	r3, [pc, #172]	; (8000c44 <SystemClock_Config+0x100>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a2a      	ldr	r2, [pc, #168]	; (8000c44 <SystemClock_Config+0x100>)
 8000b9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba0:	6013      	str	r3, [r2, #0]
 8000ba2:	4b28      	ldr	r3, [pc, #160]	; (8000c44 <SystemClock_Config+0x100>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bb6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bbc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bc2:	2308      	movs	r3, #8
 8000bc4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000bc6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000bca:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bd0:	2307      	movs	r3, #7
 8000bd2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f003 fba7 	bl	800432c <HAL_RCC_OscConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000be4:	f000 fab4 	bl	8001150 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be8:	230f      	movs	r3, #15
 8000bea:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bec:	2302      	movs	r3, #2
 8000bee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bf4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c00:	f107 031c 	add.w	r3, r7, #28
 8000c04:	2105      	movs	r1, #5
 8000c06:	4618      	mov	r0, r3
 8000c08:	f003 fe00 	bl	800480c <HAL_RCC_ClockConfig>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000c12:	f000 fa9d 	bl	8001150 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c16:	2301      	movs	r3, #1
 8000c18:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c1a:	23c0      	movs	r3, #192	; 0xc0
 8000c1c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c22:	f107 030c 	add.w	r3, r7, #12
 8000c26:	4618      	mov	r0, r3
 8000c28:	f003 ffe2 	bl	8004bf0 <HAL_RCCEx_PeriphCLKConfig>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000c32:	f000 fa8d 	bl	8001150 <Error_Handler>
  }
}
 8000c36:	bf00      	nop
 8000c38:	3760      	adds	r7, #96	; 0x60
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40007000 	.word	0x40007000

08000c48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <MX_I2C1_Init+0x50>)
 8000c4e:	4a13      	ldr	r2, [pc, #76]	; (8000c9c <MX_I2C1_Init+0x54>)
 8000c50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <MX_I2C1_Init+0x50>)
 8000c54:	4a12      	ldr	r2, [pc, #72]	; (8000ca0 <MX_I2C1_Init+0x58>)
 8000c56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <MX_I2C1_Init+0x50>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <MX_I2C1_Init+0x50>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <MX_I2C1_Init+0x50>)
 8000c66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <MX_I2C1_Init+0x50>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c72:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <MX_I2C1_Init+0x50>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c78:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <MX_I2C1_Init+0x50>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <MX_I2C1_Init+0x50>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c84:	4804      	ldr	r0, [pc, #16]	; (8000c98 <MX_I2C1_Init+0x50>)
 8000c86:	f002 fd79 	bl	800377c <HAL_I2C_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c90:	f000 fa5e 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	200002a8 	.word	0x200002a8
 8000c9c:	40005400 	.word	0x40005400
 8000ca0:	000186a0 	.word	0x000186a0

08000ca4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000ca8:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <MX_I2S3_Init+0x54>)
 8000caa:	4a14      	ldr	r2, [pc, #80]	; (8000cfc <MX_I2S3_Init+0x58>)
 8000cac:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000cae:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <MX_I2S3_Init+0x54>)
 8000cb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cb4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000cb6:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <MX_I2S3_Init+0x54>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000cbc:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <MX_I2S3_Init+0x54>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <MX_I2S3_Init+0x54>)
 8000cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cc8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000cca:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <MX_I2S3_Init+0x54>)
 8000ccc:	4a0c      	ldr	r2, [pc, #48]	; (8000d00 <MX_I2S3_Init+0x5c>)
 8000cce:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <MX_I2S3_Init+0x54>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <MX_I2S3_Init+0x54>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <MX_I2S3_Init+0x54>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <MX_I2S3_Init+0x54>)
 8000ce4:	f002 fe82 	bl	80039ec <HAL_I2S_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000cee:	f000 fa2f 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000448 	.word	0x20000448
 8000cfc:	40003c00 	.word	0x40003c00
 8000d00:	00017700 	.word	0x00017700

08000d04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d08:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d0a:	4a18      	ldr	r2, [pc, #96]	; (8000d6c <MX_SPI1_Init+0x68>)
 8000d0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d0e:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d16:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d22:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d28:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d36:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d48:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d50:	220a      	movs	r2, #10
 8000d52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d54:	4804      	ldr	r0, [pc, #16]	; (8000d68 <MX_SPI1_Init+0x64>)
 8000d56:	f004 f889 	bl	8004e6c <HAL_SPI_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d60:	f000 f9f6 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000370 	.word	0x20000370
 8000d6c:	40013000 	.word	0x40013000

08000d70 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d76:	f107 0308 	add.w	r3, r7, #8
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d84:	463b      	mov	r3, r7
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d8c:	4b1d      	ldr	r3, [pc, #116]	; (8000e04 <MX_TIM4_Init+0x94>)
 8000d8e:	4a1e      	ldr	r2, [pc, #120]	; (8000e08 <MX_TIM4_Init+0x98>)
 8000d90:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 999;
 8000d92:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <MX_TIM4_Init+0x94>)
 8000d94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d98:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9a:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <MX_TIM4_Init+0x94>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000da0:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <MX_TIM4_Init+0x94>)
 8000da2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000da6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da8:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <MX_TIM4_Init+0x94>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <MX_TIM4_Init+0x94>)
 8000db0:	2280      	movs	r2, #128	; 0x80
 8000db2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000db4:	4813      	ldr	r0, [pc, #76]	; (8000e04 <MX_TIM4_Init+0x94>)
 8000db6:	f004 f8bd 	bl	8004f34 <HAL_TIM_Base_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000dc0:	f000 f9c6 	bl	8001150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000dca:	f107 0308 	add.w	r3, r7, #8
 8000dce:	4619      	mov	r1, r3
 8000dd0:	480c      	ldr	r0, [pc, #48]	; (8000e04 <MX_TIM4_Init+0x94>)
 8000dd2:	f004 fa06 	bl	80051e2 <HAL_TIM_ConfigClockSource>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000ddc:	f000 f9b8 	bl	8001150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de0:	2300      	movs	r3, #0
 8000de2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de4:	2300      	movs	r3, #0
 8000de6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000de8:	463b      	mov	r3, r7
 8000dea:	4619      	mov	r1, r3
 8000dec:	4805      	ldr	r0, [pc, #20]	; (8000e04 <MX_TIM4_Init+0x94>)
 8000dee:	f004 fc11 	bl	8005614 <HAL_TIMEx_MasterConfigSynchronization>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000df8:	f000 f9aa 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000dfc:	bf00      	nop
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000264 	.word	0x20000264
 8000e08:	40000800 	.word	0x40000800

08000e0c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e12:	463b      	mov	r3, r7
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <MX_TIM6_Init+0x64>)
 8000e1c:	4a15      	ldr	r2, [pc, #84]	; (8000e74 <MX_TIM6_Init+0x68>)
 8000e1e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16799;
 8000e20:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <MX_TIM6_Init+0x64>)
 8000e22:	f244 129f 	movw	r2, #16799	; 0x419f
 8000e26:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <MX_TIM6_Init+0x64>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <MX_TIM6_Init+0x64>)
 8000e30:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e34:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <MX_TIM6_Init+0x64>)
 8000e38:	2280      	movs	r2, #128	; 0x80
 8000e3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e3c:	480c      	ldr	r0, [pc, #48]	; (8000e70 <MX_TIM6_Init+0x64>)
 8000e3e:	f004 f879 	bl	8004f34 <HAL_TIM_Base_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000e48:	f000 f982 	bl	8001150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e54:	463b      	mov	r3, r7
 8000e56:	4619      	mov	r1, r3
 8000e58:	4805      	ldr	r0, [pc, #20]	; (8000e70 <MX_TIM6_Init+0x64>)
 8000e5a:	f004 fbdb 	bl	8005614 <HAL_TIMEx_MasterConfigSynchronization>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000e64:	f000 f974 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000324 	.word	0x20000324
 8000e74:	40001000 	.word	0x40001000

08000e78 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e7e:	463b      	mov	r3, r7
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <MX_TIM7_Init+0x64>)
 8000e88:	4a15      	ldr	r2, [pc, #84]	; (8000ee0 <MX_TIM7_Init+0x68>)
 8000e8a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 16799;
 8000e8c:	4b13      	ldr	r3, [pc, #76]	; (8000edc <MX_TIM7_Init+0x64>)
 8000e8e:	f244 129f 	movw	r2, #16799	; 0x419f
 8000e92:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e94:	4b11      	ldr	r3, [pc, #68]	; (8000edc <MX_TIM7_Init+0x64>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <MX_TIM7_Init+0x64>)
 8000e9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ea0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <MX_TIM7_Init+0x64>)
 8000ea4:	2280      	movs	r2, #128	; 0x80
 8000ea6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000ea8:	480c      	ldr	r0, [pc, #48]	; (8000edc <MX_TIM7_Init+0x64>)
 8000eaa:	f004 f843 	bl	8004f34 <HAL_TIM_Base_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000eb4:	f000 f94c 	bl	8001150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4805      	ldr	r0, [pc, #20]	; (8000edc <MX_TIM7_Init+0x64>)
 8000ec6:	f004 fba5 	bl	8005614 <HAL_TIMEx_MasterConfigSynchronization>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000ed0:	f000 f93e 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000408 	.word	0x20000408
 8000ee0:	40001400 	.word	0x40001400

08000ee4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <MX_USART2_UART_Init+0x4c>)
 8000eea:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <MX_USART2_UART_Init+0x50>)
 8000eec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <MX_USART2_UART_Init+0x4c>)
 8000ef0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ef4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <MX_USART2_UART_Init+0x4c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <MX_USART2_UART_Init+0x4c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <MX_USART2_UART_Init+0x4c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <MX_USART2_UART_Init+0x4c>)
 8000f0a:	220c      	movs	r2, #12
 8000f0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <MX_USART2_UART_Init+0x4c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <MX_USART2_UART_Init+0x4c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f1a:	4805      	ldr	r0, [pc, #20]	; (8000f30 <MX_USART2_UART_Init+0x4c>)
 8000f1c:	f004 fc0a 	bl	8005734 <HAL_UART_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f26:	f000 f913 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200003c8 	.word	0x200003c8
 8000f34:	40004400 	.word	0x40004400

08000f38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08c      	sub	sp, #48	; 0x30
 8000f3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3e:	f107 031c 	add.w	r3, r7, #28
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
 8000f4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61bb      	str	r3, [r7, #24]
 8000f52:	4b78      	ldr	r3, [pc, #480]	; (8001134 <MX_GPIO_Init+0x1fc>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a77      	ldr	r2, [pc, #476]	; (8001134 <MX_GPIO_Init+0x1fc>)
 8000f58:	f043 0310 	orr.w	r3, r3, #16
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b75      	ldr	r3, [pc, #468]	; (8001134 <MX_GPIO_Init+0x1fc>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0310 	and.w	r3, r3, #16
 8000f66:	61bb      	str	r3, [r7, #24]
 8000f68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
 8000f6e:	4b71      	ldr	r3, [pc, #452]	; (8001134 <MX_GPIO_Init+0x1fc>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a70      	ldr	r2, [pc, #448]	; (8001134 <MX_GPIO_Init+0x1fc>)
 8000f74:	f043 0304 	orr.w	r3, r3, #4
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b6e      	ldr	r3, [pc, #440]	; (8001134 <MX_GPIO_Init+0x1fc>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0304 	and.w	r3, r3, #4
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	4b6a      	ldr	r3, [pc, #424]	; (8001134 <MX_GPIO_Init+0x1fc>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a69      	ldr	r2, [pc, #420]	; (8001134 <MX_GPIO_Init+0x1fc>)
 8000f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b67      	ldr	r3, [pc, #412]	; (8001134 <MX_GPIO_Init+0x1fc>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	4b63      	ldr	r3, [pc, #396]	; (8001134 <MX_GPIO_Init+0x1fc>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a62      	ldr	r2, [pc, #392]	; (8001134 <MX_GPIO_Init+0x1fc>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b60      	ldr	r3, [pc, #384]	; (8001134 <MX_GPIO_Init+0x1fc>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	4b5c      	ldr	r3, [pc, #368]	; (8001134 <MX_GPIO_Init+0x1fc>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a5b      	ldr	r2, [pc, #364]	; (8001134 <MX_GPIO_Init+0x1fc>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b59      	ldr	r3, [pc, #356]	; (8001134 <MX_GPIO_Init+0x1fc>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	4b55      	ldr	r3, [pc, #340]	; (8001134 <MX_GPIO_Init+0x1fc>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a54      	ldr	r2, [pc, #336]	; (8001134 <MX_GPIO_Init+0x1fc>)
 8000fe4:	f043 0308 	orr.w	r3, r3, #8
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b52      	ldr	r3, [pc, #328]	; (8001134 <MX_GPIO_Init+0x1fc>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0308 	and.w	r3, r3, #8
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f44f 7102 	mov.w	r1, #520	; 0x208
 8000ffc:	484e      	ldr	r0, [pc, #312]	; (8001138 <MX_GPIO_Init+0x200>)
 8000ffe:	f000 ff3d 	bl	8001e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001002:	2201      	movs	r2, #1
 8001004:	2101      	movs	r1, #1
 8001006:	484d      	ldr	r0, [pc, #308]	; (800113c <MX_GPIO_Init+0x204>)
 8001008:	f000 ff38 	bl	8001e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|GPIO_PIN_14|LD6_Pin 
 800100c:	2200      	movs	r2, #0
 800100e:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001012:	484b      	ldr	r0, [pc, #300]	; (8001140 <MX_GPIO_Init+0x208>)
 8001014:	f000 ff32 	bl	8001e7c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin PE9 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_9;
 8001018:	f44f 7302 	mov.w	r3, #520	; 0x208
 800101c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101e:	2301      	movs	r3, #1
 8001020:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800102a:	f107 031c 	add.w	r3, r7, #28
 800102e:	4619      	mov	r1, r3
 8001030:	4841      	ldr	r0, [pc, #260]	; (8001138 <MX_GPIO_Init+0x200>)
 8001032:	f000 fd71 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001036:	2301      	movs	r3, #1
 8001038:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103a:	2301      	movs	r3, #1
 800103c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001046:	f107 031c 	add.w	r3, r7, #28
 800104a:	4619      	mov	r1, r3
 800104c:	483b      	ldr	r0, [pc, #236]	; (800113c <MX_GPIO_Init+0x204>)
 800104e:	f000 fd63 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001052:	2308      	movs	r3, #8
 8001054:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001062:	2305      	movs	r3, #5
 8001064:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001066:	f107 031c 	add.w	r3, r7, #28
 800106a:	4619      	mov	r1, r3
 800106c:	4833      	ldr	r0, [pc, #204]	; (800113c <MX_GPIO_Init+0x204>)
 800106e:	f000 fd53 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001072:	2301      	movs	r3, #1
 8001074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001076:	4b33      	ldr	r3, [pc, #204]	; (8001144 <MX_GPIO_Init+0x20c>)
 8001078:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800107e:	f107 031c 	add.w	r3, r7, #28
 8001082:	4619      	mov	r1, r3
 8001084:	4830      	ldr	r0, [pc, #192]	; (8001148 <MX_GPIO_Init+0x210>)
 8001086:	f000 fd47 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800108a:	2304      	movs	r3, #4
 800108c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800108e:	2300      	movs	r3, #0
 8001090:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	4619      	mov	r1, r3
 800109c:	482b      	ldr	r0, [pc, #172]	; (800114c <MX_GPIO_Init+0x214>)
 800109e:	f000 fd3b 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a8:	2300      	movs	r3, #0
 80010aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	4619      	mov	r1, r3
 80010b6:	4820      	ldr	r0, [pc, #128]	; (8001138 <MX_GPIO_Init+0x200>)
 80010b8:	f000 fd2e 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80010bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010ce:	2305      	movs	r3, #5
 80010d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	4619      	mov	r1, r3
 80010d8:	481c      	ldr	r0, [pc, #112]	; (800114c <MX_GPIO_Init+0x214>)
 80010da:	f000 fd1d 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin PD14 LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|GPIO_PIN_14|LD6_Pin 
 80010de:	f24f 0310 	movw	r3, #61456	; 0xf010
 80010e2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e4:	2301      	movs	r3, #1
 80010e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010f0:	f107 031c 	add.w	r3, r7, #28
 80010f4:	4619      	mov	r1, r3
 80010f6:	4812      	ldr	r0, [pc, #72]	; (8001140 <MX_GPIO_Init+0x208>)
 80010f8:	f000 fd0e 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80010fc:	2320      	movs	r3, #32
 80010fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001100:	2300      	movs	r3, #0
 8001102:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001108:	f107 031c 	add.w	r3, r7, #28
 800110c:	4619      	mov	r1, r3
 800110e:	480c      	ldr	r0, [pc, #48]	; (8001140 <MX_GPIO_Init+0x208>)
 8001110:	f000 fd02 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001114:	2302      	movs	r3, #2
 8001116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001118:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <MX_GPIO_Init+0x20c>)
 800111a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001120:	f107 031c 	add.w	r3, r7, #28
 8001124:	4619      	mov	r1, r3
 8001126:	4804      	ldr	r0, [pc, #16]	; (8001138 <MX_GPIO_Init+0x200>)
 8001128:	f000 fcf6 	bl	8001b18 <HAL_GPIO_Init>

}
 800112c:	bf00      	nop
 800112e:	3730      	adds	r7, #48	; 0x30
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40023800 	.word	0x40023800
 8001138:	40021000 	.word	0x40021000
 800113c:	40020800 	.word	0x40020800
 8001140:	40020c00 	.word	0x40020c00
 8001144:	10120000 	.word	0x10120000
 8001148:	40020000 	.word	0x40020000
 800114c:	40020400 	.word	0x40020400

08001150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
	...

08001160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	4b10      	ldr	r3, [pc, #64]	; (80011ac <HAL_MspInit+0x4c>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	4a0f      	ldr	r2, [pc, #60]	; (80011ac <HAL_MspInit+0x4c>)
 8001170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001174:	6453      	str	r3, [r2, #68]	; 0x44
 8001176:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <HAL_MspInit+0x4c>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	603b      	str	r3, [r7, #0]
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <HAL_MspInit+0x4c>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	4a08      	ldr	r2, [pc, #32]	; (80011ac <HAL_MspInit+0x4c>)
 800118c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001190:	6413      	str	r3, [r2, #64]	; 0x40
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_MspInit+0x4c>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119a:	603b      	str	r3, [r7, #0]
 800119c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	40023800 	.word	0x40023800

080011b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	; 0x28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a19      	ldr	r2, [pc, #100]	; (8001234 <HAL_I2C_MspInit+0x84>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d12c      	bne.n	800122c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
 80011d6:	4b18      	ldr	r3, [pc, #96]	; (8001238 <HAL_I2C_MspInit+0x88>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a17      	ldr	r2, [pc, #92]	; (8001238 <HAL_I2C_MspInit+0x88>)
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <HAL_I2C_MspInit+0x88>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80011ee:	f44f 7310 	mov.w	r3, #576	; 0x240
 80011f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011f4:	2312      	movs	r3, #18
 80011f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f8:	2301      	movs	r3, #1
 80011fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001200:	2304      	movs	r3, #4
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	4619      	mov	r1, r3
 800120a:	480c      	ldr	r0, [pc, #48]	; (800123c <HAL_I2C_MspInit+0x8c>)
 800120c:	f000 fc84 	bl	8001b18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <HAL_I2C_MspInit+0x88>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001218:	4a07      	ldr	r2, [pc, #28]	; (8001238 <HAL_I2C_MspInit+0x88>)
 800121a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800121e:	6413      	str	r3, [r2, #64]	; 0x40
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <HAL_I2C_MspInit+0x88>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800122c:	bf00      	nop
 800122e:	3728      	adds	r7, #40	; 0x28
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40005400 	.word	0x40005400
 8001238:	40023800 	.word	0x40023800
 800123c:	40020400 	.word	0x40020400

08001240 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	; 0x28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a28      	ldr	r2, [pc, #160]	; (8001300 <HAL_I2S_MspInit+0xc0>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d14a      	bne.n	80012f8 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	4b27      	ldr	r3, [pc, #156]	; (8001304 <HAL_I2S_MspInit+0xc4>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	4a26      	ldr	r2, [pc, #152]	; (8001304 <HAL_I2S_MspInit+0xc4>)
 800126c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001270:	6413      	str	r3, [r2, #64]	; 0x40
 8001272:	4b24      	ldr	r3, [pc, #144]	; (8001304 <HAL_I2S_MspInit+0xc4>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b20      	ldr	r3, [pc, #128]	; (8001304 <HAL_I2S_MspInit+0xc4>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a1f      	ldr	r2, [pc, #124]	; (8001304 <HAL_I2S_MspInit+0xc4>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <HAL_I2S_MspInit+0xc4>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	4b19      	ldr	r3, [pc, #100]	; (8001304 <HAL_I2S_MspInit+0xc4>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a18      	ldr	r2, [pc, #96]	; (8001304 <HAL_I2S_MspInit+0xc4>)
 80012a4:	f043 0304 	orr.w	r3, r3, #4
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b16      	ldr	r3, [pc, #88]	; (8001304 <HAL_I2S_MspInit+0xc4>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0304 	and.w	r3, r3, #4
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80012b6:	2310      	movs	r3, #16
 80012b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ba:	2302      	movs	r3, #2
 80012bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012c6:	2306      	movs	r3, #6
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4619      	mov	r1, r3
 80012d0:	480d      	ldr	r0, [pc, #52]	; (8001308 <HAL_I2S_MspInit+0xc8>)
 80012d2:	f000 fc21 	bl	8001b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80012d6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80012da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	2300      	movs	r3, #0
 80012e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012e8:	2306      	movs	r3, #6
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	4619      	mov	r1, r3
 80012f2:	4806      	ldr	r0, [pc, #24]	; (800130c <HAL_I2S_MspInit+0xcc>)
 80012f4:	f000 fc10 	bl	8001b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80012f8:	bf00      	nop
 80012fa:	3728      	adds	r7, #40	; 0x28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40003c00 	.word	0x40003c00
 8001304:	40023800 	.word	0x40023800
 8001308:	40020000 	.word	0x40020000
 800130c:	40020800 	.word	0x40020800

08001310 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a19      	ldr	r2, [pc, #100]	; (8001394 <HAL_SPI_MspInit+0x84>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d12b      	bne.n	800138a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	4b18      	ldr	r3, [pc, #96]	; (8001398 <HAL_SPI_MspInit+0x88>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	4a17      	ldr	r2, [pc, #92]	; (8001398 <HAL_SPI_MspInit+0x88>)
 800133c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001340:	6453      	str	r3, [r2, #68]	; 0x44
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <HAL_SPI_MspInit+0x88>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	4b11      	ldr	r3, [pc, #68]	; (8001398 <HAL_SPI_MspInit+0x88>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a10      	ldr	r2, [pc, #64]	; (8001398 <HAL_SPI_MspInit+0x88>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <HAL_SPI_MspInit+0x88>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800136a:	23e0      	movs	r3, #224	; 0xe0
 800136c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800137a:	2305      	movs	r3, #5
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4619      	mov	r1, r3
 8001384:	4805      	ldr	r0, [pc, #20]	; (800139c <HAL_SPI_MspInit+0x8c>)
 8001386:	f000 fbc7 	bl	8001b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800138a:	bf00      	nop
 800138c:	3728      	adds	r7, #40	; 0x28
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40013000 	.word	0x40013000
 8001398:	40023800 	.word	0x40023800
 800139c:	40020000 	.word	0x40020000

080013a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a26      	ldr	r2, [pc, #152]	; (8001448 <HAL_TIM_Base_MspInit+0xa8>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d10e      	bne.n	80013d0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	4b25      	ldr	r3, [pc, #148]	; (800144c <HAL_TIM_Base_MspInit+0xac>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	4a24      	ldr	r2, [pc, #144]	; (800144c <HAL_TIM_Base_MspInit+0xac>)
 80013bc:	f043 0304 	orr.w	r3, r3, #4
 80013c0:	6413      	str	r3, [r2, #64]	; 0x40
 80013c2:	4b22      	ldr	r3, [pc, #136]	; (800144c <HAL_TIM_Base_MspInit+0xac>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	f003 0304 	and.w	r3, r3, #4
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80013ce:	e036      	b.n	800143e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM6)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a1e      	ldr	r2, [pc, #120]	; (8001450 <HAL_TIM_Base_MspInit+0xb0>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d116      	bne.n	8001408 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	4b1b      	ldr	r3, [pc, #108]	; (800144c <HAL_TIM_Base_MspInit+0xac>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	4a1a      	ldr	r2, [pc, #104]	; (800144c <HAL_TIM_Base_MspInit+0xac>)
 80013e4:	f043 0310 	orr.w	r3, r3, #16
 80013e8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ea:	4b18      	ldr	r3, [pc, #96]	; (800144c <HAL_TIM_Base_MspInit+0xac>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	f003 0310 	and.w	r3, r3, #16
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	2036      	movs	r0, #54	; 0x36
 80013fc:	f000 fb55 	bl	8001aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001400:	2036      	movs	r0, #54	; 0x36
 8001402:	f000 fb6e 	bl	8001ae2 <HAL_NVIC_EnableIRQ>
}
 8001406:	e01a      	b.n	800143e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM7)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a11      	ldr	r2, [pc, #68]	; (8001454 <HAL_TIM_Base_MspInit+0xb4>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d115      	bne.n	800143e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	4b0d      	ldr	r3, [pc, #52]	; (800144c <HAL_TIM_Base_MspInit+0xac>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	4a0c      	ldr	r2, [pc, #48]	; (800144c <HAL_TIM_Base_MspInit+0xac>)
 800141c:	f043 0320 	orr.w	r3, r3, #32
 8001420:	6413      	str	r3, [r2, #64]	; 0x40
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <HAL_TIM_Base_MspInit+0xac>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f003 0320 	and.w	r3, r3, #32
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	2100      	movs	r1, #0
 8001432:	2037      	movs	r0, #55	; 0x37
 8001434:	f000 fb39 	bl	8001aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001438:	2037      	movs	r0, #55	; 0x37
 800143a:	f000 fb52 	bl	8001ae2 <HAL_NVIC_EnableIRQ>
}
 800143e:	bf00      	nop
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40000800 	.word	0x40000800
 800144c:	40023800 	.word	0x40023800
 8001450:	40001000 	.word	0x40001000
 8001454:	40001400 	.word	0x40001400

08001458 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	; 0x28
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a19      	ldr	r2, [pc, #100]	; (80014dc <HAL_UART_MspInit+0x84>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d12b      	bne.n	80014d2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <HAL_UART_MspInit+0x88>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	4a17      	ldr	r2, [pc, #92]	; (80014e0 <HAL_UART_MspInit+0x88>)
 8001484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001488:	6413      	str	r3, [r2, #64]	; 0x40
 800148a:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <HAL_UART_MspInit+0x88>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <HAL_UART_MspInit+0x88>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a10      	ldr	r2, [pc, #64]	; (80014e0 <HAL_UART_MspInit+0x88>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <HAL_UART_MspInit+0x88>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014b2:	230c      	movs	r3, #12
 80014b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ba:	2301      	movs	r3, #1
 80014bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014be:	2303      	movs	r3, #3
 80014c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014c2:	2307      	movs	r3, #7
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	4805      	ldr	r0, [pc, #20]	; (80014e4 <HAL_UART_MspInit+0x8c>)
 80014ce:	f000 fb23 	bl	8001b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014d2:	bf00      	nop
 80014d4:	3728      	adds	r7, #40	; 0x28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40004400 	.word	0x40004400
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40020000 	.word	0x40020000

080014e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014fa:	e7fe      	b.n	80014fa <HardFault_Handler+0x4>

080014fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <MemManage_Handler+0x4>

08001502 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001506:	e7fe      	b.n	8001506 <BusFault_Handler+0x4>

08001508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800150c:	e7fe      	b.n	800150c <UsageFault_Handler+0x4>

0800150e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800153c:	f000 f998 	bl	8001870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}

08001544 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001548:	4802      	ldr	r0, [pc, #8]	; (8001554 <TIM6_DAC_IRQHandler+0x10>)
 800154a:	f003 fd42 	bl	8004fd2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000324 	.word	0x20000324

08001558 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800155c:	4802      	ldr	r0, [pc, #8]	; (8001568 <TIM7_IRQHandler+0x10>)
 800155e:	f003 fd38 	bl	8004fd2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000408 	.word	0x20000408

0800156c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001570:	4802      	ldr	r0, [pc, #8]	; (800157c <OTG_FS_IRQHandler+0x10>)
 8001572:	f000 ff21 	bl	80023b8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	2000086c 	.word	0x2000086c

08001580 <stopWatch_init>:

#include "stopwatch.h"



v_error stopWatch_init(stopWatch *stopwatch, float maxCounter) {
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	ed87 0a00 	vstr	s0, [r7]
	if (maxCounter <= 0) {
 800158c:	edd7 7a00 	vldr	s15, [r7]
 8001590:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001598:	d801      	bhi.n	800159e <stopWatch_init+0x1e>
		return V_ERROR;
 800159a:	2300      	movs	r3, #0
 800159c:	e009      	b.n	80015b2 <stopWatch_init+0x32>
	} else {
		stopwatch->maxCounter = maxCounter;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	609a      	str	r2, [r3, #8]
		stopwatch->timeCounter = maxCounter;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	605a      	str	r2, [r3, #4]
		stopwatch->status = STOPWATCH_READY;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
		return V_OK;
 80015b0:	2301      	movs	r3, #1
	}
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <stopWatch_start>:

v_error stopWatch_start(stopWatch *stopwatch) {
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]

	if (stopwatch->status == STOPWATCH_READY) {
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d104      	bne.n	80015d8 <stopWatch_start+0x1a>
		stopwatch->status = STOPWATCH_RUN;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2201      	movs	r2, #1
 80015d2:	601a      	str	r2, [r3, #0]
		return V_OK;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e000      	b.n	80015da <stopWatch_start+0x1c>
	} else {
		return V_ERROR;
 80015d8:	2300      	movs	r3, #0
	}

}
 80015da:	4618      	mov	r0, r3
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <stopWatch_pause>:
		return V_ERROR;
	}

}

v_error stopWatch_pause(stopWatch *stopwatch) {
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]

	if (stopwatch->status == STOPWATCH_RUN) {
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d104      	bne.n	8001600 <stopWatch_pause+0x1a>
		stopwatch->status = STOPWATCH_PAUSE;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2203      	movs	r2, #3
 80015fa:	601a      	str	r2, [r3, #0]
		return V_OK;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e000      	b.n	8001602 <stopWatch_pause+0x1c>
	} else {
		return V_ERROR;
 8001600:	2300      	movs	r3, #0
	}

}
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <stopWatch_continue>:

v_error stopWatch_continue(stopWatch *stopwatch) {
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]

	if (stopwatch->status == STOPWATCH_PAUSE) {
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2b03      	cmp	r3, #3
 800161c:	d104      	bne.n	8001628 <stopWatch_continue+0x1a>
		stopwatch->status = STOPWATCH_RUN;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2201      	movs	r2, #1
 8001622:	601a      	str	r2, [r3, #0]
		return V_OK;
 8001624:	2301      	movs	r3, #1
 8001626:	e000      	b.n	800162a <stopWatch_continue+0x1c>
	} else {
		return V_ERROR;
 8001628:	2300      	movs	r3, #0
	}

}
 800162a:	4618      	mov	r0, r3
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <stopWatch_timeout>:

v_error stopWatch_timeout(stopWatch *stopwatch) {
 8001636:	b480      	push	{r7}
 8001638:	b083      	sub	sp, #12
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
	if (stopwatch->status == STOPWATCH_RUN) {
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d104      	bne.n	8001650 <stopWatch_timeout+0x1a>
		stopwatch->status = STOPWATCH_TIMEOUT;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2202      	movs	r2, #2
 800164a:	601a      	str	r2, [r3, #0]
		return V_OK;
 800164c:	2301      	movs	r3, #1
 800164e:	e000      	b.n	8001652 <stopWatch_timeout+0x1c>
	} else {
		return V_ERROR;
 8001650:	2300      	movs	r3, #0
	}
}
 8001652:	4618      	mov	r0, r3
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <stopWatch_halt>:

v_error stopWatch_halt(stopWatch *stopwatch) {
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]

	if (stopwatch->status == STOPWATCH_RUN || stopwatch->status == STOPWATCH_PAUSE) {
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d003      	beq.n	8001676 <stopWatch_halt+0x18>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2b03      	cmp	r3, #3
 8001674:	d104      	bne.n	8001680 <stopWatch_halt+0x22>
		stopwatch->status = STOPWATCH_HALT;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2204      	movs	r2, #4
 800167a:	601a      	str	r2, [r3, #0]
		return V_OK;
 800167c:	2301      	movs	r3, #1
 800167e:	e000      	b.n	8001682 <stopWatch_halt+0x24>
	} else {
		return V_ERROR;
 8001680:	2300      	movs	r3, #0
	}

}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <stopWatch_reset>:

v_error stopWatch_reset(stopWatch *stopwatch) {
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]

	if (stopwatch->status == STOPWATCH_TIMEOUT || stopwatch->status == STOPWATCH_HALT) {
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2b02      	cmp	r3, #2
 800169c:	d003      	beq.n	80016a6 <stopWatch_reset+0x18>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	d108      	bne.n	80016b8 <stopWatch_reset+0x2a>
		stopwatch->timeCounter = stopwatch->maxCounter;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689a      	ldr	r2, [r3, #8]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	605a      	str	r2, [r3, #4]
		stopwatch->status = STOPWATCH_READY;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
		return V_OK;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e000      	b.n	80016ba <stopWatch_reset+0x2c>
	} else {
		return V_ERROR;
 80016b8:	2300      	movs	r3, #0
	}

}
 80016ba:	4618      	mov	r0, r3
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <stopWatch_decrement>:

v_error stopWatch_decrement(stopWatch *stopwatch, float timeUnit) {
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	ed87 0a00 	vstr	s0, [r7]
	stopwatch->timeCounter -= timeUnit;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	ed93 7a01 	vldr	s14, [r3, #4]
 80016d8:	edd7 7a00 	vldr	s15, [r7]
 80016dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80016e6:	bf00      	nop
 80016e8:	4618      	mov	r0, r3
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <_sbrk+0x50>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d102      	bne.n	800170a <_sbrk+0x16>
		heap_end = &end;
 8001704:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <_sbrk+0x50>)
 8001706:	4a10      	ldr	r2, [pc, #64]	; (8001748 <_sbrk+0x54>)
 8001708:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800170a:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <_sbrk+0x50>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <_sbrk+0x50>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4413      	add	r3, r2
 8001718:	466a      	mov	r2, sp
 800171a:	4293      	cmp	r3, r2
 800171c:	d907      	bls.n	800172e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800171e:	f007 fd79 	bl	8009214 <__errno>
 8001722:	4602      	mov	r2, r0
 8001724:	230c      	movs	r3, #12
 8001726:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001728:	f04f 33ff 	mov.w	r3, #4294967295
 800172c:	e006      	b.n	800173c <_sbrk+0x48>
	}

	heap_end += incr;
 800172e:	4b05      	ldr	r3, [pc, #20]	; (8001744 <_sbrk+0x50>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	4a03      	ldr	r2, [pc, #12]	; (8001744 <_sbrk+0x50>)
 8001738:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800173a:	68fb      	ldr	r3, [r7, #12]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000230 	.word	0x20000230
 8001748:	20000b38 	.word	0x20000b38

0800174c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001750:	4b08      	ldr	r3, [pc, #32]	; (8001774 <SystemInit+0x28>)
 8001752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001756:	4a07      	ldr	r2, [pc, #28]	; (8001774 <SystemInit+0x28>)
 8001758:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800175c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001760:	4b04      	ldr	r3, [pc, #16]	; (8001774 <SystemInit+0x28>)
 8001762:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001766:	609a      	str	r2, [r3, #8]
#endif
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001778:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800177c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800177e:	e003      	b.n	8001788 <LoopCopyDataInit>

08001780 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001782:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001784:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001786:	3104      	adds	r1, #4

08001788 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001788:	480b      	ldr	r0, [pc, #44]	; (80017b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800178a:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800178c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800178e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001790:	d3f6      	bcc.n	8001780 <CopyDataInit>
  ldr  r2, =_sbss
 8001792:	4a0b      	ldr	r2, [pc, #44]	; (80017c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001794:	e002      	b.n	800179c <LoopFillZerobss>

08001796 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001796:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001798:	f842 3b04 	str.w	r3, [r2], #4

0800179c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800179c:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800179e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017a0:	d3f9      	bcc.n	8001796 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017a2:	f7ff ffd3 	bl	800174c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017a6:	f007 fd3b 	bl	8009220 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017aa:	f7ff f905 	bl	80009b8 <main>
  bx  lr    
 80017ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017b0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80017b4:	0800a048 	.word	0x0800a048
  ldr  r0, =_sdata
 80017b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80017bc:	20000208 	.word	0x20000208
  ldr  r2, =_sbss
 80017c0:	20000208 	.word	0x20000208
  ldr  r3, = _ebss
 80017c4:	20000b34 	.word	0x20000b34

080017c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017c8:	e7fe      	b.n	80017c8 <ADC_IRQHandler>
	...

080017cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017d0:	4b0e      	ldr	r3, [pc, #56]	; (800180c <HAL_Init+0x40>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a0d      	ldr	r2, [pc, #52]	; (800180c <HAL_Init+0x40>)
 80017d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017dc:	4b0b      	ldr	r3, [pc, #44]	; (800180c <HAL_Init+0x40>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a0a      	ldr	r2, [pc, #40]	; (800180c <HAL_Init+0x40>)
 80017e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <HAL_Init+0x40>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a07      	ldr	r2, [pc, #28]	; (800180c <HAL_Init+0x40>)
 80017ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f4:	2003      	movs	r0, #3
 80017f6:	f000 f94d 	bl	8001a94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017fa:	2000      	movs	r0, #0
 80017fc:	f000 f808 	bl	8001810 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001800:	f7ff fcae 	bl	8001160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40023c00 	.word	0x40023c00

08001810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_InitTick+0x54>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <HAL_InitTick+0x58>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	4619      	mov	r1, r3
 8001822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001826:	fbb3 f3f1 	udiv	r3, r3, r1
 800182a:	fbb2 f3f3 	udiv	r3, r2, r3
 800182e:	4618      	mov	r0, r3
 8001830:	f000 f965 	bl	8001afe <HAL_SYSTICK_Config>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e00e      	b.n	800185c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b0f      	cmp	r3, #15
 8001842:	d80a      	bhi.n	800185a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001844:	2200      	movs	r2, #0
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	f04f 30ff 	mov.w	r0, #4294967295
 800184c:	f000 f92d 	bl	8001aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001850:	4a06      	ldr	r2, [pc, #24]	; (800186c <HAL_InitTick+0x5c>)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	e000      	b.n	800185c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
}
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	2000000c 	.word	0x2000000c
 8001868:	20000014 	.word	0x20000014
 800186c:	20000010 	.word	0x20000010

08001870 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_IncTick+0x20>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_IncTick+0x24>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4413      	add	r3, r2
 8001880:	4a04      	ldr	r2, [pc, #16]	; (8001894 <HAL_IncTick+0x24>)
 8001882:	6013      	str	r3, [r2, #0]
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	20000014 	.word	0x20000014
 8001894:	2000049c 	.word	0x2000049c

08001898 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return uwTick;
 800189c:	4b03      	ldr	r3, [pc, #12]	; (80018ac <HAL_GetTick+0x14>)
 800189e:	681b      	ldr	r3, [r3, #0]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	2000049c 	.word	0x2000049c

080018b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b8:	f7ff ffee 	bl	8001898 <HAL_GetTick>
 80018bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c8:	d005      	beq.n	80018d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <HAL_Delay+0x40>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	461a      	mov	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4413      	add	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018d6:	bf00      	nop
 80018d8:	f7ff ffde 	bl	8001898 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d8f7      	bhi.n	80018d8 <HAL_Delay+0x28>
  {
  }
}
 80018e8:	bf00      	nop
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20000014 	.word	0x20000014

080018f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001910:	4013      	ands	r3, r2
 8001912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800191c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001926:	4a04      	ldr	r2, [pc, #16]	; (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	60d3      	str	r3, [r2, #12]
}
 800192c:	bf00      	nop
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001940:	4b04      	ldr	r3, [pc, #16]	; (8001954 <__NVIC_GetPriorityGrouping+0x18>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	f003 0307 	and.w	r3, r3, #7
}
 800194a:	4618      	mov	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	2b00      	cmp	r3, #0
 8001968:	db0b      	blt.n	8001982 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	f003 021f 	and.w	r2, r3, #31
 8001970:	4907      	ldr	r1, [pc, #28]	; (8001990 <__NVIC_EnableIRQ+0x38>)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	095b      	lsrs	r3, r3, #5
 8001978:	2001      	movs	r0, #1
 800197a:	fa00 f202 	lsl.w	r2, r0, r2
 800197e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000e100 	.word	0xe000e100

08001994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	6039      	str	r1, [r7, #0]
 800199e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	db0a      	blt.n	80019be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	490c      	ldr	r1, [pc, #48]	; (80019e0 <__NVIC_SetPriority+0x4c>)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	0112      	lsls	r2, r2, #4
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	440b      	add	r3, r1
 80019b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019bc:	e00a      	b.n	80019d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	4908      	ldr	r1, [pc, #32]	; (80019e4 <__NVIC_SetPriority+0x50>)
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	3b04      	subs	r3, #4
 80019cc:	0112      	lsls	r2, r2, #4
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	440b      	add	r3, r1
 80019d2:	761a      	strb	r2, [r3, #24]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000e100 	.word	0xe000e100
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b089      	sub	sp, #36	; 0x24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f1c3 0307 	rsb	r3, r3, #7
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	bf28      	it	cs
 8001a06:	2304      	movcs	r3, #4
 8001a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	2b06      	cmp	r3, #6
 8001a10:	d902      	bls.n	8001a18 <NVIC_EncodePriority+0x30>
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3b03      	subs	r3, #3
 8001a16:	e000      	b.n	8001a1a <NVIC_EncodePriority+0x32>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43da      	mvns	r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a30:	f04f 31ff 	mov.w	r1, #4294967295
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	43d9      	mvns	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a40:	4313      	orrs	r3, r2
         );
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3724      	adds	r7, #36	; 0x24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
	...

08001a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a60:	d301      	bcc.n	8001a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a62:	2301      	movs	r3, #1
 8001a64:	e00f      	b.n	8001a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a66:	4a0a      	ldr	r2, [pc, #40]	; (8001a90 <SysTick_Config+0x40>)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a6e:	210f      	movs	r1, #15
 8001a70:	f04f 30ff 	mov.w	r0, #4294967295
 8001a74:	f7ff ff8e 	bl	8001994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a78:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <SysTick_Config+0x40>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a7e:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <SysTick_Config+0x40>)
 8001a80:	2207      	movs	r2, #7
 8001a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	e000e010 	.word	0xe000e010

08001a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff ff29 	bl	80018f4 <__NVIC_SetPriorityGrouping>
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b086      	sub	sp, #24
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
 8001ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001abc:	f7ff ff3e 	bl	800193c <__NVIC_GetPriorityGrouping>
 8001ac0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	6978      	ldr	r0, [r7, #20]
 8001ac8:	f7ff ff8e 	bl	80019e8 <NVIC_EncodePriority>
 8001acc:	4602      	mov	r2, r0
 8001ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ff5d 	bl	8001994 <__NVIC_SetPriority>
}
 8001ada:	bf00      	nop
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	4603      	mov	r3, r0
 8001aea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff31 	bl	8001958 <__NVIC_EnableIRQ>
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff ffa2 	bl	8001a50 <SysTick_Config>
 8001b0c:	4603      	mov	r3, r0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b089      	sub	sp, #36	; 0x24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
 8001b32:	e16b      	b.n	8001e0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b34:	2201      	movs	r2, #1
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	4013      	ands	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	f040 815a 	bne.w	8001e06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d00b      	beq.n	8001b72 <HAL_GPIO_Init+0x5a>
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d007      	beq.n	8001b72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b66:	2b11      	cmp	r3, #17
 8001b68:	d003      	beq.n	8001b72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b12      	cmp	r3, #18
 8001b70:	d130      	bne.n	8001bd4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43db      	mvns	r3, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4013      	ands	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	68da      	ldr	r2, [r3, #12]
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ba8:	2201      	movs	r2, #1
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	091b      	lsrs	r3, r3, #4
 8001bbe:	f003 0201 	and.w	r2, r3, #1
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	2203      	movs	r2, #3
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d003      	beq.n	8001c14 <HAL_GPIO_Init+0xfc>
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2b12      	cmp	r3, #18
 8001c12:	d123      	bne.n	8001c5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	08da      	lsrs	r2, r3, #3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3208      	adds	r2, #8
 8001c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	220f      	movs	r2, #15
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	691a      	ldr	r2, [r3, #16]
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	08da      	lsrs	r2, r3, #3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3208      	adds	r2, #8
 8001c56:	69b9      	ldr	r1, [r7, #24]
 8001c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	2203      	movs	r2, #3
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 0203 	and.w	r2, r3, #3
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f000 80b4 	beq.w	8001e06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	4b5f      	ldr	r3, [pc, #380]	; (8001e20 <HAL_GPIO_Init+0x308>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	4a5e      	ldr	r2, [pc, #376]	; (8001e20 <HAL_GPIO_Init+0x308>)
 8001ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cac:	6453      	str	r3, [r2, #68]	; 0x44
 8001cae:	4b5c      	ldr	r3, [pc, #368]	; (8001e20 <HAL_GPIO_Init+0x308>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cba:	4a5a      	ldr	r2, [pc, #360]	; (8001e24 <HAL_GPIO_Init+0x30c>)
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	089b      	lsrs	r3, r3, #2
 8001cc0:	3302      	adds	r3, #2
 8001cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	220f      	movs	r2, #15
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a51      	ldr	r2, [pc, #324]	; (8001e28 <HAL_GPIO_Init+0x310>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d02b      	beq.n	8001d3e <HAL_GPIO_Init+0x226>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a50      	ldr	r2, [pc, #320]	; (8001e2c <HAL_GPIO_Init+0x314>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d025      	beq.n	8001d3a <HAL_GPIO_Init+0x222>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a4f      	ldr	r2, [pc, #316]	; (8001e30 <HAL_GPIO_Init+0x318>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d01f      	beq.n	8001d36 <HAL_GPIO_Init+0x21e>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a4e      	ldr	r2, [pc, #312]	; (8001e34 <HAL_GPIO_Init+0x31c>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d019      	beq.n	8001d32 <HAL_GPIO_Init+0x21a>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a4d      	ldr	r2, [pc, #308]	; (8001e38 <HAL_GPIO_Init+0x320>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d013      	beq.n	8001d2e <HAL_GPIO_Init+0x216>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a4c      	ldr	r2, [pc, #304]	; (8001e3c <HAL_GPIO_Init+0x324>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d00d      	beq.n	8001d2a <HAL_GPIO_Init+0x212>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a4b      	ldr	r2, [pc, #300]	; (8001e40 <HAL_GPIO_Init+0x328>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d007      	beq.n	8001d26 <HAL_GPIO_Init+0x20e>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a4a      	ldr	r2, [pc, #296]	; (8001e44 <HAL_GPIO_Init+0x32c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d101      	bne.n	8001d22 <HAL_GPIO_Init+0x20a>
 8001d1e:	2307      	movs	r3, #7
 8001d20:	e00e      	b.n	8001d40 <HAL_GPIO_Init+0x228>
 8001d22:	2308      	movs	r3, #8
 8001d24:	e00c      	b.n	8001d40 <HAL_GPIO_Init+0x228>
 8001d26:	2306      	movs	r3, #6
 8001d28:	e00a      	b.n	8001d40 <HAL_GPIO_Init+0x228>
 8001d2a:	2305      	movs	r3, #5
 8001d2c:	e008      	b.n	8001d40 <HAL_GPIO_Init+0x228>
 8001d2e:	2304      	movs	r3, #4
 8001d30:	e006      	b.n	8001d40 <HAL_GPIO_Init+0x228>
 8001d32:	2303      	movs	r3, #3
 8001d34:	e004      	b.n	8001d40 <HAL_GPIO_Init+0x228>
 8001d36:	2302      	movs	r3, #2
 8001d38:	e002      	b.n	8001d40 <HAL_GPIO_Init+0x228>
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e000      	b.n	8001d40 <HAL_GPIO_Init+0x228>
 8001d3e:	2300      	movs	r3, #0
 8001d40:	69fa      	ldr	r2, [r7, #28]
 8001d42:	f002 0203 	and.w	r2, r2, #3
 8001d46:	0092      	lsls	r2, r2, #2
 8001d48:	4093      	lsls	r3, r2
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d50:	4934      	ldr	r1, [pc, #208]	; (8001e24 <HAL_GPIO_Init+0x30c>)
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	089b      	lsrs	r3, r3, #2
 8001d56:	3302      	adds	r3, #2
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d5e:	4b3a      	ldr	r3, [pc, #232]	; (8001e48 <HAL_GPIO_Init+0x330>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	43db      	mvns	r3, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d82:	4a31      	ldr	r2, [pc, #196]	; (8001e48 <HAL_GPIO_Init+0x330>)
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d88:	4b2f      	ldr	r3, [pc, #188]	; (8001e48 <HAL_GPIO_Init+0x330>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	43db      	mvns	r3, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4013      	ands	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dac:	4a26      	ldr	r2, [pc, #152]	; (8001e48 <HAL_GPIO_Init+0x330>)
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001db2:	4b25      	ldr	r3, [pc, #148]	; (8001e48 <HAL_GPIO_Init+0x330>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dd6:	4a1c      	ldr	r2, [pc, #112]	; (8001e48 <HAL_GPIO_Init+0x330>)
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ddc:	4b1a      	ldr	r3, [pc, #104]	; (8001e48 <HAL_GPIO_Init+0x330>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e00:	4a11      	ldr	r2, [pc, #68]	; (8001e48 <HAL_GPIO_Init+0x330>)
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	61fb      	str	r3, [r7, #28]
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	2b0f      	cmp	r3, #15
 8001e10:	f67f ae90 	bls.w	8001b34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e14:	bf00      	nop
 8001e16:	3724      	adds	r7, #36	; 0x24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40013800 	.word	0x40013800
 8001e28:	40020000 	.word	0x40020000
 8001e2c:	40020400 	.word	0x40020400
 8001e30:	40020800 	.word	0x40020800
 8001e34:	40020c00 	.word	0x40020c00
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	40021400 	.word	0x40021400
 8001e40:	40021800 	.word	0x40021800
 8001e44:	40021c00 	.word	0x40021c00
 8001e48:	40013c00 	.word	0x40013c00

08001e4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	691a      	ldr	r2, [r3, #16]
 8001e5c:	887b      	ldrh	r3, [r7, #2]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d002      	beq.n	8001e6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e64:	2301      	movs	r3, #1
 8001e66:	73fb      	strb	r3, [r7, #15]
 8001e68:	e001      	b.n	8001e6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	807b      	strh	r3, [r7, #2]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e8c:	787b      	ldrb	r3, [r7, #1]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e92:	887a      	ldrh	r2, [r7, #2]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e98:	e003      	b.n	8001ea2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e9a:	887b      	ldrh	r3, [r7, #2]
 8001e9c:	041a      	lsls	r2, r3, #16
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	619a      	str	r2, [r3, #24]
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001eae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eb0:	b08f      	sub	sp, #60	; 0x3c
 8001eb2:	af0a      	add	r7, sp, #40	; 0x28
 8001eb4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e054      	b.n	8001f6a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d106      	bne.n	8001ee0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f006 fef0 	bl	8008cc0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d102      	bne.n	8001efa <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f004 f9dc 	bl	80062bc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	603b      	str	r3, [r7, #0]
 8001f0a:	687e      	ldr	r6, [r7, #4]
 8001f0c:	466d      	mov	r5, sp
 8001f0e:	f106 0410 	add.w	r4, r6, #16
 8001f12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f22:	1d33      	adds	r3, r6, #4
 8001f24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f26:	6838      	ldr	r0, [r7, #0]
 8001f28:	f004 f956 	bl	80061d8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2101      	movs	r1, #1
 8001f32:	4618      	mov	r0, r3
 8001f34:	f004 f9d3 	bl	80062de <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	603b      	str	r3, [r7, #0]
 8001f3e:	687e      	ldr	r6, [r7, #4]
 8001f40:	466d      	mov	r5, sp
 8001f42:	f106 0410 	add.w	r4, r6, #16
 8001f46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f52:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f56:	1d33      	adds	r3, r6, #4
 8001f58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f5a:	6838      	ldr	r0, [r7, #0]
 8001f5c:	f004 fae6 	bl	800652c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f72 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001f72:	b590      	push	{r4, r7, lr}
 8001f74:	b089      	sub	sp, #36	; 0x24
 8001f76:	af04      	add	r7, sp, #16
 8001f78:	6078      	str	r0, [r7, #4]
 8001f7a:	4608      	mov	r0, r1
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	461a      	mov	r2, r3
 8001f80:	4603      	mov	r3, r0
 8001f82:	70fb      	strb	r3, [r7, #3]
 8001f84:	460b      	mov	r3, r1
 8001f86:	70bb      	strb	r3, [r7, #2]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d101      	bne.n	8001f9a <HAL_HCD_HC_Init+0x28>
 8001f96:	2302      	movs	r3, #2
 8001f98:	e07f      	b.n	800209a <HAL_HCD_HC_Init+0x128>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001fa2:	78fa      	ldrb	r2, [r7, #3]
 8001fa4:	6879      	ldr	r1, [r7, #4]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	440b      	add	r3, r1
 8001fb0:	333d      	adds	r3, #61	; 0x3d
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001fb6:	78fa      	ldrb	r2, [r7, #3]
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	440b      	add	r3, r1
 8001fc4:	3338      	adds	r3, #56	; 0x38
 8001fc6:	787a      	ldrb	r2, [r7, #1]
 8001fc8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001fca:	78fa      	ldrb	r2, [r7, #3]
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	440b      	add	r3, r1
 8001fd8:	3340      	adds	r3, #64	; 0x40
 8001fda:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001fdc:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001fde:	78fa      	ldrb	r2, [r7, #3]
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	440b      	add	r3, r1
 8001fec:	3339      	adds	r3, #57	; 0x39
 8001fee:	78fa      	ldrb	r2, [r7, #3]
 8001ff0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001ff2:	78fa      	ldrb	r2, [r7, #3]
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	440b      	add	r3, r1
 8002000:	333f      	adds	r3, #63	; 0x3f
 8002002:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002006:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002008:	78fa      	ldrb	r2, [r7, #3]
 800200a:	78bb      	ldrb	r3, [r7, #2]
 800200c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002010:	b2d8      	uxtb	r0, r3
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	440b      	add	r3, r1
 800201e:	333a      	adds	r3, #58	; 0x3a
 8002020:	4602      	mov	r2, r0
 8002022:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002024:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002028:	2b00      	cmp	r3, #0
 800202a:	da0a      	bge.n	8002042 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800202c:	78fa      	ldrb	r2, [r7, #3]
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	4613      	mov	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	440b      	add	r3, r1
 800203a:	333b      	adds	r3, #59	; 0x3b
 800203c:	2201      	movs	r2, #1
 800203e:	701a      	strb	r2, [r3, #0]
 8002040:	e009      	b.n	8002056 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002042:	78fa      	ldrb	r2, [r7, #3]
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	440b      	add	r3, r1
 8002050:	333b      	adds	r3, #59	; 0x3b
 8002052:	2200      	movs	r2, #0
 8002054:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002056:	78fa      	ldrb	r2, [r7, #3]
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	440b      	add	r3, r1
 8002064:	333c      	adds	r3, #60	; 0x3c
 8002066:	f897 2020 	ldrb.w	r2, [r7, #32]
 800206a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6818      	ldr	r0, [r3, #0]
 8002070:	787c      	ldrb	r4, [r7, #1]
 8002072:	78ba      	ldrb	r2, [r7, #2]
 8002074:	78f9      	ldrb	r1, [r7, #3]
 8002076:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002078:	9302      	str	r3, [sp, #8]
 800207a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800207e:	9301      	str	r3, [sp, #4]
 8002080:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	4623      	mov	r3, r4
 8002088:	f004 fbd2 	bl	8006830 <USB_HC_Init>
 800208c:	4603      	mov	r3, r0
 800208e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002098:	7bfb      	ldrb	r3, [r7, #15]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd90      	pop	{r4, r7, pc}

080020a2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b084      	sub	sp, #16
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	460b      	mov	r3, r1
 80020ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80020ae:	2300      	movs	r3, #0
 80020b0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d101      	bne.n	80020c0 <HAL_HCD_HC_Halt+0x1e>
 80020bc:	2302      	movs	r3, #2
 80020be:	e00f      	b.n	80020e0 <HAL_HCD_HC_Halt+0x3e>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	78fa      	ldrb	r2, [r7, #3]
 80020ce:	4611      	mov	r1, r2
 80020d0:	4618      	mov	r0, r3
 80020d2:	f004 fe0c 	bl	8006cee <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80020de:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	4608      	mov	r0, r1
 80020f2:	4611      	mov	r1, r2
 80020f4:	461a      	mov	r2, r3
 80020f6:	4603      	mov	r3, r0
 80020f8:	70fb      	strb	r3, [r7, #3]
 80020fa:	460b      	mov	r3, r1
 80020fc:	70bb      	strb	r3, [r7, #2]
 80020fe:	4613      	mov	r3, r2
 8002100:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8002102:	78fa      	ldrb	r2, [r7, #3]
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	440b      	add	r3, r1
 8002110:	333b      	adds	r3, #59	; 0x3b
 8002112:	78ba      	ldrb	r2, [r7, #2]
 8002114:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002116:	78fa      	ldrb	r2, [r7, #3]
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	440b      	add	r3, r1
 8002124:	333f      	adds	r3, #63	; 0x3f
 8002126:	787a      	ldrb	r2, [r7, #1]
 8002128:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800212a:	7c3b      	ldrb	r3, [r7, #16]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d10a      	bne.n	8002146 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002130:	78fa      	ldrb	r2, [r7, #3]
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	4613      	mov	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	440b      	add	r3, r1
 800213e:	3342      	adds	r3, #66	; 0x42
 8002140:	2203      	movs	r2, #3
 8002142:	701a      	strb	r2, [r3, #0]
 8002144:	e009      	b.n	800215a <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002146:	78fa      	ldrb	r2, [r7, #3]
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	440b      	add	r3, r1
 8002154:	3342      	adds	r3, #66	; 0x42
 8002156:	2202      	movs	r2, #2
 8002158:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800215a:	787b      	ldrb	r3, [r7, #1]
 800215c:	2b03      	cmp	r3, #3
 800215e:	f200 80d6 	bhi.w	800230e <HAL_HCD_HC_SubmitRequest+0x226>
 8002162:	a201      	add	r2, pc, #4	; (adr r2, 8002168 <HAL_HCD_HC_SubmitRequest+0x80>)
 8002164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002168:	08002179 	.word	0x08002179
 800216c:	080022f9 	.word	0x080022f9
 8002170:	080021e5 	.word	0x080021e5
 8002174:	0800226f 	.word	0x0800226f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002178:	7c3b      	ldrb	r3, [r7, #16]
 800217a:	2b01      	cmp	r3, #1
 800217c:	f040 80c9 	bne.w	8002312 <HAL_HCD_HC_SubmitRequest+0x22a>
 8002180:	78bb      	ldrb	r3, [r7, #2]
 8002182:	2b00      	cmp	r3, #0
 8002184:	f040 80c5 	bne.w	8002312 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8002188:	8b3b      	ldrh	r3, [r7, #24]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d109      	bne.n	80021a2 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800218e:	78fa      	ldrb	r2, [r7, #3]
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	440b      	add	r3, r1
 800219c:	3351      	adds	r3, #81	; 0x51
 800219e:	2201      	movs	r2, #1
 80021a0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80021a2:	78fa      	ldrb	r2, [r7, #3]
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	440b      	add	r3, r1
 80021b0:	3351      	adds	r3, #81	; 0x51
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d10a      	bne.n	80021ce <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021b8:	78fa      	ldrb	r2, [r7, #3]
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	440b      	add	r3, r1
 80021c6:	3342      	adds	r3, #66	; 0x42
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80021cc:	e0a1      	b.n	8002312 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021ce:	78fa      	ldrb	r2, [r7, #3]
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	440b      	add	r3, r1
 80021dc:	3342      	adds	r3, #66	; 0x42
 80021de:	2202      	movs	r2, #2
 80021e0:	701a      	strb	r2, [r3, #0]
      break;
 80021e2:	e096      	b.n	8002312 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80021e4:	78bb      	ldrb	r3, [r7, #2]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d120      	bne.n	800222c <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80021ea:	78fa      	ldrb	r2, [r7, #3]
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	440b      	add	r3, r1
 80021f8:	3351      	adds	r3, #81	; 0x51
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10a      	bne.n	8002216 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002200:	78fa      	ldrb	r2, [r7, #3]
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	440b      	add	r3, r1
 800220e:	3342      	adds	r3, #66	; 0x42
 8002210:	2200      	movs	r2, #0
 8002212:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002214:	e07e      	b.n	8002314 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002216:	78fa      	ldrb	r2, [r7, #3]
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	4613      	mov	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	440b      	add	r3, r1
 8002224:	3342      	adds	r3, #66	; 0x42
 8002226:	2202      	movs	r2, #2
 8002228:	701a      	strb	r2, [r3, #0]
      break;
 800222a:	e073      	b.n	8002314 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800222c:	78fa      	ldrb	r2, [r7, #3]
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	440b      	add	r3, r1
 800223a:	3350      	adds	r3, #80	; 0x50
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10a      	bne.n	8002258 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002242:	78fa      	ldrb	r2, [r7, #3]
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	440b      	add	r3, r1
 8002250:	3342      	adds	r3, #66	; 0x42
 8002252:	2200      	movs	r2, #0
 8002254:	701a      	strb	r2, [r3, #0]
      break;
 8002256:	e05d      	b.n	8002314 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002258:	78fa      	ldrb	r2, [r7, #3]
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	440b      	add	r3, r1
 8002266:	3342      	adds	r3, #66	; 0x42
 8002268:	2202      	movs	r2, #2
 800226a:	701a      	strb	r2, [r3, #0]
      break;
 800226c:	e052      	b.n	8002314 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800226e:	78bb      	ldrb	r3, [r7, #2]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d120      	bne.n	80022b6 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002274:	78fa      	ldrb	r2, [r7, #3]
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	4613      	mov	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	440b      	add	r3, r1
 8002282:	3351      	adds	r3, #81	; 0x51
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10a      	bne.n	80022a0 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800228a:	78fa      	ldrb	r2, [r7, #3]
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	440b      	add	r3, r1
 8002298:	3342      	adds	r3, #66	; 0x42
 800229a:	2200      	movs	r2, #0
 800229c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800229e:	e039      	b.n	8002314 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022a0:	78fa      	ldrb	r2, [r7, #3]
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	440b      	add	r3, r1
 80022ae:	3342      	adds	r3, #66	; 0x42
 80022b0:	2202      	movs	r2, #2
 80022b2:	701a      	strb	r2, [r3, #0]
      break;
 80022b4:	e02e      	b.n	8002314 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80022b6:	78fa      	ldrb	r2, [r7, #3]
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	440b      	add	r3, r1
 80022c4:	3350      	adds	r3, #80	; 0x50
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10a      	bne.n	80022e2 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022cc:	78fa      	ldrb	r2, [r7, #3]
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	4613      	mov	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	440b      	add	r3, r1
 80022da:	3342      	adds	r3, #66	; 0x42
 80022dc:	2200      	movs	r2, #0
 80022de:	701a      	strb	r2, [r3, #0]
      break;
 80022e0:	e018      	b.n	8002314 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022e2:	78fa      	ldrb	r2, [r7, #3]
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	440b      	add	r3, r1
 80022f0:	3342      	adds	r3, #66	; 0x42
 80022f2:	2202      	movs	r2, #2
 80022f4:	701a      	strb	r2, [r3, #0]
      break;
 80022f6:	e00d      	b.n	8002314 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022f8:	78fa      	ldrb	r2, [r7, #3]
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	4613      	mov	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	440b      	add	r3, r1
 8002306:	3342      	adds	r3, #66	; 0x42
 8002308:	2200      	movs	r2, #0
 800230a:	701a      	strb	r2, [r3, #0]
      break;
 800230c:	e002      	b.n	8002314 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 800230e:	bf00      	nop
 8002310:	e000      	b.n	8002314 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8002312:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002314:	78fa      	ldrb	r2, [r7, #3]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	440b      	add	r3, r1
 8002322:	3344      	adds	r3, #68	; 0x44
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002328:	78fa      	ldrb	r2, [r7, #3]
 800232a:	8b39      	ldrh	r1, [r7, #24]
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	4403      	add	r3, r0
 8002338:	3348      	adds	r3, #72	; 0x48
 800233a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800233c:	78fa      	ldrb	r2, [r7, #3]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	440b      	add	r3, r1
 800234a:	335c      	adds	r3, #92	; 0x5c
 800234c:	2200      	movs	r2, #0
 800234e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002350:	78fa      	ldrb	r2, [r7, #3]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4613      	mov	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	440b      	add	r3, r1
 800235e:	334c      	adds	r3, #76	; 0x4c
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002364:	78fa      	ldrb	r2, [r7, #3]
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	4613      	mov	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	440b      	add	r3, r1
 8002372:	3339      	adds	r3, #57	; 0x39
 8002374:	78fa      	ldrb	r2, [r7, #3]
 8002376:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002378:	78fa      	ldrb	r2, [r7, #3]
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	440b      	add	r3, r1
 8002386:	335d      	adds	r3, #93	; 0x5d
 8002388:	2200      	movs	r2, #0
 800238a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6818      	ldr	r0, [r3, #0]
 8002390:	78fa      	ldrb	r2, [r7, #3]
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	3338      	adds	r3, #56	; 0x38
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	18d1      	adds	r1, r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	461a      	mov	r2, r3
 80023a8:	f004 fb4c 	bl	8006a44 <USB_HC_StartXfer>
 80023ac:	4603      	mov	r3, r0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop

080023b8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f004 f869 	bl	80064a6 <USB_GetMode>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	f040 80f1 	bne.w	80025be <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f004 f84d 	bl	8006480 <USB_ReadInterrupts>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 80e7 	beq.w	80025bc <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f004 f844 	bl	8006480 <USB_ReadInterrupts>
 80023f8:	4603      	mov	r3, r0
 80023fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002402:	d104      	bne.n	800240e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800240c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f004 f834 	bl	8006480 <USB_ReadInterrupts>
 8002418:	4603      	mov	r3, r0
 800241a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800241e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002422:	d104      	bne.n	800242e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800242c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f004 f824 	bl	8006480 <USB_ReadInterrupts>
 8002438:	4603      	mov	r3, r0
 800243a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800243e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002442:	d104      	bne.n	800244e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800244c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f004 f814 	bl	8006480 <USB_ReadInterrupts>
 8002458:	4603      	mov	r3, r0
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b02      	cmp	r3, #2
 8002460:	d103      	bne.n	800246a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2202      	movs	r2, #2
 8002468:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f004 f806 	bl	8006480 <USB_ReadInterrupts>
 8002474:	4603      	mov	r3, r0
 8002476:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800247a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800247e:	d117      	bne.n	80024b0 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800248e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002492:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f006 fc91 	bl	8008dbc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2101      	movs	r1, #1
 80024a0:	4618      	mov	r0, r3
 80024a2:	f004 f8ff 	bl	80066a4 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80024ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f003 ffe3 	bl	8006480 <USB_ReadInterrupts>
 80024ba:	4603      	mov	r3, r0
 80024bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024c4:	d102      	bne.n	80024cc <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f001 f8c8 	bl	800365c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f003 ffd5 	bl	8006480 <USB_ReadInterrupts>
 80024d6:	4603      	mov	r3, r0
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d106      	bne.n	80024ee <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f006 fc4f 	bl	8008d84 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2208      	movs	r2, #8
 80024ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f003 ffc4 	bl	8006480 <USB_ReadInterrupts>
 80024f8:	4603      	mov	r3, r0
 80024fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002502:	d138      	bne.n	8002576 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f004 fbdf 	bl	8006ccc <USB_HC_ReadInterrupt>
 800250e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]
 8002514:	e025      	b.n	8002562 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f003 030f 	and.w	r3, r3, #15
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	fa22 f303 	lsr.w	r3, r2, r3
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d018      	beq.n	800255c <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	015a      	lsls	r2, r3, #5
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	4413      	add	r3, r2
 8002532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800253c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002540:	d106      	bne.n	8002550 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	4619      	mov	r1, r3
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 f8cf 	bl	80026ec <HCD_HC_IN_IRQHandler>
 800254e:	e005      	b.n	800255c <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	b2db      	uxtb	r3, r3
 8002554:	4619      	mov	r1, r3
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 fc5f 	bl	8002e1a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	3301      	adds	r3, #1
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	429a      	cmp	r2, r3
 800256a:	d3d4      	bcc.n	8002516 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002574:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f003 ff80 	bl	8006480 <USB_ReadInterrupts>
 8002580:	4603      	mov	r3, r0
 8002582:	f003 0310 	and.w	r3, r3, #16
 8002586:	2b10      	cmp	r3, #16
 8002588:	d101      	bne.n	800258e <HAL_HCD_IRQHandler+0x1d6>
 800258a:	2301      	movs	r3, #1
 800258c:	e000      	b.n	8002590 <HAL_HCD_IRQHandler+0x1d8>
 800258e:	2300      	movs	r3, #0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d014      	beq.n	80025be <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	699a      	ldr	r2, [r3, #24]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0210 	bic.w	r2, r2, #16
 80025a2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 ffad 	bl	8003504 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	699a      	ldr	r2, [r3, #24]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f042 0210 	orr.w	r2, r2, #16
 80025b8:	619a      	str	r2, [r3, #24]
 80025ba:	e000      	b.n	80025be <HAL_HCD_IRQHandler+0x206>
      return;
 80025bc:	bf00      	nop
    }
  }
}
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <HAL_HCD_Start+0x16>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e013      	b.n	8002602 <HAL_HCD_Start+0x3e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f003 fe57 	bl	800629a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2101      	movs	r1, #1
 80025f2:	4618      	mov	r0, r3
 80025f4:	f004 f8ba 	bl	800676c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_HCD_Stop+0x16>
 800261c:	2302      	movs	r3, #2
 800261e:	e00d      	b.n	800263c <HAL_HCD_Stop+0x32>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	f004 fc99 	bl	8006f64 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f004 f861 	bl	8006718 <USB_ResetPort>
 8002656:	4603      	mov	r3, r0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800266c:	78fa      	ldrb	r2, [r7, #3]
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	440b      	add	r3, r1
 800267a:	335c      	adds	r3, #92	; 0x5c
 800267c:	781b      	ldrb	r3, [r3, #0]
}
 800267e:	4618      	mov	r0, r3
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
 8002692:	460b      	mov	r3, r1
 8002694:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002696:	78fa      	ldrb	r2, [r7, #3]
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4413      	add	r3, r2
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	440b      	add	r3, r1
 80026a4:	334c      	adds	r3, #76	; 0x4c
 80026a6:	681b      	ldr	r3, [r3, #0]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f004 f8a3 	bl	800680c <USB_GetCurrentFrame>
 80026c6:	4603      	mov	r3, r0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f004 f87e 	bl	80067de <USB_GetHostSpeed>
 80026e2:	4603      	mov	r3, r0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	460b      	mov	r3, r1
 80026f6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002702:	78fb      	ldrb	r3, [r7, #3]
 8002704:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	015a      	lsls	r2, r3, #5
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	4413      	add	r3, r2
 800270e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b04      	cmp	r3, #4
 800271a:	d119      	bne.n	8002750 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	015a      	lsls	r2, r3, #5
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4413      	add	r3, r2
 8002724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002728:	461a      	mov	r2, r3
 800272a:	2304      	movs	r3, #4
 800272c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	015a      	lsls	r2, r3, #5
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	4413      	add	r3, r2
 8002736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	0151      	lsls	r1, r2, #5
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	440a      	add	r2, r1
 8002744:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002748:	f043 0302 	orr.w	r3, r3, #2
 800274c:	60d3      	str	r3, [r2, #12]
 800274e:	e095      	b.n	800287c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	4413      	add	r3, r2
 8002758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 0320 	and.w	r3, r3, #32
 8002762:	2b20      	cmp	r3, #32
 8002764:	d109      	bne.n	800277a <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	015a      	lsls	r2, r3, #5
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4413      	add	r3, r2
 800276e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002772:	461a      	mov	r2, r3
 8002774:	2320      	movs	r3, #32
 8002776:	6093      	str	r3, [r2, #8]
 8002778:	e080      	b.n	800287c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	015a      	lsls	r2, r3, #5
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	4413      	add	r3, r2
 8002782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 0308 	and.w	r3, r3, #8
 800278c:	2b08      	cmp	r3, #8
 800278e:	d134      	bne.n	80027fa <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	015a      	lsls	r2, r3, #5
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4413      	add	r3, r2
 8002798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	0151      	lsls	r1, r2, #5
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	440a      	add	r2, r1
 80027a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027aa:	f043 0302 	orr.w	r3, r3, #2
 80027ae:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80027b0:	6879      	ldr	r1, [r7, #4]
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	4613      	mov	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	440b      	add	r3, r1
 80027be:	335d      	adds	r3, #93	; 0x5d
 80027c0:	2205      	movs	r2, #5
 80027c2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	015a      	lsls	r2, r3, #5
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	4413      	add	r3, r2
 80027cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d0:	461a      	mov	r2, r3
 80027d2:	2310      	movs	r3, #16
 80027d4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	015a      	lsls	r2, r3, #5
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	4413      	add	r3, r2
 80027de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e2:	461a      	mov	r2, r3
 80027e4:	2308      	movs	r3, #8
 80027e6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	4611      	mov	r1, r2
 80027f2:	4618      	mov	r0, r3
 80027f4:	f004 fa7b 	bl	8006cee <USB_HC_Halt>
 80027f8:	e040      	b.n	800287c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	015a      	lsls	r2, r3, #5
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4413      	add	r3, r2
 8002802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800280c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002810:	d134      	bne.n	800287c <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	015a      	lsls	r2, r3, #5
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	4413      	add	r3, r2
 800281a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	0151      	lsls	r1, r2, #5
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	440a      	add	r2, r1
 8002828:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800282c:	f043 0302 	orr.w	r3, r3, #2
 8002830:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	4611      	mov	r1, r2
 800283c:	4618      	mov	r0, r3
 800283e:	f004 fa56 	bl	8006cee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	015a      	lsls	r2, r3, #5
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	4413      	add	r3, r2
 800284a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284e:	461a      	mov	r2, r3
 8002850:	2310      	movs	r3, #16
 8002852:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	4613      	mov	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	440b      	add	r3, r1
 8002862:	335d      	adds	r3, #93	; 0x5d
 8002864:	2208      	movs	r2, #8
 8002866:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	015a      	lsls	r2, r3, #5
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	4413      	add	r3, r2
 8002870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002874:	461a      	mov	r2, r3
 8002876:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800287a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	015a      	lsls	r2, r3, #5
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	4413      	add	r3, r2
 8002884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800288e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002892:	d122      	bne.n	80028da <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	015a      	lsls	r2, r3, #5
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	4413      	add	r3, r2
 800289c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	0151      	lsls	r1, r2, #5
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	440a      	add	r2, r1
 80028aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028ae:	f043 0302 	orr.w	r3, r3, #2
 80028b2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	4611      	mov	r1, r2
 80028be:	4618      	mov	r0, r3
 80028c0:	f004 fa15 	bl	8006cee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	015a      	lsls	r2, r3, #5
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	4413      	add	r3, r2
 80028cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d0:	461a      	mov	r2, r3
 80028d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028d6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80028d8:	e29b      	b.n	8002e12 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	015a      	lsls	r2, r3, #5
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	4413      	add	r3, r2
 80028e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	f040 80c1 	bne.w	8002a74 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d01b      	beq.n	8002932 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	4613      	mov	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4413      	add	r3, r2
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	440b      	add	r3, r1
 8002908:	3348      	adds	r3, #72	; 0x48
 800290a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	0159      	lsls	r1, r3, #5
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	440b      	add	r3, r1
 8002914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800291e:	1ad1      	subs	r1, r2, r3
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	4613      	mov	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	4403      	add	r3, r0
 800292e:	334c      	adds	r3, #76	; 0x4c
 8002930:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	4613      	mov	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	440b      	add	r3, r1
 8002940:	335d      	adds	r3, #93	; 0x5d
 8002942:	2201      	movs	r2, #1
 8002944:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	440b      	add	r3, r1
 8002954:	3358      	adds	r3, #88	; 0x58
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	015a      	lsls	r2, r3, #5
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	4413      	add	r3, r2
 8002962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002966:	461a      	mov	r2, r3
 8002968:	2301      	movs	r3, #1
 800296a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	440b      	add	r3, r1
 800297a:	333f      	adds	r3, #63	; 0x3f
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00a      	beq.n	8002998 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	440b      	add	r3, r1
 8002990:	333f      	adds	r3, #63	; 0x3f
 8002992:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002994:	2b02      	cmp	r3, #2
 8002996:	d121      	bne.n	80029dc <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	015a      	lsls	r2, r3, #5
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	0151      	lsls	r1, r2, #5
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	440a      	add	r2, r1
 80029ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029b2:	f043 0302 	orr.w	r3, r3, #2
 80029b6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	4611      	mov	r1, r2
 80029c2:	4618      	mov	r0, r3
 80029c4:	f004 f993 	bl	8006cee <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	015a      	lsls	r2, r3, #5
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4413      	add	r3, r2
 80029d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d4:	461a      	mov	r2, r3
 80029d6:	2310      	movs	r3, #16
 80029d8:	6093      	str	r3, [r2, #8]
 80029da:	e034      	b.n	8002a46 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	4613      	mov	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	440b      	add	r3, r1
 80029ea:	333f      	adds	r3, #63	; 0x3f
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b03      	cmp	r3, #3
 80029f0:	d129      	bne.n	8002a46 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	015a      	lsls	r2, r3, #5
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	4413      	add	r3, r2
 80029fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	0151      	lsls	r1, r2, #5
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	440a      	add	r2, r1
 8002a08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002a10:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	4613      	mov	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	440b      	add	r3, r1
 8002a20:	335c      	adds	r3, #92	; 0x5c
 8002a22:	2201      	movs	r2, #1
 8002a24:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	b2d8      	uxtb	r0, r3
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	440b      	add	r3, r1
 8002a38:	335c      	adds	r3, #92	; 0x5c
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4601      	mov	r1, r0
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f006 f9c9 	bl	8008dd8 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	440b      	add	r3, r1
 8002a54:	3350      	adds	r3, #80	; 0x50
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	f083 0301 	eor.w	r3, r3, #1
 8002a5c:	b2d8      	uxtb	r0, r3
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	440b      	add	r3, r1
 8002a6c:	3350      	adds	r3, #80	; 0x50
 8002a6e:	4602      	mov	r2, r0
 8002a70:	701a      	strb	r2, [r3, #0]
}
 8002a72:	e1ce      	b.n	8002e12 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	f040 80f1 	bne.w	8002c6e <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	015a      	lsls	r2, r3, #5
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	0151      	lsls	r1, r2, #5
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	440a      	add	r2, r1
 8002aa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002aa6:	f023 0302 	bic.w	r3, r3, #2
 8002aaa:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	440b      	add	r3, r1
 8002aba:	335d      	adds	r3, #93	; 0x5d
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d10a      	bne.n	8002ad8 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	440b      	add	r3, r1
 8002ad0:	335c      	adds	r3, #92	; 0x5c
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	701a      	strb	r2, [r3, #0]
 8002ad6:	e0b0      	b.n	8002c3a <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	440b      	add	r3, r1
 8002ae6:	335d      	adds	r3, #93	; 0x5d
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b05      	cmp	r3, #5
 8002aec:	d10a      	bne.n	8002b04 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	440b      	add	r3, r1
 8002afc:	335c      	adds	r3, #92	; 0x5c
 8002afe:	2205      	movs	r2, #5
 8002b00:	701a      	strb	r2, [r3, #0]
 8002b02:	e09a      	b.n	8002c3a <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4413      	add	r3, r2
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	440b      	add	r3, r1
 8002b12:	335d      	adds	r3, #93	; 0x5d
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2b06      	cmp	r3, #6
 8002b18:	d00a      	beq.n	8002b30 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	440b      	add	r3, r1
 8002b28:	335d      	adds	r3, #93	; 0x5d
 8002b2a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d156      	bne.n	8002bde <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	440b      	add	r3, r1
 8002b3e:	3358      	adds	r3, #88	; 0x58
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	1c59      	adds	r1, r3, #1
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	4403      	add	r3, r0
 8002b52:	3358      	adds	r3, #88	; 0x58
 8002b54:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	440b      	add	r3, r1
 8002b64:	3358      	adds	r3, #88	; 0x58
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	d914      	bls.n	8002b96 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	440b      	add	r3, r1
 8002b7a:	3358      	adds	r3, #88	; 0x58
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	4613      	mov	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	440b      	add	r3, r1
 8002b8e:	335c      	adds	r3, #92	; 0x5c
 8002b90:	2204      	movs	r2, #4
 8002b92:	701a      	strb	r2, [r3, #0]
 8002b94:	e009      	b.n	8002baa <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	440b      	add	r3, r1
 8002ba4:	335c      	adds	r3, #92	; 0x5c
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	015a      	lsls	r2, r3, #5
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bc0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bc8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	015a      	lsls	r2, r3, #5
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	6013      	str	r3, [r2, #0]
 8002bdc:	e02d      	b.n	8002c3a <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	4613      	mov	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	440b      	add	r3, r1
 8002bec:	335d      	adds	r3, #93	; 0x5d
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b03      	cmp	r3, #3
 8002bf2:	d122      	bne.n	8002c3a <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	440b      	add	r3, r1
 8002c02:	335c      	adds	r3, #92	; 0x5c
 8002c04:	2202      	movs	r2, #2
 8002c06:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	015a      	lsls	r2, r3, #5
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	4413      	add	r3, r2
 8002c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c1e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c26:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	015a      	lsls	r2, r3, #5
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4413      	add	r3, r2
 8002c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c34:	461a      	mov	r2, r3
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	015a      	lsls	r2, r3, #5
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	4413      	add	r3, r2
 8002c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c46:	461a      	mov	r2, r3
 8002c48:	2302      	movs	r3, #2
 8002c4a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	b2d8      	uxtb	r0, r3
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	4613      	mov	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	440b      	add	r3, r1
 8002c5e:	335c      	adds	r3, #92	; 0x5c
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	461a      	mov	r2, r3
 8002c64:	4601      	mov	r1, r0
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f006 f8b6 	bl	8008dd8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c6c:	e0d1      	b.n	8002e12 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	015a      	lsls	r2, r3, #5
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4413      	add	r3, r2
 8002c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c80:	2b80      	cmp	r3, #128	; 0x80
 8002c82:	d13e      	bne.n	8002d02 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	015a      	lsls	r2, r3, #5
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	0151      	lsls	r1, r2, #5
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	440a      	add	r2, r1
 8002c9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c9e:	f043 0302 	orr.w	r3, r3, #2
 8002ca2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	440b      	add	r3, r1
 8002cb2:	3358      	adds	r3, #88	; 0x58
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	1c59      	adds	r1, r3, #1
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	4403      	add	r3, r0
 8002cc6:	3358      	adds	r3, #88	; 0x58
 8002cc8:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	440b      	add	r3, r1
 8002cd8:	335d      	adds	r3, #93	; 0x5d
 8002cda:	2206      	movs	r2, #6
 8002cdc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f004 f800 	bl	8006cee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	015a      	lsls	r2, r3, #5
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	2380      	movs	r3, #128	; 0x80
 8002cfe:	6093      	str	r3, [r2, #8]
}
 8002d00:	e087      	b.n	8002e12 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	015a      	lsls	r2, r3, #5
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	4413      	add	r3, r2
 8002d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 0310 	and.w	r3, r3, #16
 8002d14:	2b10      	cmp	r3, #16
 8002d16:	d17c      	bne.n	8002e12 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	440b      	add	r3, r1
 8002d26:	333f      	adds	r3, #63	; 0x3f
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2b03      	cmp	r3, #3
 8002d2c:	d122      	bne.n	8002d74 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4613      	mov	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	440b      	add	r3, r1
 8002d3c:	3358      	adds	r3, #88	; 0x58
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	015a      	lsls	r2, r3, #5
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	4413      	add	r3, r2
 8002d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	0151      	lsls	r1, r2, #5
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	440a      	add	r2, r1
 8002d58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d5c:	f043 0302 	orr.w	r3, r3, #2
 8002d60:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	4611      	mov	r1, r2
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f003 ffbe 	bl	8006cee <USB_HC_Halt>
 8002d72:	e045      	b.n	8002e00 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	440b      	add	r3, r1
 8002d82:	333f      	adds	r3, #63	; 0x3f
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00a      	beq.n	8002da0 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	440b      	add	r3, r1
 8002d98:	333f      	adds	r3, #63	; 0x3f
 8002d9a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d12f      	bne.n	8002e00 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	4613      	mov	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	440b      	add	r3, r1
 8002dae:	3358      	adds	r3, #88	; 0x58
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d121      	bne.n	8002e00 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	440b      	add	r3, r1
 8002dca:	335d      	adds	r3, #93	; 0x5d
 8002dcc:	2203      	movs	r2, #3
 8002dce:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	015a      	lsls	r2, r3, #5
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	0151      	lsls	r1, r2, #5
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	440a      	add	r2, r1
 8002de6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dea:	f043 0302 	orr.w	r3, r3, #2
 8002dee:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	4611      	mov	r1, r2
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f003 ff77 	bl	8006cee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	015a      	lsls	r2, r3, #5
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	4413      	add	r3, r2
 8002e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	2310      	movs	r3, #16
 8002e10:	6093      	str	r3, [r2, #8]
}
 8002e12:	bf00      	nop
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b086      	sub	sp, #24
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	460b      	mov	r3, r1
 8002e24:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002e30:	78fb      	ldrb	r3, [r7, #3]
 8002e32:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d119      	bne.n	8002e7e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	015a      	lsls	r2, r3, #5
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	4413      	add	r3, r2
 8002e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e56:	461a      	mov	r2, r3
 8002e58:	2304      	movs	r3, #4
 8002e5a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	015a      	lsls	r2, r3, #5
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	4413      	add	r3, r2
 8002e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	0151      	lsls	r1, r2, #5
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	440a      	add	r2, r1
 8002e72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e76:	f043 0302 	orr.w	r3, r3, #2
 8002e7a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002e7c:	e33e      	b.n	80034fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	015a      	lsls	r2, r3, #5
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	4413      	add	r3, r2
 8002e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 0320 	and.w	r3, r3, #32
 8002e90:	2b20      	cmp	r3, #32
 8002e92:	d141      	bne.n	8002f18 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	015a      	lsls	r2, r3, #5
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	2320      	movs	r3, #32
 8002ea4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	440b      	add	r3, r1
 8002eb4:	333d      	adds	r3, #61	; 0x3d
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	f040 831f 	bne.w	80034fc <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	440b      	add	r3, r1
 8002ecc:	333d      	adds	r3, #61	; 0x3d
 8002ece:	2200      	movs	r2, #0
 8002ed0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	440b      	add	r3, r1
 8002ee0:	335c      	adds	r3, #92	; 0x5c
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	015a      	lsls	r2, r3, #5
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	4413      	add	r3, r2
 8002eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	0151      	lsls	r1, r2, #5
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	440a      	add	r2, r1
 8002efc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f00:	f043 0302 	orr.w	r3, r3, #2
 8002f04:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	b2d2      	uxtb	r2, r2
 8002f0e:	4611      	mov	r1, r2
 8002f10:	4618      	mov	r0, r3
 8002f12:	f003 feec 	bl	8006cee <USB_HC_Halt>
}
 8002f16:	e2f1      	b.n	80034fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	015a      	lsls	r2, r3, #5
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2a:	2b40      	cmp	r3, #64	; 0x40
 8002f2c:	d13f      	bne.n	8002fae <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	4613      	mov	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	440b      	add	r3, r1
 8002f3c:	335d      	adds	r3, #93	; 0x5d
 8002f3e:	2204      	movs	r2, #4
 8002f40:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	4613      	mov	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	440b      	add	r3, r1
 8002f50:	333d      	adds	r3, #61	; 0x3d
 8002f52:	2201      	movs	r2, #1
 8002f54:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	440b      	add	r3, r1
 8002f64:	3358      	adds	r3, #88	; 0x58
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	0151      	lsls	r1, r2, #5
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	440a      	add	r2, r1
 8002f80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f84:	f043 0302 	orr.w	r3, r3, #2
 8002f88:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	4611      	mov	r1, r2
 8002f94:	4618      	mov	r0, r3
 8002f96:	f003 feaa 	bl	8006cee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	015a      	lsls	r2, r3, #5
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	2340      	movs	r3, #64	; 0x40
 8002faa:	6093      	str	r3, [r2, #8]
}
 8002fac:	e2a6      	b.n	80034fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	015a      	lsls	r2, r3, #5
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fc4:	d122      	bne.n	800300c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	015a      	lsls	r2, r3, #5
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	4413      	add	r3, r2
 8002fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	0151      	lsls	r1, r2, #5
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	440a      	add	r2, r1
 8002fdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fe0:	f043 0302 	orr.w	r3, r3, #2
 8002fe4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	b2d2      	uxtb	r2, r2
 8002fee:	4611      	mov	r1, r2
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f003 fe7c 	bl	8006cee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	015a      	lsls	r2, r3, #5
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003002:	461a      	mov	r2, r3
 8003004:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003008:	6093      	str	r3, [r2, #8]
}
 800300a:	e277      	b.n	80034fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	015a      	lsls	r2, r3, #5
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	4413      	add	r3, r2
 8003014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b01      	cmp	r3, #1
 8003020:	d135      	bne.n	800308e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	4613      	mov	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	440b      	add	r3, r1
 8003030:	3358      	adds	r3, #88	; 0x58
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	015a      	lsls	r2, r3, #5
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	4413      	add	r3, r2
 800303e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	0151      	lsls	r1, r2, #5
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	440a      	add	r2, r1
 800304c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003050:	f043 0302 	orr.w	r3, r3, #2
 8003054:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	b2d2      	uxtb	r2, r2
 800305e:	4611      	mov	r1, r2
 8003060:	4618      	mov	r0, r3
 8003062:	f003 fe44 	bl	8006cee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	015a      	lsls	r2, r3, #5
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	4413      	add	r3, r2
 800306e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003072:	461a      	mov	r2, r3
 8003074:	2301      	movs	r3, #1
 8003076:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003078:	6879      	ldr	r1, [r7, #4]
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	4613      	mov	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	440b      	add	r3, r1
 8003086:	335d      	adds	r3, #93	; 0x5d
 8003088:	2201      	movs	r2, #1
 800308a:	701a      	strb	r2, [r3, #0]
}
 800308c:	e236      	b.n	80034fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	015a      	lsls	r2, r3, #5
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	4413      	add	r3, r2
 8003096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d12b      	bne.n	80030fc <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	015a      	lsls	r2, r3, #5
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	4413      	add	r3, r2
 80030ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b0:	461a      	mov	r2, r3
 80030b2:	2308      	movs	r3, #8
 80030b4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	015a      	lsls	r2, r3, #5
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4413      	add	r3, r2
 80030be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	0151      	lsls	r1, r2, #5
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	440a      	add	r2, r1
 80030cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030d0:	f043 0302 	orr.w	r3, r3, #2
 80030d4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	4611      	mov	r1, r2
 80030e0:	4618      	mov	r0, r3
 80030e2:	f003 fe04 	bl	8006cee <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	4613      	mov	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	440b      	add	r3, r1
 80030f4:	335d      	adds	r3, #93	; 0x5d
 80030f6:	2205      	movs	r2, #5
 80030f8:	701a      	strb	r2, [r3, #0]
}
 80030fa:	e1ff      	b.n	80034fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	015a      	lsls	r2, r3, #5
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	4413      	add	r3, r2
 8003104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 0310 	and.w	r3, r3, #16
 800310e:	2b10      	cmp	r3, #16
 8003110:	d155      	bne.n	80031be <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	4613      	mov	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	440b      	add	r3, r1
 8003120:	3358      	adds	r3, #88	; 0x58
 8003122:	2200      	movs	r2, #0
 8003124:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	4613      	mov	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	440b      	add	r3, r1
 8003134:	335d      	adds	r3, #93	; 0x5d
 8003136:	2203      	movs	r2, #3
 8003138:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	4613      	mov	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	440b      	add	r3, r1
 8003148:	333d      	adds	r3, #61	; 0x3d
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d114      	bne.n	800317a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	440b      	add	r3, r1
 800315e:	333c      	adds	r3, #60	; 0x3c
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d109      	bne.n	800317a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	4613      	mov	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	440b      	add	r3, r1
 8003174:	333d      	adds	r3, #61	; 0x3d
 8003176:	2201      	movs	r2, #1
 8003178:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	015a      	lsls	r2, r3, #5
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	4413      	add	r3, r2
 8003182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	0151      	lsls	r1, r2, #5
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	440a      	add	r2, r1
 8003190:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003194:	f043 0302 	orr.w	r3, r3, #2
 8003198:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	b2d2      	uxtb	r2, r2
 80031a2:	4611      	mov	r1, r2
 80031a4:	4618      	mov	r0, r3
 80031a6:	f003 fda2 	bl	8006cee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	015a      	lsls	r2, r3, #5
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	4413      	add	r3, r2
 80031b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b6:	461a      	mov	r2, r3
 80031b8:	2310      	movs	r3, #16
 80031ba:	6093      	str	r3, [r2, #8]
}
 80031bc:	e19e      	b.n	80034fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	015a      	lsls	r2, r3, #5
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	4413      	add	r3, r2
 80031c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d0:	2b80      	cmp	r3, #128	; 0x80
 80031d2:	d12b      	bne.n	800322c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	0151      	lsls	r1, r2, #5
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	440a      	add	r2, r1
 80031ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031ee:	f043 0302 	orr.w	r3, r3, #2
 80031f2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	4611      	mov	r1, r2
 80031fe:	4618      	mov	r0, r3
 8003200:	f003 fd75 	bl	8006cee <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	440b      	add	r3, r1
 8003212:	335d      	adds	r3, #93	; 0x5d
 8003214:	2206      	movs	r2, #6
 8003216:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	015a      	lsls	r2, r3, #5
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	4413      	add	r3, r2
 8003220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003224:	461a      	mov	r2, r3
 8003226:	2380      	movs	r3, #128	; 0x80
 8003228:	6093      	str	r3, [r2, #8]
}
 800322a:	e167      	b.n	80034fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	015a      	lsls	r2, r3, #5
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	4413      	add	r3, r2
 8003234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800323e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003242:	d135      	bne.n	80032b0 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	015a      	lsls	r2, r3, #5
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	4413      	add	r3, r2
 800324c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	0151      	lsls	r1, r2, #5
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	440a      	add	r2, r1
 800325a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800325e:	f043 0302 	orr.w	r3, r3, #2
 8003262:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	4611      	mov	r1, r2
 800326e:	4618      	mov	r0, r3
 8003270:	f003 fd3d 	bl	8006cee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	4413      	add	r3, r2
 800327c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003280:	461a      	mov	r2, r3
 8003282:	2310      	movs	r3, #16
 8003284:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	015a      	lsls	r2, r3, #5
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4413      	add	r3, r2
 800328e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003292:	461a      	mov	r2, r3
 8003294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003298:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	4613      	mov	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	440b      	add	r3, r1
 80032a8:	335d      	adds	r3, #93	; 0x5d
 80032aa:	2208      	movs	r2, #8
 80032ac:	701a      	strb	r2, [r3, #0]
}
 80032ae:	e125      	b.n	80034fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	015a      	lsls	r2, r3, #5
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	4413      	add	r3, r2
 80032b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	f040 811a 	bne.w	80034fc <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	0151      	lsls	r1, r2, #5
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	440a      	add	r2, r1
 80032de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032e2:	f023 0302 	bic.w	r3, r3, #2
 80032e6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	4613      	mov	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	440b      	add	r3, r1
 80032f6:	335d      	adds	r3, #93	; 0x5d
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d137      	bne.n	800336e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	4613      	mov	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	440b      	add	r3, r1
 800330c:	335c      	adds	r3, #92	; 0x5c
 800330e:	2201      	movs	r2, #1
 8003310:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	440b      	add	r3, r1
 8003320:	333f      	adds	r3, #63	; 0x3f
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2b02      	cmp	r3, #2
 8003326:	d00b      	beq.n	8003340 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4613      	mov	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	440b      	add	r3, r1
 8003336:	333f      	adds	r3, #63	; 0x3f
 8003338:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800333a:	2b03      	cmp	r3, #3
 800333c:	f040 80c5 	bne.w	80034ca <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	4613      	mov	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	440b      	add	r3, r1
 800334e:	3351      	adds	r3, #81	; 0x51
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	f083 0301 	eor.w	r3, r3, #1
 8003356:	b2d8      	uxtb	r0, r3
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	440b      	add	r3, r1
 8003366:	3351      	adds	r3, #81	; 0x51
 8003368:	4602      	mov	r2, r0
 800336a:	701a      	strb	r2, [r3, #0]
 800336c:	e0ad      	b.n	80034ca <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	4613      	mov	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	440b      	add	r3, r1
 800337c:	335d      	adds	r3, #93	; 0x5d
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b03      	cmp	r3, #3
 8003382:	d10a      	bne.n	800339a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	4613      	mov	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	440b      	add	r3, r1
 8003392:	335c      	adds	r3, #92	; 0x5c
 8003394:	2202      	movs	r2, #2
 8003396:	701a      	strb	r2, [r3, #0]
 8003398:	e097      	b.n	80034ca <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	4613      	mov	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	440b      	add	r3, r1
 80033a8:	335d      	adds	r3, #93	; 0x5d
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2b04      	cmp	r3, #4
 80033ae:	d10a      	bne.n	80033c6 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	4613      	mov	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	440b      	add	r3, r1
 80033be:	335c      	adds	r3, #92	; 0x5c
 80033c0:	2202      	movs	r2, #2
 80033c2:	701a      	strb	r2, [r3, #0]
 80033c4:	e081      	b.n	80034ca <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	4613      	mov	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	440b      	add	r3, r1
 80033d4:	335d      	adds	r3, #93	; 0x5d
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b05      	cmp	r3, #5
 80033da:	d10a      	bne.n	80033f2 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	440b      	add	r3, r1
 80033ea:	335c      	adds	r3, #92	; 0x5c
 80033ec:	2205      	movs	r2, #5
 80033ee:	701a      	strb	r2, [r3, #0]
 80033f0:	e06b      	b.n	80034ca <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	4613      	mov	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	440b      	add	r3, r1
 8003400:	335d      	adds	r3, #93	; 0x5d
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	2b06      	cmp	r3, #6
 8003406:	d00a      	beq.n	800341e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	4613      	mov	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	440b      	add	r3, r1
 8003416:	335d      	adds	r3, #93	; 0x5d
 8003418:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800341a:	2b08      	cmp	r3, #8
 800341c:	d155      	bne.n	80034ca <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	4613      	mov	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	440b      	add	r3, r1
 800342c:	3358      	adds	r3, #88	; 0x58
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	1c59      	adds	r1, r3, #1
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	4613      	mov	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	4403      	add	r3, r0
 8003440:	3358      	adds	r3, #88	; 0x58
 8003442:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	4613      	mov	r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	440b      	add	r3, r1
 8003452:	3358      	adds	r3, #88	; 0x58
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2b03      	cmp	r3, #3
 8003458:	d914      	bls.n	8003484 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	4613      	mov	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	440b      	add	r3, r1
 8003468:	3358      	adds	r3, #88	; 0x58
 800346a:	2200      	movs	r2, #0
 800346c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	4613      	mov	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	440b      	add	r3, r1
 800347c:	335c      	adds	r3, #92	; 0x5c
 800347e:	2204      	movs	r2, #4
 8003480:	701a      	strb	r2, [r3, #0]
 8003482:	e009      	b.n	8003498 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	4613      	mov	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	440b      	add	r3, r1
 8003492:	335c      	adds	r3, #92	; 0x5c
 8003494:	2202      	movs	r2, #2
 8003496:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	015a      	lsls	r2, r3, #5
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	4413      	add	r3, r2
 80034a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034ae:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034b6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c4:	461a      	mov	r2, r3
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	015a      	lsls	r2, r3, #5
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	4413      	add	r3, r2
 80034d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d6:	461a      	mov	r2, r3
 80034d8:	2302      	movs	r3, #2
 80034da:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	b2d8      	uxtb	r0, r3
 80034e0:	6879      	ldr	r1, [r7, #4]
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	4613      	mov	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	440b      	add	r3, r1
 80034ee:	335c      	adds	r3, #92	; 0x5c
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	461a      	mov	r2, r3
 80034f4:	4601      	mov	r1, r0
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f005 fc6e 	bl	8008dd8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80034fc:	bf00      	nop
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08a      	sub	sp, #40	; 0x28
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	f003 030f 	and.w	r3, r3, #15
 8003524:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	0c5b      	lsrs	r3, r3, #17
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	091b      	lsrs	r3, r3, #4
 8003534:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003538:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	2b02      	cmp	r3, #2
 800353e:	d003      	beq.n	8003548 <HCD_RXQLVL_IRQHandler+0x44>
 8003540:	2b05      	cmp	r3, #5
 8003542:	f000 8082 	beq.w	800364a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003546:	e083      	b.n	8003650 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d07f      	beq.n	800364e <HCD_RXQLVL_IRQHandler+0x14a>
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4613      	mov	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	4413      	add	r3, r2
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	440b      	add	r3, r1
 800355c:	3344      	adds	r3, #68	; 0x44
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d074      	beq.n	800364e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6818      	ldr	r0, [r3, #0]
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	4613      	mov	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	440b      	add	r3, r1
 8003576:	3344      	adds	r3, #68	; 0x44
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	b292      	uxth	r2, r2
 800357e:	4619      	mov	r1, r3
 8003580:	f002 ff55 	bl	800642e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	4613      	mov	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	440b      	add	r3, r1
 8003592:	3344      	adds	r3, #68	; 0x44
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	18d1      	adds	r1, r2, r3
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	4613      	mov	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4413      	add	r3, r2
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	4403      	add	r3, r0
 80035a8:	3344      	adds	r3, #68	; 0x44
 80035aa:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4613      	mov	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	440b      	add	r3, r1
 80035ba:	334c      	adds	r3, #76	; 0x4c
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	18d1      	adds	r1, r2, r3
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	4613      	mov	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	4403      	add	r3, r0
 80035d0:	334c      	adds	r3, #76	; 0x4c
 80035d2:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	6a3b      	ldr	r3, [r7, #32]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e0:	691a      	ldr	r2, [r3, #16]
 80035e2:	4b1d      	ldr	r3, [pc, #116]	; (8003658 <HCD_RXQLVL_IRQHandler+0x154>)
 80035e4:	4013      	ands	r3, r2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d031      	beq.n	800364e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003600:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003608:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	015a      	lsls	r2, r3, #5
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	4413      	add	r3, r2
 8003612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003616:	461a      	mov	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	4613      	mov	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	440b      	add	r3, r1
 800362a:	3350      	adds	r3, #80	; 0x50
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	f083 0301 	eor.w	r3, r3, #1
 8003632:	b2d8      	uxtb	r0, r3
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	4613      	mov	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	440b      	add	r3, r1
 8003642:	3350      	adds	r3, #80	; 0x50
 8003644:	4602      	mov	r2, r0
 8003646:	701a      	strb	r2, [r3, #0]
      break;
 8003648:	e001      	b.n	800364e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800364a:	bf00      	nop
 800364c:	e000      	b.n	8003650 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800364e:	bf00      	nop
  }
}
 8003650:	bf00      	nop
 8003652:	3728      	adds	r7, #40	; 0x28
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	1ff80000 	.word	0x1ff80000

0800365c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003688:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b02      	cmp	r3, #2
 8003692:	d113      	bne.n	80036bc <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b01      	cmp	r3, #1
 800369c:	d10a      	bne.n	80036b4 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	699a      	ldr	r2, [r3, #24]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80036ac:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f005 fb76 	bl	8008da0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f043 0302 	orr.w	r3, r3, #2
 80036ba:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	2b08      	cmp	r3, #8
 80036c4:	d147      	bne.n	8003756 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	f043 0308 	orr.w	r3, r3, #8
 80036cc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b04      	cmp	r3, #4
 80036d6:	d129      	bne.n	800372c <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d113      	bne.n	8003708 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80036e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036ea:	d106      	bne.n	80036fa <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2102      	movs	r1, #2
 80036f2:	4618      	mov	r0, r3
 80036f4:	f002 ffd6 	bl	80066a4 <USB_InitFSLSPClkSel>
 80036f8:	e011      	b.n	800371e <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2101      	movs	r1, #1
 8003700:	4618      	mov	r0, r3
 8003702:	f002 ffcf 	bl	80066a4 <USB_InitFSLSPClkSel>
 8003706:	e00a      	b.n	800371e <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d106      	bne.n	800371e <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003716:	461a      	mov	r2, r3
 8003718:	f64e 2360 	movw	r3, #60000	; 0xea60
 800371c:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f005 fb68 	bl	8008df4 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f005 fb3b 	bl	8008da0 <HAL_HCD_Connect_Callback>
 800372a:	e014      	b.n	8003756 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f005 fb6f 	bl	8008e10 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003740:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003744:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	699a      	ldr	r2, [r3, #24]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003754:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f003 0320 	and.w	r3, r3, #32
 800375c:	2b20      	cmp	r3, #32
 800375e:	d103      	bne.n	8003768 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f043 0320 	orr.w	r3, r3, #32
 8003766:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800376e:	461a      	mov	r2, r3
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	6013      	str	r3, [r2, #0]
}
 8003774:	bf00      	nop
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e11f      	b.n	80039ce <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d106      	bne.n	80037a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7fd fd04 	bl	80011b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2224      	movs	r2, #36	; 0x24
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 0201 	bic.w	r2, r2, #1
 80037be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037e0:	f001 f9de 	bl	8004ba0 <HAL_RCC_GetPCLK1Freq>
 80037e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	4a7b      	ldr	r2, [pc, #492]	; (80039d8 <HAL_I2C_Init+0x25c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d807      	bhi.n	8003800 <HAL_I2C_Init+0x84>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4a7a      	ldr	r2, [pc, #488]	; (80039dc <HAL_I2C_Init+0x260>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	bf94      	ite	ls
 80037f8:	2301      	movls	r3, #1
 80037fa:	2300      	movhi	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	e006      	b.n	800380e <HAL_I2C_Init+0x92>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4a77      	ldr	r2, [pc, #476]	; (80039e0 <HAL_I2C_Init+0x264>)
 8003804:	4293      	cmp	r3, r2
 8003806:	bf94      	ite	ls
 8003808:	2301      	movls	r3, #1
 800380a:	2300      	movhi	r3, #0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e0db      	b.n	80039ce <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4a72      	ldr	r2, [pc, #456]	; (80039e4 <HAL_I2C_Init+0x268>)
 800381a:	fba2 2303 	umull	r2, r3, r2, r3
 800381e:	0c9b      	lsrs	r3, r3, #18
 8003820:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	430a      	orrs	r2, r1
 8003834:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	4a64      	ldr	r2, [pc, #400]	; (80039d8 <HAL_I2C_Init+0x25c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d802      	bhi.n	8003850 <HAL_I2C_Init+0xd4>
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	3301      	adds	r3, #1
 800384e:	e009      	b.n	8003864 <HAL_I2C_Init+0xe8>
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003856:	fb02 f303 	mul.w	r3, r2, r3
 800385a:	4a63      	ldr	r2, [pc, #396]	; (80039e8 <HAL_I2C_Init+0x26c>)
 800385c:	fba2 2303 	umull	r2, r3, r2, r3
 8003860:	099b      	lsrs	r3, r3, #6
 8003862:	3301      	adds	r3, #1
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6812      	ldr	r2, [r2, #0]
 8003868:	430b      	orrs	r3, r1
 800386a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003876:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	4956      	ldr	r1, [pc, #344]	; (80039d8 <HAL_I2C_Init+0x25c>)
 8003880:	428b      	cmp	r3, r1
 8003882:	d80d      	bhi.n	80038a0 <HAL_I2C_Init+0x124>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	1e59      	subs	r1, r3, #1
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003892:	3301      	adds	r3, #1
 8003894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003898:	2b04      	cmp	r3, #4
 800389a:	bf38      	it	cc
 800389c:	2304      	movcc	r3, #4
 800389e:	e04f      	b.n	8003940 <HAL_I2C_Init+0x1c4>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d111      	bne.n	80038cc <HAL_I2C_Init+0x150>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	1e58      	subs	r0, r3, #1
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6859      	ldr	r1, [r3, #4]
 80038b0:	460b      	mov	r3, r1
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	440b      	add	r3, r1
 80038b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ba:	3301      	adds	r3, #1
 80038bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	bf0c      	ite	eq
 80038c4:	2301      	moveq	r3, #1
 80038c6:	2300      	movne	r3, #0
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	e012      	b.n	80038f2 <HAL_I2C_Init+0x176>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	1e58      	subs	r0, r3, #1
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6859      	ldr	r1, [r3, #4]
 80038d4:	460b      	mov	r3, r1
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	0099      	lsls	r1, r3, #2
 80038dc:	440b      	add	r3, r1
 80038de:	fbb0 f3f3 	udiv	r3, r0, r3
 80038e2:	3301      	adds	r3, #1
 80038e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	bf0c      	ite	eq
 80038ec:	2301      	moveq	r3, #1
 80038ee:	2300      	movne	r3, #0
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <HAL_I2C_Init+0x17e>
 80038f6:	2301      	movs	r3, #1
 80038f8:	e022      	b.n	8003940 <HAL_I2C_Init+0x1c4>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10e      	bne.n	8003920 <HAL_I2C_Init+0x1a4>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	1e58      	subs	r0, r3, #1
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6859      	ldr	r1, [r3, #4]
 800390a:	460b      	mov	r3, r1
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	440b      	add	r3, r1
 8003910:	fbb0 f3f3 	udiv	r3, r0, r3
 8003914:	3301      	adds	r3, #1
 8003916:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800391a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800391e:	e00f      	b.n	8003940 <HAL_I2C_Init+0x1c4>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	1e58      	subs	r0, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6859      	ldr	r1, [r3, #4]
 8003928:	460b      	mov	r3, r1
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	440b      	add	r3, r1
 800392e:	0099      	lsls	r1, r3, #2
 8003930:	440b      	add	r3, r1
 8003932:	fbb0 f3f3 	udiv	r3, r0, r3
 8003936:	3301      	adds	r3, #1
 8003938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800393c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003940:	6879      	ldr	r1, [r7, #4]
 8003942:	6809      	ldr	r1, [r1, #0]
 8003944:	4313      	orrs	r3, r2
 8003946:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	69da      	ldr	r2, [r3, #28]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	431a      	orrs	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800396e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6911      	ldr	r1, [r2, #16]
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	68d2      	ldr	r2, [r2, #12]
 800397a:	4311      	orrs	r1, r2
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6812      	ldr	r2, [r2, #0]
 8003980:	430b      	orrs	r3, r1
 8003982:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	695a      	ldr	r2, [r3, #20]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	431a      	orrs	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	430a      	orrs	r2, r1
 800399e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0201 	orr.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2220      	movs	r2, #32
 80039ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	000186a0 	.word	0x000186a0
 80039dc:	001e847f 	.word	0x001e847f
 80039e0:	003d08ff 	.word	0x003d08ff
 80039e4:	431bde83 	.word	0x431bde83
 80039e8:	10624dd3 	.word	0x10624dd3

080039ec <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b088      	sub	sp, #32
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e128      	b.n	8003c50 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d109      	bne.n	8003a1e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a90      	ldr	r2, [pc, #576]	; (8003c58 <HAL_I2S_Init+0x26c>)
 8003a16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7fd fc11 	bl	8001240 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2202      	movs	r2, #2
 8003a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	69db      	ldr	r3, [r3, #28]
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6812      	ldr	r2, [r2, #0]
 8003a30:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003a34:	f023 030f 	bic.w	r3, r3, #15
 8003a38:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d060      	beq.n	8003b0c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d102      	bne.n	8003a58 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003a52:	2310      	movs	r3, #16
 8003a54:	617b      	str	r3, [r7, #20]
 8003a56:	e001      	b.n	8003a5c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003a58:	2320      	movs	r3, #32
 8003a5a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	2b20      	cmp	r3, #32
 8003a62:	d802      	bhi.n	8003a6a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003a6a:	2001      	movs	r0, #1
 8003a6c:	f001 f9a2 	bl	8004db4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a70:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a7a:	d125      	bne.n	8003ac8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d010      	beq.n	8003aa6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a8e:	4613      	mov	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4413      	add	r3, r2
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	461a      	mov	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa0:	3305      	adds	r3, #5
 8003aa2:	613b      	str	r3, [r7, #16]
 8003aa4:	e01f      	b.n	8003ae6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	461a      	mov	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac2:	3305      	adds	r3, #5
 8003ac4:	613b      	str	r3, [r7, #16]
 8003ac6:	e00e      	b.n	8003ae6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	461a      	mov	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae2:	3305      	adds	r3, #5
 8003ae4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	4a5c      	ldr	r2, [pc, #368]	; (8003c5c <HAL_I2S_Init+0x270>)
 8003aea:	fba2 2303 	umull	r2, r3, r2, r3
 8003aee:	08db      	lsrs	r3, r3, #3
 8003af0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	085b      	lsrs	r3, r3, #1
 8003b02:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	021b      	lsls	r3, r3, #8
 8003b08:	61bb      	str	r3, [r7, #24]
 8003b0a:	e003      	b.n	8003b14 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d902      	bls.n	8003b20 <HAL_I2S_Init+0x134>
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	2bff      	cmp	r3, #255	; 0xff
 8003b1e:	d907      	bls.n	8003b30 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b24:	f043 0210 	orr.w	r2, r3, #16
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e08f      	b.n	8003c50 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	ea42 0103 	orr.w	r1, r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	69fa      	ldr	r2, [r7, #28]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003b4e:	f023 030f 	bic.w	r3, r3, #15
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6851      	ldr	r1, [r2, #4]
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	6892      	ldr	r2, [r2, #8]
 8003b5a:	4311      	orrs	r1, r2
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	68d2      	ldr	r2, [r2, #12]
 8003b60:	4311      	orrs	r1, r2
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6992      	ldr	r2, [r2, #24]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b72:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d161      	bne.n	8003c40 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a38      	ldr	r2, [pc, #224]	; (8003c60 <HAL_I2S_Init+0x274>)
 8003b80:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a37      	ldr	r2, [pc, #220]	; (8003c64 <HAL_I2S_Init+0x278>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d101      	bne.n	8003b90 <HAL_I2S_Init+0x1a4>
 8003b8c:	4b36      	ldr	r3, [pc, #216]	; (8003c68 <HAL_I2S_Init+0x27c>)
 8003b8e:	e001      	b.n	8003b94 <HAL_I2S_Init+0x1a8>
 8003b90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6812      	ldr	r2, [r2, #0]
 8003b9a:	4932      	ldr	r1, [pc, #200]	; (8003c64 <HAL_I2S_Init+0x278>)
 8003b9c:	428a      	cmp	r2, r1
 8003b9e:	d101      	bne.n	8003ba4 <HAL_I2S_Init+0x1b8>
 8003ba0:	4a31      	ldr	r2, [pc, #196]	; (8003c68 <HAL_I2S_Init+0x27c>)
 8003ba2:	e001      	b.n	8003ba8 <HAL_I2S_Init+0x1bc>
 8003ba4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003ba8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003bac:	f023 030f 	bic.w	r3, r3, #15
 8003bb0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a2b      	ldr	r2, [pc, #172]	; (8003c64 <HAL_I2S_Init+0x278>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d101      	bne.n	8003bc0 <HAL_I2S_Init+0x1d4>
 8003bbc:	4b2a      	ldr	r3, [pc, #168]	; (8003c68 <HAL_I2S_Init+0x27c>)
 8003bbe:	e001      	b.n	8003bc4 <HAL_I2S_Init+0x1d8>
 8003bc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a25      	ldr	r2, [pc, #148]	; (8003c64 <HAL_I2S_Init+0x278>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d101      	bne.n	8003bd6 <HAL_I2S_Init+0x1ea>
 8003bd2:	4b25      	ldr	r3, [pc, #148]	; (8003c68 <HAL_I2S_Init+0x27c>)
 8003bd4:	e001      	b.n	8003bda <HAL_I2S_Init+0x1ee>
 8003bd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bda:	69db      	ldr	r3, [r3, #28]
 8003bdc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003be6:	d003      	beq.n	8003bf0 <HAL_I2S_Init+0x204>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d103      	bne.n	8003bf8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003bf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bf4:	613b      	str	r3, [r7, #16]
 8003bf6:	e001      	b.n	8003bfc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	b299      	uxth	r1, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003c12:	4303      	orrs	r3, r0
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	430b      	orrs	r3, r1
 8003c18:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	897b      	ldrh	r3, [r7, #10]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c28:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a0d      	ldr	r2, [pc, #52]	; (8003c64 <HAL_I2S_Init+0x278>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d101      	bne.n	8003c38 <HAL_I2S_Init+0x24c>
 8003c34:	4b0c      	ldr	r3, [pc, #48]	; (8003c68 <HAL_I2S_Init+0x27c>)
 8003c36:	e001      	b.n	8003c3c <HAL_I2S_Init+0x250>
 8003c38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c3c:	897a      	ldrh	r2, [r7, #10]
 8003c3e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3720      	adds	r7, #32
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	08003d63 	.word	0x08003d63
 8003c5c:	cccccccd 	.word	0xcccccccd
 8003c60:	08003e79 	.word	0x08003e79
 8003c64:	40003800 	.word	0x40003800
 8003c68:	40003400 	.word	0x40003400

08003c6c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	881a      	ldrh	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc0:	1c9a      	adds	r2, r3, #2
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10e      	bne.n	8003cfc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cec:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7ff ffb8 	bl	8003c6c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003cfc:	bf00      	nop
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d16:	b292      	uxth	r2, r2
 8003d18:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1e:	1c9a      	adds	r2, r3, #2
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10e      	bne.n	8003d5a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d4a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7ff ff93 	bl	8003c80 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d5a:	bf00      	nop
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b086      	sub	sp, #24
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d13a      	bne.n	8003df4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d109      	bne.n	8003d9c <I2S_IRQHandler+0x3a>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d92:	2b40      	cmp	r3, #64	; 0x40
 8003d94:	d102      	bne.n	8003d9c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7ff ffb4 	bl	8003d04 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da2:	2b40      	cmp	r3, #64	; 0x40
 8003da4:	d126      	bne.n	8003df4 <I2S_IRQHandler+0x92>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f003 0320 	and.w	r3, r3, #32
 8003db0:	2b20      	cmp	r3, #32
 8003db2:	d11f      	bne.n	8003df4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003dc2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	613b      	str	r3, [r7, #16]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	613b      	str	r3, [r7, #16]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	613b      	str	r3, [r7, #16]
 8003dd8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de6:	f043 0202 	orr.w	r2, r3, #2
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7ff ff50 	bl	8003c94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b03      	cmp	r3, #3
 8003dfe:	d136      	bne.n	8003e6e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d109      	bne.n	8003e1e <I2S_IRQHandler+0xbc>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e14:	2b80      	cmp	r3, #128	; 0x80
 8003e16:	d102      	bne.n	8003e1e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7ff ff45 	bl	8003ca8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f003 0308 	and.w	r3, r3, #8
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	d122      	bne.n	8003e6e <I2S_IRQHandler+0x10c>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f003 0320 	and.w	r3, r3, #32
 8003e32:	2b20      	cmp	r3, #32
 8003e34:	d11b      	bne.n	8003e6e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e44:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e46:	2300      	movs	r3, #0
 8003e48:	60fb      	str	r3, [r7, #12]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	60fb      	str	r3, [r7, #12]
 8003e52:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e60:	f043 0204 	orr.w	r2, r3, #4
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f7ff ff13 	bl	8003c94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e6e:	bf00      	nop
 8003e70:	3718      	adds	r7, #24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
	...

08003e78 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b088      	sub	sp, #32
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4aa2      	ldr	r2, [pc, #648]	; (8004118 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d101      	bne.n	8003e96 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003e92:	4ba2      	ldr	r3, [pc, #648]	; (800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e94:	e001      	b.n	8003e9a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003e96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a9b      	ldr	r2, [pc, #620]	; (8004118 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d101      	bne.n	8003eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003eb0:	4b9a      	ldr	r3, [pc, #616]	; (800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003eb2:	e001      	b.n	8003eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003eb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ec4:	d004      	beq.n	8003ed0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f040 8099 	bne.w	8004002 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d107      	bne.n	8003eea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 f925 	bl	8004134 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d107      	bne.n	8003f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d002      	beq.n	8003f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f9c8 	bl	8004294 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0a:	2b40      	cmp	r3, #64	; 0x40
 8003f0c:	d13a      	bne.n	8003f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	f003 0320 	and.w	r3, r3, #32
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d035      	beq.n	8003f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a7e      	ldr	r2, [pc, #504]	; (8004118 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d101      	bne.n	8003f26 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003f22:	4b7e      	ldr	r3, [pc, #504]	; (800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f24:	e001      	b.n	8003f2a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003f26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4979      	ldr	r1, [pc, #484]	; (8004118 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f32:	428b      	cmp	r3, r1
 8003f34:	d101      	bne.n	8003f3a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003f36:	4b79      	ldr	r3, [pc, #484]	; (800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f38:	e001      	b.n	8003f3e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003f3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f3e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f42:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f52:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f54:	2300      	movs	r3, #0
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	60fb      	str	r3, [r7, #12]
 8003f68:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f76:	f043 0202 	orr.w	r2, r3, #2
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7ff fe88 	bl	8003c94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	f003 0308 	and.w	r3, r3, #8
 8003f8a:	2b08      	cmp	r3, #8
 8003f8c:	f040 80be 	bne.w	800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f003 0320 	and.w	r3, r3, #32
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 80b8 	beq.w	800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003faa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a59      	ldr	r2, [pc, #356]	; (8004118 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d101      	bne.n	8003fba <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003fb6:	4b59      	ldr	r3, [pc, #356]	; (800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003fb8:	e001      	b.n	8003fbe <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003fba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4954      	ldr	r1, [pc, #336]	; (8004118 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003fc6:	428b      	cmp	r3, r1
 8003fc8:	d101      	bne.n	8003fce <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003fca:	4b54      	ldr	r3, [pc, #336]	; (800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003fcc:	e001      	b.n	8003fd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003fce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fd2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fd6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003fd8:	2300      	movs	r3, #0
 8003fda:	60bb      	str	r3, [r7, #8]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	60bb      	str	r3, [r7, #8]
 8003fe4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff2:	f043 0204 	orr.w	r2, r3, #4
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7ff fe4a 	bl	8003c94 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004000:	e084      	b.n	800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b02      	cmp	r3, #2
 800400a:	d107      	bne.n	800401c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004012:	2b00      	cmp	r3, #0
 8004014:	d002      	beq.n	800401c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f8be 	bl	8004198 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b01      	cmp	r3, #1
 8004024:	d107      	bne.n	8004036 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 f8fd 	bl	8004230 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403c:	2b40      	cmp	r3, #64	; 0x40
 800403e:	d12f      	bne.n	80040a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f003 0320 	and.w	r3, r3, #32
 8004046:	2b00      	cmp	r3, #0
 8004048:	d02a      	beq.n	80040a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004058:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a2e      	ldr	r2, [pc, #184]	; (8004118 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d101      	bne.n	8004068 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004064:	4b2d      	ldr	r3, [pc, #180]	; (800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004066:	e001      	b.n	800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004068:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4929      	ldr	r1, [pc, #164]	; (8004118 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004074:	428b      	cmp	r3, r1
 8004076:	d101      	bne.n	800407c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004078:	4b28      	ldr	r3, [pc, #160]	; (800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800407a:	e001      	b.n	8004080 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800407c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004080:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004084:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004092:	f043 0202 	orr.w	r2, r3, #2
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7ff fdfa 	bl	8003c94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	f003 0308 	and.w	r3, r3, #8
 80040a6:	2b08      	cmp	r3, #8
 80040a8:	d131      	bne.n	800410e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	f003 0320 	and.w	r3, r3, #32
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d02c      	beq.n	800410e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a17      	ldr	r2, [pc, #92]	; (8004118 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d101      	bne.n	80040c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80040be:	4b17      	ldr	r3, [pc, #92]	; (800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80040c0:	e001      	b.n	80040c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80040c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4912      	ldr	r1, [pc, #72]	; (8004118 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80040ce:	428b      	cmp	r3, r1
 80040d0:	d101      	bne.n	80040d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80040d2:	4b12      	ldr	r3, [pc, #72]	; (800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80040d4:	e001      	b.n	80040da <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80040d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040de:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040ee:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fc:	f043 0204 	orr.w	r2, r3, #4
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7ff fdc5 	bl	8003c94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800410a:	e000      	b.n	800410e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800410c:	bf00      	nop
}
 800410e:	bf00      	nop
 8004110:	3720      	adds	r7, #32
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	40003800 	.word	0x40003800
 800411c:	40003400 	.word	0x40003400

08004120 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004140:	1c99      	adds	r1, r3, #2
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	6251      	str	r1, [r2, #36]	; 0x24
 8004146:	881a      	ldrh	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004152:	b29b      	uxth	r3, r3
 8004154:	3b01      	subs	r3, #1
 8004156:	b29a      	uxth	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004160:	b29b      	uxth	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d113      	bne.n	800418e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004174:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800417a:	b29b      	uxth	r3, r3
 800417c:	2b00      	cmp	r3, #0
 800417e:	d106      	bne.n	800418e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f7ff ffc9 	bl	8004120 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800418e:	bf00      	nop
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	1c99      	adds	r1, r3, #2
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6251      	str	r1, [r2, #36]	; 0x24
 80041aa:	8819      	ldrh	r1, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a1d      	ldr	r2, [pc, #116]	; (8004228 <I2SEx_TxISR_I2SExt+0x90>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d101      	bne.n	80041ba <I2SEx_TxISR_I2SExt+0x22>
 80041b6:	4b1d      	ldr	r3, [pc, #116]	; (800422c <I2SEx_TxISR_I2SExt+0x94>)
 80041b8:	e001      	b.n	80041be <I2SEx_TxISR_I2SExt+0x26>
 80041ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041be:	460a      	mov	r2, r1
 80041c0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	3b01      	subs	r3, #1
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d121      	bne.n	800421e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a12      	ldr	r2, [pc, #72]	; (8004228 <I2SEx_TxISR_I2SExt+0x90>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d101      	bne.n	80041e8 <I2SEx_TxISR_I2SExt+0x50>
 80041e4:	4b11      	ldr	r3, [pc, #68]	; (800422c <I2SEx_TxISR_I2SExt+0x94>)
 80041e6:	e001      	b.n	80041ec <I2SEx_TxISR_I2SExt+0x54>
 80041e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	490d      	ldr	r1, [pc, #52]	; (8004228 <I2SEx_TxISR_I2SExt+0x90>)
 80041f4:	428b      	cmp	r3, r1
 80041f6:	d101      	bne.n	80041fc <I2SEx_TxISR_I2SExt+0x64>
 80041f8:	4b0c      	ldr	r3, [pc, #48]	; (800422c <I2SEx_TxISR_I2SExt+0x94>)
 80041fa:	e001      	b.n	8004200 <I2SEx_TxISR_I2SExt+0x68>
 80041fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004200:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004204:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800420a:	b29b      	uxth	r3, r3
 800420c:	2b00      	cmp	r3, #0
 800420e:	d106      	bne.n	800421e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f7ff ff81 	bl	8004120 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800421e:	bf00      	nop
 8004220:	3708      	adds	r7, #8
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	40003800 	.word	0x40003800
 800422c:	40003400 	.word	0x40003400

08004230 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68d8      	ldr	r0, [r3, #12]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004242:	1c99      	adds	r1, r3, #2
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004248:	b282      	uxth	r2, r0
 800424a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004250:	b29b      	uxth	r3, r3
 8004252:	3b01      	subs	r3, #1
 8004254:	b29a      	uxth	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800425e:	b29b      	uxth	r3, r3
 8004260:	2b00      	cmp	r3, #0
 8004262:	d113      	bne.n	800428c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004272:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004278:	b29b      	uxth	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d106      	bne.n	800428c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7ff ff4a 	bl	8004120 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800428c:	bf00      	nop
 800428e:	3708      	adds	r7, #8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a20      	ldr	r2, [pc, #128]	; (8004324 <I2SEx_RxISR_I2SExt+0x90>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d101      	bne.n	80042aa <I2SEx_RxISR_I2SExt+0x16>
 80042a6:	4b20      	ldr	r3, [pc, #128]	; (8004328 <I2SEx_RxISR_I2SExt+0x94>)
 80042a8:	e001      	b.n	80042ae <I2SEx_RxISR_I2SExt+0x1a>
 80042aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042ae:	68d8      	ldr	r0, [r3, #12]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b4:	1c99      	adds	r1, r3, #2
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80042ba:	b282      	uxth	r2, r0
 80042bc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d121      	bne.n	800431a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a12      	ldr	r2, [pc, #72]	; (8004324 <I2SEx_RxISR_I2SExt+0x90>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d101      	bne.n	80042e4 <I2SEx_RxISR_I2SExt+0x50>
 80042e0:	4b11      	ldr	r3, [pc, #68]	; (8004328 <I2SEx_RxISR_I2SExt+0x94>)
 80042e2:	e001      	b.n	80042e8 <I2SEx_RxISR_I2SExt+0x54>
 80042e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	490d      	ldr	r1, [pc, #52]	; (8004324 <I2SEx_RxISR_I2SExt+0x90>)
 80042f0:	428b      	cmp	r3, r1
 80042f2:	d101      	bne.n	80042f8 <I2SEx_RxISR_I2SExt+0x64>
 80042f4:	4b0c      	ldr	r3, [pc, #48]	; (8004328 <I2SEx_RxISR_I2SExt+0x94>)
 80042f6:	e001      	b.n	80042fc <I2SEx_RxISR_I2SExt+0x68>
 80042f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042fc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004300:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004306:	b29b      	uxth	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	d106      	bne.n	800431a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f7ff ff03 	bl	8004120 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800431a:	bf00      	nop
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	40003800 	.word	0x40003800
 8004328:	40003400 	.word	0x40003400

0800432c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e25b      	b.n	80047f6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d075      	beq.n	8004436 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800434a:	4ba3      	ldr	r3, [pc, #652]	; (80045d8 <HAL_RCC_OscConfig+0x2ac>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 030c 	and.w	r3, r3, #12
 8004352:	2b04      	cmp	r3, #4
 8004354:	d00c      	beq.n	8004370 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004356:	4ba0      	ldr	r3, [pc, #640]	; (80045d8 <HAL_RCC_OscConfig+0x2ac>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800435e:	2b08      	cmp	r3, #8
 8004360:	d112      	bne.n	8004388 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004362:	4b9d      	ldr	r3, [pc, #628]	; (80045d8 <HAL_RCC_OscConfig+0x2ac>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800436a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800436e:	d10b      	bne.n	8004388 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004370:	4b99      	ldr	r3, [pc, #612]	; (80045d8 <HAL_RCC_OscConfig+0x2ac>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d05b      	beq.n	8004434 <HAL_RCC_OscConfig+0x108>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d157      	bne.n	8004434 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e236      	b.n	80047f6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004390:	d106      	bne.n	80043a0 <HAL_RCC_OscConfig+0x74>
 8004392:	4b91      	ldr	r3, [pc, #580]	; (80045d8 <HAL_RCC_OscConfig+0x2ac>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a90      	ldr	r2, [pc, #576]	; (80045d8 <HAL_RCC_OscConfig+0x2ac>)
 8004398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	e01d      	b.n	80043dc <HAL_RCC_OscConfig+0xb0>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043a8:	d10c      	bne.n	80043c4 <HAL_RCC_OscConfig+0x98>
 80043aa:	4b8b      	ldr	r3, [pc, #556]	; (80045d8 <HAL_RCC_OscConfig+0x2ac>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a8a      	ldr	r2, [pc, #552]	; (80045d8 <HAL_RCC_OscConfig+0x2ac>)
 80043b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043b4:	6013      	str	r3, [r2, #0]
 80043b6:	4b88      	ldr	r3, [pc, #544]	; (80045d8 <HAL_RCC_OscConfig+0x2ac>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a87      	ldr	r2, [pc, #540]	; (80045d8 <HAL_RCC_OscConfig+0x2ac>)
 80043bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	e00b      	b.n	80043dc <HAL_RCC_OscConfig+0xb0>
 80043c4:	4b84      	ldr	r3, [pc, #528]	; (80045d8 <HAL_RCC_OscConfig+0x2ac>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a83      	ldr	r2, [pc, #524]	; (80045d8 <HAL_RCC_OscConfig+0x2ac>)
 80043ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ce:	6013      	str	r3, [r2, #0]
 80043d0:	4b81      	ldr	r3, [pc, #516]	; (80045d8 <HAL_RCC_OscConfig+0x2ac>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a80      	ldr	r2, [pc, #512]	; (80045d8 <HAL_RCC_OscConfig+0x2ac>)
 80043d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d013      	beq.n	800440c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e4:	f7fd fa58 	bl	8001898 <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043ec:	f7fd fa54 	bl	8001898 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b64      	cmp	r3, #100	; 0x64
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e1fb      	b.n	80047f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043fe:	4b76      	ldr	r3, [pc, #472]	; (80045d8 <HAL_RCC_OscConfig+0x2ac>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0f0      	beq.n	80043ec <HAL_RCC_OscConfig+0xc0>
 800440a:	e014      	b.n	8004436 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440c:	f7fd fa44 	bl	8001898 <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004414:	f7fd fa40 	bl	8001898 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b64      	cmp	r3, #100	; 0x64
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e1e7      	b.n	80047f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004426:	4b6c      	ldr	r3, [pc, #432]	; (80045d8 <HAL_RCC_OscConfig+0x2ac>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f0      	bne.n	8004414 <HAL_RCC_OscConfig+0xe8>
 8004432:	e000      	b.n	8004436 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d063      	beq.n	800450a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004442:	4b65      	ldr	r3, [pc, #404]	; (80045d8 <HAL_RCC_OscConfig+0x2ac>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 030c 	and.w	r3, r3, #12
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00b      	beq.n	8004466 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800444e:	4b62      	ldr	r3, [pc, #392]	; (80045d8 <HAL_RCC_OscConfig+0x2ac>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004456:	2b08      	cmp	r3, #8
 8004458:	d11c      	bne.n	8004494 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800445a:	4b5f      	ldr	r3, [pc, #380]	; (80045d8 <HAL_RCC_OscConfig+0x2ac>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d116      	bne.n	8004494 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004466:	4b5c      	ldr	r3, [pc, #368]	; (80045d8 <HAL_RCC_OscConfig+0x2ac>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d005      	beq.n	800447e <HAL_RCC_OscConfig+0x152>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d001      	beq.n	800447e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e1bb      	b.n	80047f6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800447e:	4b56      	ldr	r3, [pc, #344]	; (80045d8 <HAL_RCC_OscConfig+0x2ac>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	4952      	ldr	r1, [pc, #328]	; (80045d8 <HAL_RCC_OscConfig+0x2ac>)
 800448e:	4313      	orrs	r3, r2
 8004490:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004492:	e03a      	b.n	800450a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d020      	beq.n	80044de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800449c:	4b4f      	ldr	r3, [pc, #316]	; (80045dc <HAL_RCC_OscConfig+0x2b0>)
 800449e:	2201      	movs	r2, #1
 80044a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a2:	f7fd f9f9 	bl	8001898 <HAL_GetTick>
 80044a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044a8:	e008      	b.n	80044bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044aa:	f7fd f9f5 	bl	8001898 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e19c      	b.n	80047f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044bc:	4b46      	ldr	r3, [pc, #280]	; (80045d8 <HAL_RCC_OscConfig+0x2ac>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d0f0      	beq.n	80044aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c8:	4b43      	ldr	r3, [pc, #268]	; (80045d8 <HAL_RCC_OscConfig+0x2ac>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	00db      	lsls	r3, r3, #3
 80044d6:	4940      	ldr	r1, [pc, #256]	; (80045d8 <HAL_RCC_OscConfig+0x2ac>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	600b      	str	r3, [r1, #0]
 80044dc:	e015      	b.n	800450a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044de:	4b3f      	ldr	r3, [pc, #252]	; (80045dc <HAL_RCC_OscConfig+0x2b0>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e4:	f7fd f9d8 	bl	8001898 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044ec:	f7fd f9d4 	bl	8001898 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e17b      	b.n	80047f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044fe:	4b36      	ldr	r3, [pc, #216]	; (80045d8 <HAL_RCC_OscConfig+0x2ac>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1f0      	bne.n	80044ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0308 	and.w	r3, r3, #8
 8004512:	2b00      	cmp	r3, #0
 8004514:	d030      	beq.n	8004578 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d016      	beq.n	800454c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800451e:	4b30      	ldr	r3, [pc, #192]	; (80045e0 <HAL_RCC_OscConfig+0x2b4>)
 8004520:	2201      	movs	r2, #1
 8004522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004524:	f7fd f9b8 	bl	8001898 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800452c:	f7fd f9b4 	bl	8001898 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e15b      	b.n	80047f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800453e:	4b26      	ldr	r3, [pc, #152]	; (80045d8 <HAL_RCC_OscConfig+0x2ac>)
 8004540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d0f0      	beq.n	800452c <HAL_RCC_OscConfig+0x200>
 800454a:	e015      	b.n	8004578 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800454c:	4b24      	ldr	r3, [pc, #144]	; (80045e0 <HAL_RCC_OscConfig+0x2b4>)
 800454e:	2200      	movs	r2, #0
 8004550:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004552:	f7fd f9a1 	bl	8001898 <HAL_GetTick>
 8004556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004558:	e008      	b.n	800456c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800455a:	f7fd f99d 	bl	8001898 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d901      	bls.n	800456c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e144      	b.n	80047f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800456c:	4b1a      	ldr	r3, [pc, #104]	; (80045d8 <HAL_RCC_OscConfig+0x2ac>)
 800456e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1f0      	bne.n	800455a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 80a0 	beq.w	80046c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004586:	2300      	movs	r3, #0
 8004588:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800458a:	4b13      	ldr	r3, [pc, #76]	; (80045d8 <HAL_RCC_OscConfig+0x2ac>)
 800458c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10f      	bne.n	80045b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004596:	2300      	movs	r3, #0
 8004598:	60bb      	str	r3, [r7, #8]
 800459a:	4b0f      	ldr	r3, [pc, #60]	; (80045d8 <HAL_RCC_OscConfig+0x2ac>)
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	4a0e      	ldr	r2, [pc, #56]	; (80045d8 <HAL_RCC_OscConfig+0x2ac>)
 80045a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045a4:	6413      	str	r3, [r2, #64]	; 0x40
 80045a6:	4b0c      	ldr	r3, [pc, #48]	; (80045d8 <HAL_RCC_OscConfig+0x2ac>)
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ae:	60bb      	str	r3, [r7, #8]
 80045b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045b2:	2301      	movs	r3, #1
 80045b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b6:	4b0b      	ldr	r3, [pc, #44]	; (80045e4 <HAL_RCC_OscConfig+0x2b8>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d121      	bne.n	8004606 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045c2:	4b08      	ldr	r3, [pc, #32]	; (80045e4 <HAL_RCC_OscConfig+0x2b8>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a07      	ldr	r2, [pc, #28]	; (80045e4 <HAL_RCC_OscConfig+0x2b8>)
 80045c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ce:	f7fd f963 	bl	8001898 <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d4:	e011      	b.n	80045fa <HAL_RCC_OscConfig+0x2ce>
 80045d6:	bf00      	nop
 80045d8:	40023800 	.word	0x40023800
 80045dc:	42470000 	.word	0x42470000
 80045e0:	42470e80 	.word	0x42470e80
 80045e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045e8:	f7fd f956 	bl	8001898 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e0fd      	b.n	80047f6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045fa:	4b81      	ldr	r3, [pc, #516]	; (8004800 <HAL_RCC_OscConfig+0x4d4>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0f0      	beq.n	80045e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d106      	bne.n	800461c <HAL_RCC_OscConfig+0x2f0>
 800460e:	4b7d      	ldr	r3, [pc, #500]	; (8004804 <HAL_RCC_OscConfig+0x4d8>)
 8004610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004612:	4a7c      	ldr	r2, [pc, #496]	; (8004804 <HAL_RCC_OscConfig+0x4d8>)
 8004614:	f043 0301 	orr.w	r3, r3, #1
 8004618:	6713      	str	r3, [r2, #112]	; 0x70
 800461a:	e01c      	b.n	8004656 <HAL_RCC_OscConfig+0x32a>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	2b05      	cmp	r3, #5
 8004622:	d10c      	bne.n	800463e <HAL_RCC_OscConfig+0x312>
 8004624:	4b77      	ldr	r3, [pc, #476]	; (8004804 <HAL_RCC_OscConfig+0x4d8>)
 8004626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004628:	4a76      	ldr	r2, [pc, #472]	; (8004804 <HAL_RCC_OscConfig+0x4d8>)
 800462a:	f043 0304 	orr.w	r3, r3, #4
 800462e:	6713      	str	r3, [r2, #112]	; 0x70
 8004630:	4b74      	ldr	r3, [pc, #464]	; (8004804 <HAL_RCC_OscConfig+0x4d8>)
 8004632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004634:	4a73      	ldr	r2, [pc, #460]	; (8004804 <HAL_RCC_OscConfig+0x4d8>)
 8004636:	f043 0301 	orr.w	r3, r3, #1
 800463a:	6713      	str	r3, [r2, #112]	; 0x70
 800463c:	e00b      	b.n	8004656 <HAL_RCC_OscConfig+0x32a>
 800463e:	4b71      	ldr	r3, [pc, #452]	; (8004804 <HAL_RCC_OscConfig+0x4d8>)
 8004640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004642:	4a70      	ldr	r2, [pc, #448]	; (8004804 <HAL_RCC_OscConfig+0x4d8>)
 8004644:	f023 0301 	bic.w	r3, r3, #1
 8004648:	6713      	str	r3, [r2, #112]	; 0x70
 800464a:	4b6e      	ldr	r3, [pc, #440]	; (8004804 <HAL_RCC_OscConfig+0x4d8>)
 800464c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464e:	4a6d      	ldr	r2, [pc, #436]	; (8004804 <HAL_RCC_OscConfig+0x4d8>)
 8004650:	f023 0304 	bic.w	r3, r3, #4
 8004654:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d015      	beq.n	800468a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465e:	f7fd f91b 	bl	8001898 <HAL_GetTick>
 8004662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004664:	e00a      	b.n	800467c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004666:	f7fd f917 	bl	8001898 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	f241 3288 	movw	r2, #5000	; 0x1388
 8004674:	4293      	cmp	r3, r2
 8004676:	d901      	bls.n	800467c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e0bc      	b.n	80047f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800467c:	4b61      	ldr	r3, [pc, #388]	; (8004804 <HAL_RCC_OscConfig+0x4d8>)
 800467e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0ee      	beq.n	8004666 <HAL_RCC_OscConfig+0x33a>
 8004688:	e014      	b.n	80046b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800468a:	f7fd f905 	bl	8001898 <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004690:	e00a      	b.n	80046a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004692:	f7fd f901 	bl	8001898 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e0a6      	b.n	80047f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046a8:	4b56      	ldr	r3, [pc, #344]	; (8004804 <HAL_RCC_OscConfig+0x4d8>)
 80046aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1ee      	bne.n	8004692 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046b4:	7dfb      	ldrb	r3, [r7, #23]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d105      	bne.n	80046c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ba:	4b52      	ldr	r3, [pc, #328]	; (8004804 <HAL_RCC_OscConfig+0x4d8>)
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	4a51      	ldr	r2, [pc, #324]	; (8004804 <HAL_RCC_OscConfig+0x4d8>)
 80046c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 8092 	beq.w	80047f4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046d0:	4b4c      	ldr	r3, [pc, #304]	; (8004804 <HAL_RCC_OscConfig+0x4d8>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f003 030c 	and.w	r3, r3, #12
 80046d8:	2b08      	cmp	r3, #8
 80046da:	d05c      	beq.n	8004796 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d141      	bne.n	8004768 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046e4:	4b48      	ldr	r3, [pc, #288]	; (8004808 <HAL_RCC_OscConfig+0x4dc>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ea:	f7fd f8d5 	bl	8001898 <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046f2:	f7fd f8d1 	bl	8001898 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e078      	b.n	80047f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004704:	4b3f      	ldr	r3, [pc, #252]	; (8004804 <HAL_RCC_OscConfig+0x4d8>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1f0      	bne.n	80046f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	69da      	ldr	r2, [r3, #28]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	431a      	orrs	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471e:	019b      	lsls	r3, r3, #6
 8004720:	431a      	orrs	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004726:	085b      	lsrs	r3, r3, #1
 8004728:	3b01      	subs	r3, #1
 800472a:	041b      	lsls	r3, r3, #16
 800472c:	431a      	orrs	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004732:	061b      	lsls	r3, r3, #24
 8004734:	4933      	ldr	r1, [pc, #204]	; (8004804 <HAL_RCC_OscConfig+0x4d8>)
 8004736:	4313      	orrs	r3, r2
 8004738:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800473a:	4b33      	ldr	r3, [pc, #204]	; (8004808 <HAL_RCC_OscConfig+0x4dc>)
 800473c:	2201      	movs	r2, #1
 800473e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004740:	f7fd f8aa 	bl	8001898 <HAL_GetTick>
 8004744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004746:	e008      	b.n	800475a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004748:	f7fd f8a6 	bl	8001898 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b02      	cmp	r3, #2
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e04d      	b.n	80047f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800475a:	4b2a      	ldr	r3, [pc, #168]	; (8004804 <HAL_RCC_OscConfig+0x4d8>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d0f0      	beq.n	8004748 <HAL_RCC_OscConfig+0x41c>
 8004766:	e045      	b.n	80047f4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004768:	4b27      	ldr	r3, [pc, #156]	; (8004808 <HAL_RCC_OscConfig+0x4dc>)
 800476a:	2200      	movs	r2, #0
 800476c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800476e:	f7fd f893 	bl	8001898 <HAL_GetTick>
 8004772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004774:	e008      	b.n	8004788 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004776:	f7fd f88f 	bl	8001898 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e036      	b.n	80047f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004788:	4b1e      	ldr	r3, [pc, #120]	; (8004804 <HAL_RCC_OscConfig+0x4d8>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1f0      	bne.n	8004776 <HAL_RCC_OscConfig+0x44a>
 8004794:	e02e      	b.n	80047f4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d101      	bne.n	80047a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e029      	b.n	80047f6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047a2:	4b18      	ldr	r3, [pc, #96]	; (8004804 <HAL_RCC_OscConfig+0x4d8>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d11c      	bne.n	80047f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d115      	bne.n	80047f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047ca:	4013      	ands	r3, r2
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d10d      	bne.n	80047f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80047de:	429a      	cmp	r2, r3
 80047e0:	d106      	bne.n	80047f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d001      	beq.n	80047f4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e000      	b.n	80047f6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	40007000 	.word	0x40007000
 8004804:	40023800 	.word	0x40023800
 8004808:	42470060 	.word	0x42470060

0800480c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e0cc      	b.n	80049ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004820:	4b68      	ldr	r3, [pc, #416]	; (80049c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 030f 	and.w	r3, r3, #15
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	429a      	cmp	r2, r3
 800482c:	d90c      	bls.n	8004848 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800482e:	4b65      	ldr	r3, [pc, #404]	; (80049c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	b2d2      	uxtb	r2, r2
 8004834:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004836:	4b63      	ldr	r3, [pc, #396]	; (80049c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 030f 	and.w	r3, r3, #15
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	429a      	cmp	r2, r3
 8004842:	d001      	beq.n	8004848 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e0b8      	b.n	80049ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d020      	beq.n	8004896 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b00      	cmp	r3, #0
 800485e:	d005      	beq.n	800486c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004860:	4b59      	ldr	r3, [pc, #356]	; (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	4a58      	ldr	r2, [pc, #352]	; (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004866:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800486a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0308 	and.w	r3, r3, #8
 8004874:	2b00      	cmp	r3, #0
 8004876:	d005      	beq.n	8004884 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004878:	4b53      	ldr	r3, [pc, #332]	; (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	4a52      	ldr	r2, [pc, #328]	; (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 800487e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004882:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004884:	4b50      	ldr	r3, [pc, #320]	; (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	494d      	ldr	r1, [pc, #308]	; (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004892:	4313      	orrs	r3, r2
 8004894:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d044      	beq.n	800492c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d107      	bne.n	80048ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048aa:	4b47      	ldr	r3, [pc, #284]	; (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d119      	bne.n	80048ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e07f      	b.n	80049ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d003      	beq.n	80048ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048c6:	2b03      	cmp	r3, #3
 80048c8:	d107      	bne.n	80048da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ca:	4b3f      	ldr	r3, [pc, #252]	; (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d109      	bne.n	80048ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e06f      	b.n	80049ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048da:	4b3b      	ldr	r3, [pc, #236]	; (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e067      	b.n	80049ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048ea:	4b37      	ldr	r3, [pc, #220]	; (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f023 0203 	bic.w	r2, r3, #3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	4934      	ldr	r1, [pc, #208]	; (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048fc:	f7fc ffcc 	bl	8001898 <HAL_GetTick>
 8004900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004902:	e00a      	b.n	800491a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004904:	f7fc ffc8 	bl	8001898 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004912:	4293      	cmp	r3, r2
 8004914:	d901      	bls.n	800491a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e04f      	b.n	80049ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800491a:	4b2b      	ldr	r3, [pc, #172]	; (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 020c 	and.w	r2, r3, #12
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	429a      	cmp	r2, r3
 800492a:	d1eb      	bne.n	8004904 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800492c:	4b25      	ldr	r3, [pc, #148]	; (80049c4 <HAL_RCC_ClockConfig+0x1b8>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 030f 	and.w	r3, r3, #15
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	429a      	cmp	r2, r3
 8004938:	d20c      	bcs.n	8004954 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800493a:	4b22      	ldr	r3, [pc, #136]	; (80049c4 <HAL_RCC_ClockConfig+0x1b8>)
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	b2d2      	uxtb	r2, r2
 8004940:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004942:	4b20      	ldr	r3, [pc, #128]	; (80049c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 030f 	and.w	r3, r3, #15
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	429a      	cmp	r2, r3
 800494e:	d001      	beq.n	8004954 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e032      	b.n	80049ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b00      	cmp	r3, #0
 800495e:	d008      	beq.n	8004972 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004960:	4b19      	ldr	r3, [pc, #100]	; (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	4916      	ldr	r1, [pc, #88]	; (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 800496e:	4313      	orrs	r3, r2
 8004970:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b00      	cmp	r3, #0
 800497c:	d009      	beq.n	8004992 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800497e:	4b12      	ldr	r3, [pc, #72]	; (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	490e      	ldr	r1, [pc, #56]	; (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 800498e:	4313      	orrs	r3, r2
 8004990:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004992:	f000 f821 	bl	80049d8 <HAL_RCC_GetSysClockFreq>
 8004996:	4601      	mov	r1, r0
 8004998:	4b0b      	ldr	r3, [pc, #44]	; (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	091b      	lsrs	r3, r3, #4
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	4a0a      	ldr	r2, [pc, #40]	; (80049cc <HAL_RCC_ClockConfig+0x1c0>)
 80049a4:	5cd3      	ldrb	r3, [r2, r3]
 80049a6:	fa21 f303 	lsr.w	r3, r1, r3
 80049aa:	4a09      	ldr	r2, [pc, #36]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 80049ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049ae:	4b09      	ldr	r3, [pc, #36]	; (80049d4 <HAL_RCC_ClockConfig+0x1c8>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fc ff2c 	bl	8001810 <HAL_InitTick>

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	40023c00 	.word	0x40023c00
 80049c8:	40023800 	.word	0x40023800
 80049cc:	08009e94 	.word	0x08009e94
 80049d0:	2000000c 	.word	0x2000000c
 80049d4:	20000010 	.word	0x20000010

080049d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049de:	2300      	movs	r3, #0
 80049e0:	607b      	str	r3, [r7, #4]
 80049e2:	2300      	movs	r3, #0
 80049e4:	60fb      	str	r3, [r7, #12]
 80049e6:	2300      	movs	r3, #0
 80049e8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049ee:	4b63      	ldr	r3, [pc, #396]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 030c 	and.w	r3, r3, #12
 80049f6:	2b04      	cmp	r3, #4
 80049f8:	d007      	beq.n	8004a0a <HAL_RCC_GetSysClockFreq+0x32>
 80049fa:	2b08      	cmp	r3, #8
 80049fc:	d008      	beq.n	8004a10 <HAL_RCC_GetSysClockFreq+0x38>
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	f040 80b4 	bne.w	8004b6c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a04:	4b5e      	ldr	r3, [pc, #376]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004a06:	60bb      	str	r3, [r7, #8]
       break;
 8004a08:	e0b3      	b.n	8004b72 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a0a:	4b5e      	ldr	r3, [pc, #376]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004a0c:	60bb      	str	r3, [r7, #8]
      break;
 8004a0e:	e0b0      	b.n	8004b72 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a10:	4b5a      	ldr	r3, [pc, #360]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a18:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a1a:	4b58      	ldr	r3, [pc, #352]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d04a      	beq.n	8004abc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a26:	4b55      	ldr	r3, [pc, #340]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	099b      	lsrs	r3, r3, #6
 8004a2c:	f04f 0400 	mov.w	r4, #0
 8004a30:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a34:	f04f 0200 	mov.w	r2, #0
 8004a38:	ea03 0501 	and.w	r5, r3, r1
 8004a3c:	ea04 0602 	and.w	r6, r4, r2
 8004a40:	4629      	mov	r1, r5
 8004a42:	4632      	mov	r2, r6
 8004a44:	f04f 0300 	mov.w	r3, #0
 8004a48:	f04f 0400 	mov.w	r4, #0
 8004a4c:	0154      	lsls	r4, r2, #5
 8004a4e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a52:	014b      	lsls	r3, r1, #5
 8004a54:	4619      	mov	r1, r3
 8004a56:	4622      	mov	r2, r4
 8004a58:	1b49      	subs	r1, r1, r5
 8004a5a:	eb62 0206 	sbc.w	r2, r2, r6
 8004a5e:	f04f 0300 	mov.w	r3, #0
 8004a62:	f04f 0400 	mov.w	r4, #0
 8004a66:	0194      	lsls	r4, r2, #6
 8004a68:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a6c:	018b      	lsls	r3, r1, #6
 8004a6e:	1a5b      	subs	r3, r3, r1
 8004a70:	eb64 0402 	sbc.w	r4, r4, r2
 8004a74:	f04f 0100 	mov.w	r1, #0
 8004a78:	f04f 0200 	mov.w	r2, #0
 8004a7c:	00e2      	lsls	r2, r4, #3
 8004a7e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a82:	00d9      	lsls	r1, r3, #3
 8004a84:	460b      	mov	r3, r1
 8004a86:	4614      	mov	r4, r2
 8004a88:	195b      	adds	r3, r3, r5
 8004a8a:	eb44 0406 	adc.w	r4, r4, r6
 8004a8e:	f04f 0100 	mov.w	r1, #0
 8004a92:	f04f 0200 	mov.w	r2, #0
 8004a96:	0262      	lsls	r2, r4, #9
 8004a98:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004a9c:	0259      	lsls	r1, r3, #9
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4614      	mov	r4, r2
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	4621      	mov	r1, r4
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f04f 0400 	mov.w	r4, #0
 8004aac:	461a      	mov	r2, r3
 8004aae:	4623      	mov	r3, r4
 8004ab0:	f7fb fbf6 	bl	80002a0 <__aeabi_uldivmod>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	460c      	mov	r4, r1
 8004ab8:	60fb      	str	r3, [r7, #12]
 8004aba:	e049      	b.n	8004b50 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004abc:	4b2f      	ldr	r3, [pc, #188]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	099b      	lsrs	r3, r3, #6
 8004ac2:	f04f 0400 	mov.w	r4, #0
 8004ac6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004aca:	f04f 0200 	mov.w	r2, #0
 8004ace:	ea03 0501 	and.w	r5, r3, r1
 8004ad2:	ea04 0602 	and.w	r6, r4, r2
 8004ad6:	4629      	mov	r1, r5
 8004ad8:	4632      	mov	r2, r6
 8004ada:	f04f 0300 	mov.w	r3, #0
 8004ade:	f04f 0400 	mov.w	r4, #0
 8004ae2:	0154      	lsls	r4, r2, #5
 8004ae4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004ae8:	014b      	lsls	r3, r1, #5
 8004aea:	4619      	mov	r1, r3
 8004aec:	4622      	mov	r2, r4
 8004aee:	1b49      	subs	r1, r1, r5
 8004af0:	eb62 0206 	sbc.w	r2, r2, r6
 8004af4:	f04f 0300 	mov.w	r3, #0
 8004af8:	f04f 0400 	mov.w	r4, #0
 8004afc:	0194      	lsls	r4, r2, #6
 8004afe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b02:	018b      	lsls	r3, r1, #6
 8004b04:	1a5b      	subs	r3, r3, r1
 8004b06:	eb64 0402 	sbc.w	r4, r4, r2
 8004b0a:	f04f 0100 	mov.w	r1, #0
 8004b0e:	f04f 0200 	mov.w	r2, #0
 8004b12:	00e2      	lsls	r2, r4, #3
 8004b14:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b18:	00d9      	lsls	r1, r3, #3
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	4614      	mov	r4, r2
 8004b1e:	195b      	adds	r3, r3, r5
 8004b20:	eb44 0406 	adc.w	r4, r4, r6
 8004b24:	f04f 0100 	mov.w	r1, #0
 8004b28:	f04f 0200 	mov.w	r2, #0
 8004b2c:	02a2      	lsls	r2, r4, #10
 8004b2e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004b32:	0299      	lsls	r1, r3, #10
 8004b34:	460b      	mov	r3, r1
 8004b36:	4614      	mov	r4, r2
 8004b38:	4618      	mov	r0, r3
 8004b3a:	4621      	mov	r1, r4
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f04f 0400 	mov.w	r4, #0
 8004b42:	461a      	mov	r2, r3
 8004b44:	4623      	mov	r3, r4
 8004b46:	f7fb fbab 	bl	80002a0 <__aeabi_uldivmod>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	460c      	mov	r4, r1
 8004b4e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b50:	4b0a      	ldr	r3, [pc, #40]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	0c1b      	lsrs	r3, r3, #16
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b68:	60bb      	str	r3, [r7, #8]
      break;
 8004b6a:	e002      	b.n	8004b72 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b6c:	4b04      	ldr	r3, [pc, #16]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004b6e:	60bb      	str	r3, [r7, #8]
      break;
 8004b70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b72:	68bb      	ldr	r3, [r7, #8]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3714      	adds	r7, #20
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b7c:	40023800 	.word	0x40023800
 8004b80:	00f42400 	.word	0x00f42400
 8004b84:	007a1200 	.word	0x007a1200

08004b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b8c:	4b03      	ldr	r3, [pc, #12]	; (8004b9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	2000000c 	.word	0x2000000c

08004ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ba4:	f7ff fff0 	bl	8004b88 <HAL_RCC_GetHCLKFreq>
 8004ba8:	4601      	mov	r1, r0
 8004baa:	4b05      	ldr	r3, [pc, #20]	; (8004bc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	0a9b      	lsrs	r3, r3, #10
 8004bb0:	f003 0307 	and.w	r3, r3, #7
 8004bb4:	4a03      	ldr	r2, [pc, #12]	; (8004bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bb6:	5cd3      	ldrb	r3, [r2, r3]
 8004bb8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	40023800 	.word	0x40023800
 8004bc4:	08009ea4 	.word	0x08009ea4

08004bc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004bcc:	f7ff ffdc 	bl	8004b88 <HAL_RCC_GetHCLKFreq>
 8004bd0:	4601      	mov	r1, r0
 8004bd2:	4b05      	ldr	r3, [pc, #20]	; (8004be8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	0b5b      	lsrs	r3, r3, #13
 8004bd8:	f003 0307 	and.w	r3, r3, #7
 8004bdc:	4a03      	ldr	r2, [pc, #12]	; (8004bec <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bde:	5cd3      	ldrb	r3, [r2, r3]
 8004be0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	40023800 	.word	0x40023800
 8004bec:	08009ea4 	.word	0x08009ea4

08004bf0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d105      	bne.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d035      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c18:	4b62      	ldr	r3, [pc, #392]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c1e:	f7fc fe3b 	bl	8001898 <HAL_GetTick>
 8004c22:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c24:	e008      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c26:	f7fc fe37 	bl	8001898 <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d901      	bls.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e0b0      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c38:	4b5b      	ldr	r3, [pc, #364]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1f0      	bne.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	019a      	lsls	r2, r3, #6
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	071b      	lsls	r3, r3, #28
 8004c50:	4955      	ldr	r1, [pc, #340]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c58:	4b52      	ldr	r3, [pc, #328]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c5e:	f7fc fe1b 	bl	8001898 <HAL_GetTick>
 8004c62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c64:	e008      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c66:	f7fc fe17 	bl	8001898 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d901      	bls.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e090      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c78:	4b4b      	ldr	r3, [pc, #300]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0f0      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 8083 	beq.w	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c92:	2300      	movs	r3, #0
 8004c94:	60fb      	str	r3, [r7, #12]
 8004c96:	4b44      	ldr	r3, [pc, #272]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	4a43      	ldr	r2, [pc, #268]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ca2:	4b41      	ldr	r3, [pc, #260]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004cae:	4b3f      	ldr	r3, [pc, #252]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a3e      	ldr	r2, [pc, #248]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cb8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004cba:	f7fc fded 	bl	8001898 <HAL_GetTick>
 8004cbe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004cc0:	e008      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004cc2:	f7fc fde9 	bl	8001898 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e062      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004cd4:	4b35      	ldr	r3, [pc, #212]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0f0      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ce0:	4b31      	ldr	r3, [pc, #196]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ce8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d02f      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d028      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cfe:	4b2a      	ldr	r3, [pc, #168]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d06:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d08:	4b29      	ldr	r3, [pc, #164]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d0e:	4b28      	ldr	r3, [pc, #160]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d14:	4a24      	ldr	r2, [pc, #144]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d1a:	4b23      	ldr	r3, [pc, #140]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d114      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d26:	f7fc fdb7 	bl	8001898 <HAL_GetTick>
 8004d2a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d2c:	e00a      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d2e:	f7fc fdb3 	bl	8001898 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e02a      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d44:	4b18      	ldr	r3, [pc, #96]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d0ee      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d5c:	d10d      	bne.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004d5e:	4b12      	ldr	r3, [pc, #72]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d72:	490d      	ldr	r1, [pc, #52]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	608b      	str	r3, [r1, #8]
 8004d78:	e005      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004d7a:	4b0b      	ldr	r3, [pc, #44]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	4a0a      	ldr	r2, [pc, #40]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d80:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d84:	6093      	str	r3, [r2, #8]
 8004d86:	4b08      	ldr	r3, [pc, #32]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d92:	4905      	ldr	r1, [pc, #20]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3718      	adds	r7, #24
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	42470068 	.word	0x42470068
 8004da8:	40023800 	.word	0x40023800
 8004dac:	40007000 	.word	0x40007000
 8004db0:	42470e40 	.word	0x42470e40

08004db4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b087      	sub	sp, #28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d13d      	bne.n	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004dd2:	4b22      	ldr	r3, [pc, #136]	; (8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dda:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d004      	beq.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d12f      	bne.n	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004de6:	4b1e      	ldr	r3, [pc, #120]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004de8:	617b      	str	r3, [r7, #20]
          break;
 8004dea:	e02f      	b.n	8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004dec:	4b1b      	ldr	r3, [pc, #108]	; (8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004df4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004df8:	d108      	bne.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004dfa:	4b18      	ldr	r3, [pc, #96]	; (8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e02:	4a18      	ldr	r2, [pc, #96]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e08:	613b      	str	r3, [r7, #16]
 8004e0a:	e007      	b.n	8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e0c:	4b13      	ldr	r3, [pc, #76]	; (8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e14:	4a14      	ldr	r2, [pc, #80]	; (8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e1a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004e1c:	4b0f      	ldr	r3, [pc, #60]	; (8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e22:	099b      	lsrs	r3, r3, #6
 8004e24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	fb02 f303 	mul.w	r3, r2, r3
 8004e2e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004e30:	4b0a      	ldr	r3, [pc, #40]	; (8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e36:	0f1b      	lsrs	r3, r3, #28
 8004e38:	f003 0307 	and.w	r3, r3, #7
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e42:	617b      	str	r3, [r7, #20]
          break;
 8004e44:	e002      	b.n	8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004e46:	2300      	movs	r3, #0
 8004e48:	617b      	str	r3, [r7, #20]
          break;
 8004e4a:	bf00      	nop
        }
      }
      break;
 8004e4c:	bf00      	nop
    }
  }
  return frequency;
 8004e4e:	697b      	ldr	r3, [r7, #20]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	371c      	adds	r7, #28
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr
 8004e5c:	40023800 	.word	0x40023800
 8004e60:	00bb8000 	.word	0x00bb8000
 8004e64:	007a1200 	.word	0x007a1200
 8004e68:	00f42400 	.word	0x00f42400

08004e6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e056      	b.n	8004f2c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d106      	bne.n	8004e9e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f7fc fa39 	bl	8001310 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eb4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	69db      	ldr	r3, [r3, #28]
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	ea42 0103 	orr.w	r1, r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	0c1b      	lsrs	r3, r3, #16
 8004efc:	f003 0104 	and.w	r1, r3, #4
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	69da      	ldr	r2, [r3, #28]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f1a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3708      	adds	r7, #8
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e01d      	b.n	8004f82 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d106      	bne.n	8004f60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f7fc fa20 	bl	80013a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2202      	movs	r2, #2
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3304      	adds	r3, #4
 8004f70:	4619      	mov	r1, r3
 8004f72:	4610      	mov	r0, r2
 8004f74:	f000 fa14 	bl	80053a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b085      	sub	sp, #20
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68da      	ldr	r2, [r3, #12]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f042 0201 	orr.w	r2, r2, #1
 8004fa0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f003 0307 	and.w	r3, r3, #7
 8004fac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2b06      	cmp	r3, #6
 8004fb2:	d007      	beq.n	8004fc4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f042 0201 	orr.w	r2, r2, #1
 8004fc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr

08004fd2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b082      	sub	sp, #8
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	f003 0302 	and.w	r3, r3, #2
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d122      	bne.n	800502e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d11b      	bne.n	800502e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f06f 0202 	mvn.w	r2, #2
 8004ffe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	f003 0303 	and.w	r3, r3, #3
 8005010:	2b00      	cmp	r3, #0
 8005012:	d003      	beq.n	800501c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 f9a5 	bl	8005364 <HAL_TIM_IC_CaptureCallback>
 800501a:	e005      	b.n	8005028 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 f997 	bl	8005350 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 f9a8 	bl	8005378 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	f003 0304 	and.w	r3, r3, #4
 8005038:	2b04      	cmp	r3, #4
 800503a:	d122      	bne.n	8005082 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	f003 0304 	and.w	r3, r3, #4
 8005046:	2b04      	cmp	r3, #4
 8005048:	d11b      	bne.n	8005082 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f06f 0204 	mvn.w	r2, #4
 8005052:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005064:	2b00      	cmp	r3, #0
 8005066:	d003      	beq.n	8005070 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 f97b 	bl	8005364 <HAL_TIM_IC_CaptureCallback>
 800506e:	e005      	b.n	800507c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f96d 	bl	8005350 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f97e 	bl	8005378 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	f003 0308 	and.w	r3, r3, #8
 800508c:	2b08      	cmp	r3, #8
 800508e:	d122      	bne.n	80050d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	f003 0308 	and.w	r3, r3, #8
 800509a:	2b08      	cmp	r3, #8
 800509c:	d11b      	bne.n	80050d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f06f 0208 	mvn.w	r2, #8
 80050a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2204      	movs	r2, #4
 80050ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	69db      	ldr	r3, [r3, #28]
 80050b4:	f003 0303 	and.w	r3, r3, #3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d003      	beq.n	80050c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 f951 	bl	8005364 <HAL_TIM_IC_CaptureCallback>
 80050c2:	e005      	b.n	80050d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f943 	bl	8005350 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f954 	bl	8005378 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	f003 0310 	and.w	r3, r3, #16
 80050e0:	2b10      	cmp	r3, #16
 80050e2:	d122      	bne.n	800512a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	f003 0310 	and.w	r3, r3, #16
 80050ee:	2b10      	cmp	r3, #16
 80050f0:	d11b      	bne.n	800512a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f06f 0210 	mvn.w	r2, #16
 80050fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2208      	movs	r2, #8
 8005100:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	69db      	ldr	r3, [r3, #28]
 8005108:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800510c:	2b00      	cmp	r3, #0
 800510e:	d003      	beq.n	8005118 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 f927 	bl	8005364 <HAL_TIM_IC_CaptureCallback>
 8005116:	e005      	b.n	8005124 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 f919 	bl	8005350 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f92a 	bl	8005378 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	2b01      	cmp	r3, #1
 8005136:	d10e      	bne.n	8005156 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b01      	cmp	r3, #1
 8005144:	d107      	bne.n	8005156 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f06f 0201 	mvn.w	r2, #1
 800514e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f7fb fb99 	bl	8000888 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005160:	2b80      	cmp	r3, #128	; 0x80
 8005162:	d10e      	bne.n	8005182 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800516e:	2b80      	cmp	r3, #128	; 0x80
 8005170:	d107      	bne.n	8005182 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800517a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 facf 	bl	8005720 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800518c:	2b40      	cmp	r3, #64	; 0x40
 800518e:	d10e      	bne.n	80051ae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800519a:	2b40      	cmp	r3, #64	; 0x40
 800519c:	d107      	bne.n	80051ae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f8ef 	bl	800538c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	f003 0320 	and.w	r3, r3, #32
 80051b8:	2b20      	cmp	r3, #32
 80051ba:	d10e      	bne.n	80051da <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	f003 0320 	and.w	r3, r3, #32
 80051c6:	2b20      	cmp	r3, #32
 80051c8:	d107      	bne.n	80051da <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f06f 0220 	mvn.w	r2, #32
 80051d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 fa99 	bl	800570c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051da:	bf00      	nop
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b084      	sub	sp, #16
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
 80051ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d101      	bne.n	80051fa <HAL_TIM_ConfigClockSource+0x18>
 80051f6:	2302      	movs	r3, #2
 80051f8:	e0a6      	b.n	8005348 <HAL_TIM_ConfigClockSource+0x166>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2202      	movs	r2, #2
 8005206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005218:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005220:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2b40      	cmp	r3, #64	; 0x40
 8005230:	d067      	beq.n	8005302 <HAL_TIM_ConfigClockSource+0x120>
 8005232:	2b40      	cmp	r3, #64	; 0x40
 8005234:	d80b      	bhi.n	800524e <HAL_TIM_ConfigClockSource+0x6c>
 8005236:	2b10      	cmp	r3, #16
 8005238:	d073      	beq.n	8005322 <HAL_TIM_ConfigClockSource+0x140>
 800523a:	2b10      	cmp	r3, #16
 800523c:	d802      	bhi.n	8005244 <HAL_TIM_ConfigClockSource+0x62>
 800523e:	2b00      	cmp	r3, #0
 8005240:	d06f      	beq.n	8005322 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005242:	e078      	b.n	8005336 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005244:	2b20      	cmp	r3, #32
 8005246:	d06c      	beq.n	8005322 <HAL_TIM_ConfigClockSource+0x140>
 8005248:	2b30      	cmp	r3, #48	; 0x30
 800524a:	d06a      	beq.n	8005322 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800524c:	e073      	b.n	8005336 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800524e:	2b70      	cmp	r3, #112	; 0x70
 8005250:	d00d      	beq.n	800526e <HAL_TIM_ConfigClockSource+0x8c>
 8005252:	2b70      	cmp	r3, #112	; 0x70
 8005254:	d804      	bhi.n	8005260 <HAL_TIM_ConfigClockSource+0x7e>
 8005256:	2b50      	cmp	r3, #80	; 0x50
 8005258:	d033      	beq.n	80052c2 <HAL_TIM_ConfigClockSource+0xe0>
 800525a:	2b60      	cmp	r3, #96	; 0x60
 800525c:	d041      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800525e:	e06a      	b.n	8005336 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005264:	d066      	beq.n	8005334 <HAL_TIM_ConfigClockSource+0x152>
 8005266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800526a:	d017      	beq.n	800529c <HAL_TIM_ConfigClockSource+0xba>
      break;
 800526c:	e063      	b.n	8005336 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6818      	ldr	r0, [r3, #0]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	6899      	ldr	r1, [r3, #8]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	f000 f9a9 	bl	80055d4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005290:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	609a      	str	r2, [r3, #8]
      break;
 800529a:	e04c      	b.n	8005336 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6818      	ldr	r0, [r3, #0]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	6899      	ldr	r1, [r3, #8]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f000 f992 	bl	80055d4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689a      	ldr	r2, [r3, #8]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052be:	609a      	str	r2, [r3, #8]
      break;
 80052c0:	e039      	b.n	8005336 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6818      	ldr	r0, [r3, #0]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	6859      	ldr	r1, [r3, #4]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	461a      	mov	r2, r3
 80052d0:	f000 f906 	bl	80054e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2150      	movs	r1, #80	; 0x50
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 f95f 	bl	800559e <TIM_ITRx_SetConfig>
      break;
 80052e0:	e029      	b.n	8005336 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6818      	ldr	r0, [r3, #0]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	6859      	ldr	r1, [r3, #4]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	461a      	mov	r2, r3
 80052f0:	f000 f925 	bl	800553e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2160      	movs	r1, #96	; 0x60
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 f94f 	bl	800559e <TIM_ITRx_SetConfig>
      break;
 8005300:	e019      	b.n	8005336 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6818      	ldr	r0, [r3, #0]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	6859      	ldr	r1, [r3, #4]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	461a      	mov	r2, r3
 8005310:	f000 f8e6 	bl	80054e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2140      	movs	r1, #64	; 0x40
 800531a:	4618      	mov	r0, r3
 800531c:	f000 f93f 	bl	800559e <TIM_ITRx_SetConfig>
      break;
 8005320:	e009      	b.n	8005336 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4619      	mov	r1, r3
 800532c:	4610      	mov	r0, r2
 800532e:	f000 f936 	bl	800559e <TIM_ITRx_SetConfig>
      break;
 8005332:	e000      	b.n	8005336 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005334:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3710      	adds	r7, #16
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005380:	bf00      	nop
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a40      	ldr	r2, [pc, #256]	; (80054b4 <TIM_Base_SetConfig+0x114>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d013      	beq.n	80053e0 <TIM_Base_SetConfig+0x40>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053be:	d00f      	beq.n	80053e0 <TIM_Base_SetConfig+0x40>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a3d      	ldr	r2, [pc, #244]	; (80054b8 <TIM_Base_SetConfig+0x118>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d00b      	beq.n	80053e0 <TIM_Base_SetConfig+0x40>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a3c      	ldr	r2, [pc, #240]	; (80054bc <TIM_Base_SetConfig+0x11c>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d007      	beq.n	80053e0 <TIM_Base_SetConfig+0x40>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a3b      	ldr	r2, [pc, #236]	; (80054c0 <TIM_Base_SetConfig+0x120>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d003      	beq.n	80053e0 <TIM_Base_SetConfig+0x40>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a3a      	ldr	r2, [pc, #232]	; (80054c4 <TIM_Base_SetConfig+0x124>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d108      	bne.n	80053f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a2f      	ldr	r2, [pc, #188]	; (80054b4 <TIM_Base_SetConfig+0x114>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d02b      	beq.n	8005452 <TIM_Base_SetConfig+0xb2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005400:	d027      	beq.n	8005452 <TIM_Base_SetConfig+0xb2>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a2c      	ldr	r2, [pc, #176]	; (80054b8 <TIM_Base_SetConfig+0x118>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d023      	beq.n	8005452 <TIM_Base_SetConfig+0xb2>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a2b      	ldr	r2, [pc, #172]	; (80054bc <TIM_Base_SetConfig+0x11c>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d01f      	beq.n	8005452 <TIM_Base_SetConfig+0xb2>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a2a      	ldr	r2, [pc, #168]	; (80054c0 <TIM_Base_SetConfig+0x120>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d01b      	beq.n	8005452 <TIM_Base_SetConfig+0xb2>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a29      	ldr	r2, [pc, #164]	; (80054c4 <TIM_Base_SetConfig+0x124>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d017      	beq.n	8005452 <TIM_Base_SetConfig+0xb2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a28      	ldr	r2, [pc, #160]	; (80054c8 <TIM_Base_SetConfig+0x128>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d013      	beq.n	8005452 <TIM_Base_SetConfig+0xb2>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a27      	ldr	r2, [pc, #156]	; (80054cc <TIM_Base_SetConfig+0x12c>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d00f      	beq.n	8005452 <TIM_Base_SetConfig+0xb2>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a26      	ldr	r2, [pc, #152]	; (80054d0 <TIM_Base_SetConfig+0x130>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d00b      	beq.n	8005452 <TIM_Base_SetConfig+0xb2>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a25      	ldr	r2, [pc, #148]	; (80054d4 <TIM_Base_SetConfig+0x134>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d007      	beq.n	8005452 <TIM_Base_SetConfig+0xb2>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a24      	ldr	r2, [pc, #144]	; (80054d8 <TIM_Base_SetConfig+0x138>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d003      	beq.n	8005452 <TIM_Base_SetConfig+0xb2>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a23      	ldr	r2, [pc, #140]	; (80054dc <TIM_Base_SetConfig+0x13c>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d108      	bne.n	8005464 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005458:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	4313      	orrs	r3, r2
 8005462:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	4313      	orrs	r3, r2
 8005470:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	689a      	ldr	r2, [r3, #8]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a0a      	ldr	r2, [pc, #40]	; (80054b4 <TIM_Base_SetConfig+0x114>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d003      	beq.n	8005498 <TIM_Base_SetConfig+0xf8>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a0c      	ldr	r2, [pc, #48]	; (80054c4 <TIM_Base_SetConfig+0x124>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d103      	bne.n	80054a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	691a      	ldr	r2, [r3, #16]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	615a      	str	r2, [r3, #20]
}
 80054a6:	bf00      	nop
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	40010000 	.word	0x40010000
 80054b8:	40000400 	.word	0x40000400
 80054bc:	40000800 	.word	0x40000800
 80054c0:	40000c00 	.word	0x40000c00
 80054c4:	40010400 	.word	0x40010400
 80054c8:	40014000 	.word	0x40014000
 80054cc:	40014400 	.word	0x40014400
 80054d0:	40014800 	.word	0x40014800
 80054d4:	40001800 	.word	0x40001800
 80054d8:	40001c00 	.word	0x40001c00
 80054dc:	40002000 	.word	0x40002000

080054e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	f023 0201 	bic.w	r2, r3, #1
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800550a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	011b      	lsls	r3, r3, #4
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	4313      	orrs	r3, r2
 8005514:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f023 030a 	bic.w	r3, r3, #10
 800551c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	4313      	orrs	r3, r2
 8005524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	621a      	str	r2, [r3, #32]
}
 8005532:	bf00      	nop
 8005534:	371c      	adds	r7, #28
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800553e:	b480      	push	{r7}
 8005540:	b087      	sub	sp, #28
 8005542:	af00      	add	r7, sp, #0
 8005544:	60f8      	str	r0, [r7, #12]
 8005546:	60b9      	str	r1, [r7, #8]
 8005548:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	f023 0210 	bic.w	r2, r3, #16
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005568:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	031b      	lsls	r3, r3, #12
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	4313      	orrs	r3, r2
 8005572:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800557a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	011b      	lsls	r3, r3, #4
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	4313      	orrs	r3, r2
 8005584:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	621a      	str	r2, [r3, #32]
}
 8005592:	bf00      	nop
 8005594:	371c      	adds	r7, #28
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr

0800559e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800559e:	b480      	push	{r7}
 80055a0:	b085      	sub	sp, #20
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
 80055a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055b6:	683a      	ldr	r2, [r7, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	f043 0307 	orr.w	r3, r3, #7
 80055c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	609a      	str	r2, [r3, #8]
}
 80055c8:	bf00      	nop
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
 80055e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	021a      	lsls	r2, r3, #8
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	431a      	orrs	r2, r3
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	4313      	orrs	r3, r2
 8005600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	609a      	str	r2, [r3, #8]
}
 8005608:	bf00      	nop
 800560a:	371c      	adds	r7, #28
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005624:	2b01      	cmp	r3, #1
 8005626:	d101      	bne.n	800562c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005628:	2302      	movs	r3, #2
 800562a:	e05a      	b.n	80056e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2202      	movs	r2, #2
 8005638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005652:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	4313      	orrs	r3, r2
 800565c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a21      	ldr	r2, [pc, #132]	; (80056f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d022      	beq.n	80056b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005678:	d01d      	beq.n	80056b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a1d      	ldr	r2, [pc, #116]	; (80056f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d018      	beq.n	80056b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a1b      	ldr	r2, [pc, #108]	; (80056f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d013      	beq.n	80056b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a1a      	ldr	r2, [pc, #104]	; (80056fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d00e      	beq.n	80056b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a18      	ldr	r2, [pc, #96]	; (8005700 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d009      	beq.n	80056b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a17      	ldr	r2, [pc, #92]	; (8005704 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d004      	beq.n	80056b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a15      	ldr	r2, [pc, #84]	; (8005708 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d10c      	bne.n	80056d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	40010000 	.word	0x40010000
 80056f4:	40000400 	.word	0x40000400
 80056f8:	40000800 	.word	0x40000800
 80056fc:	40000c00 	.word	0x40000c00
 8005700:	40010400 	.word	0x40010400
 8005704:	40014000 	.word	0x40014000
 8005708:	40001800 	.word	0x40001800

0800570c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e03f      	b.n	80057c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d106      	bne.n	8005760 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7fb fe7c 	bl	8001458 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2224      	movs	r2, #36	; 0x24
 8005764:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68da      	ldr	r2, [r3, #12]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005776:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 f9b1 	bl	8005ae0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	691a      	ldr	r2, [r3, #16]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800578c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	695a      	ldr	r2, [r3, #20]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800579c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68da      	ldr	r2, [r3, #12]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2220      	movs	r2, #32
 80057b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2220      	movs	r2, #32
 80057c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b088      	sub	sp, #32
 80057d2:	af02      	add	r7, sp, #8
 80057d4:	60f8      	str	r0, [r7, #12]
 80057d6:	60b9      	str	r1, [r7, #8]
 80057d8:	603b      	str	r3, [r7, #0]
 80057da:	4613      	mov	r3, r2
 80057dc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80057de:	2300      	movs	r3, #0
 80057e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b20      	cmp	r3, #32
 80057ec:	f040 8083 	bne.w	80058f6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d002      	beq.n	80057fc <HAL_UART_Transmit+0x2e>
 80057f6:	88fb      	ldrh	r3, [r7, #6]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e07b      	b.n	80058f8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005806:	2b01      	cmp	r3, #1
 8005808:	d101      	bne.n	800580e <HAL_UART_Transmit+0x40>
 800580a:	2302      	movs	r3, #2
 800580c:	e074      	b.n	80058f8 <HAL_UART_Transmit+0x12a>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2201      	movs	r2, #1
 8005812:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2221      	movs	r2, #33	; 0x21
 8005820:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005824:	f7fc f838 	bl	8001898 <HAL_GetTick>
 8005828:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	88fa      	ldrh	r2, [r7, #6]
 800582e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	88fa      	ldrh	r2, [r7, #6]
 8005834:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800583e:	e042      	b.n	80058c6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005844:	b29b      	uxth	r3, r3
 8005846:	3b01      	subs	r3, #1
 8005848:	b29a      	uxth	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005856:	d122      	bne.n	800589e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	9300      	str	r3, [sp, #0]
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	2200      	movs	r2, #0
 8005860:	2180      	movs	r1, #128	; 0x80
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f000 f8f2 	bl	8005a4c <UART_WaitOnFlagUntilTimeout>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e042      	b.n	80058f8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	461a      	mov	r2, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005884:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d103      	bne.n	8005896 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	3302      	adds	r3, #2
 8005892:	60bb      	str	r3, [r7, #8]
 8005894:	e017      	b.n	80058c6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	3301      	adds	r3, #1
 800589a:	60bb      	str	r3, [r7, #8]
 800589c:	e013      	b.n	80058c6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	2200      	movs	r2, #0
 80058a6:	2180      	movs	r1, #128	; 0x80
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 f8cf 	bl	8005a4c <UART_WaitOnFlagUntilTimeout>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d001      	beq.n	80058b8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e01f      	b.n	80058f8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	60ba      	str	r2, [r7, #8]
 80058be:	781a      	ldrb	r2, [r3, #0]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1b7      	bne.n	8005840 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	2200      	movs	r2, #0
 80058d8:	2140      	movs	r1, #64	; 0x40
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f000 f8b6 	bl	8005a4c <UART_WaitOnFlagUntilTimeout>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e006      	b.n	80058f8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2220      	movs	r2, #32
 80058ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80058f2:	2300      	movs	r3, #0
 80058f4:	e000      	b.n	80058f8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80058f6:	2302      	movs	r3, #2
  }
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3718      	adds	r7, #24
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b088      	sub	sp, #32
 8005904:	af02      	add	r7, sp, #8
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	603b      	str	r3, [r7, #0]
 800590c:	4613      	mov	r3, r2
 800590e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005910:	2300      	movs	r3, #0
 8005912:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800591a:	b2db      	uxtb	r3, r3
 800591c:	2b20      	cmp	r3, #32
 800591e:	f040 8090 	bne.w	8005a42 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <HAL_UART_Receive+0x2e>
 8005928:	88fb      	ldrh	r3, [r7, #6]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e088      	b.n	8005a44 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005938:	2b01      	cmp	r3, #1
 800593a:	d101      	bne.n	8005940 <HAL_UART_Receive+0x40>
 800593c:	2302      	movs	r3, #2
 800593e:	e081      	b.n	8005a44 <HAL_UART_Receive+0x144>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2222      	movs	r2, #34	; 0x22
 8005952:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005956:	f7fb ff9f 	bl	8001898 <HAL_GetTick>
 800595a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	88fa      	ldrh	r2, [r7, #6]
 8005960:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	88fa      	ldrh	r2, [r7, #6]
 8005966:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005970:	e05c      	b.n	8005a2c <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005976:	b29b      	uxth	r3, r3
 8005978:	3b01      	subs	r3, #1
 800597a:	b29a      	uxth	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005988:	d12b      	bne.n	80059e2 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	9300      	str	r3, [sp, #0]
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	2200      	movs	r2, #0
 8005992:	2120      	movs	r1, #32
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f000 f859 	bl	8005a4c <UART_WaitOnFlagUntilTimeout>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d001      	beq.n	80059a4 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e04f      	b.n	8005a44 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10c      	bne.n	80059ca <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059bc:	b29a      	uxth	r2, r3
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	3302      	adds	r3, #2
 80059c6:	60bb      	str	r3, [r7, #8]
 80059c8:	e030      	b.n	8005a2c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	3301      	adds	r3, #1
 80059de:	60bb      	str	r3, [r7, #8]
 80059e0:	e024      	b.n	8005a2c <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	9300      	str	r3, [sp, #0]
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	2200      	movs	r2, #0
 80059ea:	2120      	movs	r1, #32
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f000 f82d 	bl	8005a4c <UART_WaitOnFlagUntilTimeout>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d001      	beq.n	80059fc <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e023      	b.n	8005a44 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d108      	bne.n	8005a16 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6859      	ldr	r1, [r3, #4]
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	1c5a      	adds	r2, r3, #1
 8005a0e:	60ba      	str	r2, [r7, #8]
 8005a10:	b2ca      	uxtb	r2, r1
 8005a12:	701a      	strb	r2, [r3, #0]
 8005a14:	e00a      	b.n	8005a2c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	1c59      	adds	r1, r3, #1
 8005a22:	60b9      	str	r1, [r7, #8]
 8005a24:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a28:	b2d2      	uxtb	r2, r2
 8005a2a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d19d      	bne.n	8005972 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	e000      	b.n	8005a44 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8005a42:	2302      	movs	r3, #2
  }
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3718      	adds	r7, #24
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	603b      	str	r3, [r7, #0]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a5c:	e02c      	b.n	8005ab8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a64:	d028      	beq.n	8005ab8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d007      	beq.n	8005a7c <UART_WaitOnFlagUntilTimeout+0x30>
 8005a6c:	f7fb ff14 	bl	8001898 <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d21d      	bcs.n	8005ab8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68da      	ldr	r2, [r3, #12]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a8a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	695a      	ldr	r2, [r3, #20]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f022 0201 	bic.w	r2, r2, #1
 8005a9a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e00f      	b.n	8005ad8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	bf0c      	ite	eq
 8005ac8:	2301      	moveq	r3, #1
 8005aca:	2300      	movne	r3, #0
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	461a      	mov	r2, r3
 8005ad0:	79fb      	ldrb	r3, [r7, #7]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d0c3      	beq.n	8005a5e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae4:	b085      	sub	sp, #20
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	68da      	ldr	r2, [r3, #12]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	689a      	ldr	r2, [r3, #8]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	431a      	orrs	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	69db      	ldr	r3, [r3, #28]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005b22:	f023 030c 	bic.w	r3, r3, #12
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	6812      	ldr	r2, [r2, #0]
 8005b2a:	68f9      	ldr	r1, [r7, #12]
 8005b2c:	430b      	orrs	r3, r1
 8005b2e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	699a      	ldr	r2, [r3, #24]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	430a      	orrs	r2, r1
 8005b44:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b4e:	f040 818b 	bne.w	8005e68 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4ac1      	ldr	r2, [pc, #772]	; (8005e5c <UART_SetConfig+0x37c>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d005      	beq.n	8005b68 <UART_SetConfig+0x88>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4abf      	ldr	r2, [pc, #764]	; (8005e60 <UART_SetConfig+0x380>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	f040 80bd 	bne.w	8005ce2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b68:	f7ff f82e 	bl	8004bc8 <HAL_RCC_GetPCLK2Freq>
 8005b6c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	461d      	mov	r5, r3
 8005b72:	f04f 0600 	mov.w	r6, #0
 8005b76:	46a8      	mov	r8, r5
 8005b78:	46b1      	mov	r9, r6
 8005b7a:	eb18 0308 	adds.w	r3, r8, r8
 8005b7e:	eb49 0409 	adc.w	r4, r9, r9
 8005b82:	4698      	mov	r8, r3
 8005b84:	46a1      	mov	r9, r4
 8005b86:	eb18 0805 	adds.w	r8, r8, r5
 8005b8a:	eb49 0906 	adc.w	r9, r9, r6
 8005b8e:	f04f 0100 	mov.w	r1, #0
 8005b92:	f04f 0200 	mov.w	r2, #0
 8005b96:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b9a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b9e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005ba2:	4688      	mov	r8, r1
 8005ba4:	4691      	mov	r9, r2
 8005ba6:	eb18 0005 	adds.w	r0, r8, r5
 8005baa:	eb49 0106 	adc.w	r1, r9, r6
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	461d      	mov	r5, r3
 8005bb4:	f04f 0600 	mov.w	r6, #0
 8005bb8:	196b      	adds	r3, r5, r5
 8005bba:	eb46 0406 	adc.w	r4, r6, r6
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	4623      	mov	r3, r4
 8005bc2:	f7fa fb6d 	bl	80002a0 <__aeabi_uldivmod>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	460c      	mov	r4, r1
 8005bca:	461a      	mov	r2, r3
 8005bcc:	4ba5      	ldr	r3, [pc, #660]	; (8005e64 <UART_SetConfig+0x384>)
 8005bce:	fba3 2302 	umull	r2, r3, r3, r2
 8005bd2:	095b      	lsrs	r3, r3, #5
 8005bd4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	461d      	mov	r5, r3
 8005bdc:	f04f 0600 	mov.w	r6, #0
 8005be0:	46a9      	mov	r9, r5
 8005be2:	46b2      	mov	sl, r6
 8005be4:	eb19 0309 	adds.w	r3, r9, r9
 8005be8:	eb4a 040a 	adc.w	r4, sl, sl
 8005bec:	4699      	mov	r9, r3
 8005bee:	46a2      	mov	sl, r4
 8005bf0:	eb19 0905 	adds.w	r9, r9, r5
 8005bf4:	eb4a 0a06 	adc.w	sl, sl, r6
 8005bf8:	f04f 0100 	mov.w	r1, #0
 8005bfc:	f04f 0200 	mov.w	r2, #0
 8005c00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c0c:	4689      	mov	r9, r1
 8005c0e:	4692      	mov	sl, r2
 8005c10:	eb19 0005 	adds.w	r0, r9, r5
 8005c14:	eb4a 0106 	adc.w	r1, sl, r6
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	461d      	mov	r5, r3
 8005c1e:	f04f 0600 	mov.w	r6, #0
 8005c22:	196b      	adds	r3, r5, r5
 8005c24:	eb46 0406 	adc.w	r4, r6, r6
 8005c28:	461a      	mov	r2, r3
 8005c2a:	4623      	mov	r3, r4
 8005c2c:	f7fa fb38 	bl	80002a0 <__aeabi_uldivmod>
 8005c30:	4603      	mov	r3, r0
 8005c32:	460c      	mov	r4, r1
 8005c34:	461a      	mov	r2, r3
 8005c36:	4b8b      	ldr	r3, [pc, #556]	; (8005e64 <UART_SetConfig+0x384>)
 8005c38:	fba3 1302 	umull	r1, r3, r3, r2
 8005c3c:	095b      	lsrs	r3, r3, #5
 8005c3e:	2164      	movs	r1, #100	; 0x64
 8005c40:	fb01 f303 	mul.w	r3, r1, r3
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	00db      	lsls	r3, r3, #3
 8005c48:	3332      	adds	r3, #50	; 0x32
 8005c4a:	4a86      	ldr	r2, [pc, #536]	; (8005e64 <UART_SetConfig+0x384>)
 8005c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c50:	095b      	lsrs	r3, r3, #5
 8005c52:	005b      	lsls	r3, r3, #1
 8005c54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c58:	4498      	add	r8, r3
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	461d      	mov	r5, r3
 8005c5e:	f04f 0600 	mov.w	r6, #0
 8005c62:	46a9      	mov	r9, r5
 8005c64:	46b2      	mov	sl, r6
 8005c66:	eb19 0309 	adds.w	r3, r9, r9
 8005c6a:	eb4a 040a 	adc.w	r4, sl, sl
 8005c6e:	4699      	mov	r9, r3
 8005c70:	46a2      	mov	sl, r4
 8005c72:	eb19 0905 	adds.w	r9, r9, r5
 8005c76:	eb4a 0a06 	adc.w	sl, sl, r6
 8005c7a:	f04f 0100 	mov.w	r1, #0
 8005c7e:	f04f 0200 	mov.w	r2, #0
 8005c82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c86:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c8a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c8e:	4689      	mov	r9, r1
 8005c90:	4692      	mov	sl, r2
 8005c92:	eb19 0005 	adds.w	r0, r9, r5
 8005c96:	eb4a 0106 	adc.w	r1, sl, r6
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	461d      	mov	r5, r3
 8005ca0:	f04f 0600 	mov.w	r6, #0
 8005ca4:	196b      	adds	r3, r5, r5
 8005ca6:	eb46 0406 	adc.w	r4, r6, r6
 8005caa:	461a      	mov	r2, r3
 8005cac:	4623      	mov	r3, r4
 8005cae:	f7fa faf7 	bl	80002a0 <__aeabi_uldivmod>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	460c      	mov	r4, r1
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	4b6a      	ldr	r3, [pc, #424]	; (8005e64 <UART_SetConfig+0x384>)
 8005cba:	fba3 1302 	umull	r1, r3, r3, r2
 8005cbe:	095b      	lsrs	r3, r3, #5
 8005cc0:	2164      	movs	r1, #100	; 0x64
 8005cc2:	fb01 f303 	mul.w	r3, r1, r3
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	00db      	lsls	r3, r3, #3
 8005cca:	3332      	adds	r3, #50	; 0x32
 8005ccc:	4a65      	ldr	r2, [pc, #404]	; (8005e64 <UART_SetConfig+0x384>)
 8005cce:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd2:	095b      	lsrs	r3, r3, #5
 8005cd4:	f003 0207 	and.w	r2, r3, #7
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4442      	add	r2, r8
 8005cde:	609a      	str	r2, [r3, #8]
 8005ce0:	e26f      	b.n	80061c2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ce2:	f7fe ff5d 	bl	8004ba0 <HAL_RCC_GetPCLK1Freq>
 8005ce6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	461d      	mov	r5, r3
 8005cec:	f04f 0600 	mov.w	r6, #0
 8005cf0:	46a8      	mov	r8, r5
 8005cf2:	46b1      	mov	r9, r6
 8005cf4:	eb18 0308 	adds.w	r3, r8, r8
 8005cf8:	eb49 0409 	adc.w	r4, r9, r9
 8005cfc:	4698      	mov	r8, r3
 8005cfe:	46a1      	mov	r9, r4
 8005d00:	eb18 0805 	adds.w	r8, r8, r5
 8005d04:	eb49 0906 	adc.w	r9, r9, r6
 8005d08:	f04f 0100 	mov.w	r1, #0
 8005d0c:	f04f 0200 	mov.w	r2, #0
 8005d10:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d14:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d18:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d1c:	4688      	mov	r8, r1
 8005d1e:	4691      	mov	r9, r2
 8005d20:	eb18 0005 	adds.w	r0, r8, r5
 8005d24:	eb49 0106 	adc.w	r1, r9, r6
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	461d      	mov	r5, r3
 8005d2e:	f04f 0600 	mov.w	r6, #0
 8005d32:	196b      	adds	r3, r5, r5
 8005d34:	eb46 0406 	adc.w	r4, r6, r6
 8005d38:	461a      	mov	r2, r3
 8005d3a:	4623      	mov	r3, r4
 8005d3c:	f7fa fab0 	bl	80002a0 <__aeabi_uldivmod>
 8005d40:	4603      	mov	r3, r0
 8005d42:	460c      	mov	r4, r1
 8005d44:	461a      	mov	r2, r3
 8005d46:	4b47      	ldr	r3, [pc, #284]	; (8005e64 <UART_SetConfig+0x384>)
 8005d48:	fba3 2302 	umull	r2, r3, r3, r2
 8005d4c:	095b      	lsrs	r3, r3, #5
 8005d4e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	461d      	mov	r5, r3
 8005d56:	f04f 0600 	mov.w	r6, #0
 8005d5a:	46a9      	mov	r9, r5
 8005d5c:	46b2      	mov	sl, r6
 8005d5e:	eb19 0309 	adds.w	r3, r9, r9
 8005d62:	eb4a 040a 	adc.w	r4, sl, sl
 8005d66:	4699      	mov	r9, r3
 8005d68:	46a2      	mov	sl, r4
 8005d6a:	eb19 0905 	adds.w	r9, r9, r5
 8005d6e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005d72:	f04f 0100 	mov.w	r1, #0
 8005d76:	f04f 0200 	mov.w	r2, #0
 8005d7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d86:	4689      	mov	r9, r1
 8005d88:	4692      	mov	sl, r2
 8005d8a:	eb19 0005 	adds.w	r0, r9, r5
 8005d8e:	eb4a 0106 	adc.w	r1, sl, r6
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	461d      	mov	r5, r3
 8005d98:	f04f 0600 	mov.w	r6, #0
 8005d9c:	196b      	adds	r3, r5, r5
 8005d9e:	eb46 0406 	adc.w	r4, r6, r6
 8005da2:	461a      	mov	r2, r3
 8005da4:	4623      	mov	r3, r4
 8005da6:	f7fa fa7b 	bl	80002a0 <__aeabi_uldivmod>
 8005daa:	4603      	mov	r3, r0
 8005dac:	460c      	mov	r4, r1
 8005dae:	461a      	mov	r2, r3
 8005db0:	4b2c      	ldr	r3, [pc, #176]	; (8005e64 <UART_SetConfig+0x384>)
 8005db2:	fba3 1302 	umull	r1, r3, r3, r2
 8005db6:	095b      	lsrs	r3, r3, #5
 8005db8:	2164      	movs	r1, #100	; 0x64
 8005dba:	fb01 f303 	mul.w	r3, r1, r3
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	00db      	lsls	r3, r3, #3
 8005dc2:	3332      	adds	r3, #50	; 0x32
 8005dc4:	4a27      	ldr	r2, [pc, #156]	; (8005e64 <UART_SetConfig+0x384>)
 8005dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dca:	095b      	lsrs	r3, r3, #5
 8005dcc:	005b      	lsls	r3, r3, #1
 8005dce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005dd2:	4498      	add	r8, r3
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	461d      	mov	r5, r3
 8005dd8:	f04f 0600 	mov.w	r6, #0
 8005ddc:	46a9      	mov	r9, r5
 8005dde:	46b2      	mov	sl, r6
 8005de0:	eb19 0309 	adds.w	r3, r9, r9
 8005de4:	eb4a 040a 	adc.w	r4, sl, sl
 8005de8:	4699      	mov	r9, r3
 8005dea:	46a2      	mov	sl, r4
 8005dec:	eb19 0905 	adds.w	r9, r9, r5
 8005df0:	eb4a 0a06 	adc.w	sl, sl, r6
 8005df4:	f04f 0100 	mov.w	r1, #0
 8005df8:	f04f 0200 	mov.w	r2, #0
 8005dfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e08:	4689      	mov	r9, r1
 8005e0a:	4692      	mov	sl, r2
 8005e0c:	eb19 0005 	adds.w	r0, r9, r5
 8005e10:	eb4a 0106 	adc.w	r1, sl, r6
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	461d      	mov	r5, r3
 8005e1a:	f04f 0600 	mov.w	r6, #0
 8005e1e:	196b      	adds	r3, r5, r5
 8005e20:	eb46 0406 	adc.w	r4, r6, r6
 8005e24:	461a      	mov	r2, r3
 8005e26:	4623      	mov	r3, r4
 8005e28:	f7fa fa3a 	bl	80002a0 <__aeabi_uldivmod>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	460c      	mov	r4, r1
 8005e30:	461a      	mov	r2, r3
 8005e32:	4b0c      	ldr	r3, [pc, #48]	; (8005e64 <UART_SetConfig+0x384>)
 8005e34:	fba3 1302 	umull	r1, r3, r3, r2
 8005e38:	095b      	lsrs	r3, r3, #5
 8005e3a:	2164      	movs	r1, #100	; 0x64
 8005e3c:	fb01 f303 	mul.w	r3, r1, r3
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	00db      	lsls	r3, r3, #3
 8005e44:	3332      	adds	r3, #50	; 0x32
 8005e46:	4a07      	ldr	r2, [pc, #28]	; (8005e64 <UART_SetConfig+0x384>)
 8005e48:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4c:	095b      	lsrs	r3, r3, #5
 8005e4e:	f003 0207 	and.w	r2, r3, #7
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4442      	add	r2, r8
 8005e58:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005e5a:	e1b2      	b.n	80061c2 <UART_SetConfig+0x6e2>
 8005e5c:	40011000 	.word	0x40011000
 8005e60:	40011400 	.word	0x40011400
 8005e64:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4ad7      	ldr	r2, [pc, #860]	; (80061cc <UART_SetConfig+0x6ec>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d005      	beq.n	8005e7e <UART_SetConfig+0x39e>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4ad6      	ldr	r2, [pc, #856]	; (80061d0 <UART_SetConfig+0x6f0>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	f040 80d1 	bne.w	8006020 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e7e:	f7fe fea3 	bl	8004bc8 <HAL_RCC_GetPCLK2Freq>
 8005e82:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	469a      	mov	sl, r3
 8005e88:	f04f 0b00 	mov.w	fp, #0
 8005e8c:	46d0      	mov	r8, sl
 8005e8e:	46d9      	mov	r9, fp
 8005e90:	eb18 0308 	adds.w	r3, r8, r8
 8005e94:	eb49 0409 	adc.w	r4, r9, r9
 8005e98:	4698      	mov	r8, r3
 8005e9a:	46a1      	mov	r9, r4
 8005e9c:	eb18 080a 	adds.w	r8, r8, sl
 8005ea0:	eb49 090b 	adc.w	r9, r9, fp
 8005ea4:	f04f 0100 	mov.w	r1, #0
 8005ea8:	f04f 0200 	mov.w	r2, #0
 8005eac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005eb0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005eb4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005eb8:	4688      	mov	r8, r1
 8005eba:	4691      	mov	r9, r2
 8005ebc:	eb1a 0508 	adds.w	r5, sl, r8
 8005ec0:	eb4b 0609 	adc.w	r6, fp, r9
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	4619      	mov	r1, r3
 8005eca:	f04f 0200 	mov.w	r2, #0
 8005ece:	f04f 0300 	mov.w	r3, #0
 8005ed2:	f04f 0400 	mov.w	r4, #0
 8005ed6:	0094      	lsls	r4, r2, #2
 8005ed8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005edc:	008b      	lsls	r3, r1, #2
 8005ede:	461a      	mov	r2, r3
 8005ee0:	4623      	mov	r3, r4
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	4631      	mov	r1, r6
 8005ee6:	f7fa f9db 	bl	80002a0 <__aeabi_uldivmod>
 8005eea:	4603      	mov	r3, r0
 8005eec:	460c      	mov	r4, r1
 8005eee:	461a      	mov	r2, r3
 8005ef0:	4bb8      	ldr	r3, [pc, #736]	; (80061d4 <UART_SetConfig+0x6f4>)
 8005ef2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ef6:	095b      	lsrs	r3, r3, #5
 8005ef8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	469b      	mov	fp, r3
 8005f00:	f04f 0c00 	mov.w	ip, #0
 8005f04:	46d9      	mov	r9, fp
 8005f06:	46e2      	mov	sl, ip
 8005f08:	eb19 0309 	adds.w	r3, r9, r9
 8005f0c:	eb4a 040a 	adc.w	r4, sl, sl
 8005f10:	4699      	mov	r9, r3
 8005f12:	46a2      	mov	sl, r4
 8005f14:	eb19 090b 	adds.w	r9, r9, fp
 8005f18:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005f1c:	f04f 0100 	mov.w	r1, #0
 8005f20:	f04f 0200 	mov.w	r2, #0
 8005f24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f28:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f2c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f30:	4689      	mov	r9, r1
 8005f32:	4692      	mov	sl, r2
 8005f34:	eb1b 0509 	adds.w	r5, fp, r9
 8005f38:	eb4c 060a 	adc.w	r6, ip, sl
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	4619      	mov	r1, r3
 8005f42:	f04f 0200 	mov.w	r2, #0
 8005f46:	f04f 0300 	mov.w	r3, #0
 8005f4a:	f04f 0400 	mov.w	r4, #0
 8005f4e:	0094      	lsls	r4, r2, #2
 8005f50:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f54:	008b      	lsls	r3, r1, #2
 8005f56:	461a      	mov	r2, r3
 8005f58:	4623      	mov	r3, r4
 8005f5a:	4628      	mov	r0, r5
 8005f5c:	4631      	mov	r1, r6
 8005f5e:	f7fa f99f 	bl	80002a0 <__aeabi_uldivmod>
 8005f62:	4603      	mov	r3, r0
 8005f64:	460c      	mov	r4, r1
 8005f66:	461a      	mov	r2, r3
 8005f68:	4b9a      	ldr	r3, [pc, #616]	; (80061d4 <UART_SetConfig+0x6f4>)
 8005f6a:	fba3 1302 	umull	r1, r3, r3, r2
 8005f6e:	095b      	lsrs	r3, r3, #5
 8005f70:	2164      	movs	r1, #100	; 0x64
 8005f72:	fb01 f303 	mul.w	r3, r1, r3
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	011b      	lsls	r3, r3, #4
 8005f7a:	3332      	adds	r3, #50	; 0x32
 8005f7c:	4a95      	ldr	r2, [pc, #596]	; (80061d4 <UART_SetConfig+0x6f4>)
 8005f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f82:	095b      	lsrs	r3, r3, #5
 8005f84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f88:	4498      	add	r8, r3
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	469b      	mov	fp, r3
 8005f8e:	f04f 0c00 	mov.w	ip, #0
 8005f92:	46d9      	mov	r9, fp
 8005f94:	46e2      	mov	sl, ip
 8005f96:	eb19 0309 	adds.w	r3, r9, r9
 8005f9a:	eb4a 040a 	adc.w	r4, sl, sl
 8005f9e:	4699      	mov	r9, r3
 8005fa0:	46a2      	mov	sl, r4
 8005fa2:	eb19 090b 	adds.w	r9, r9, fp
 8005fa6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005faa:	f04f 0100 	mov.w	r1, #0
 8005fae:	f04f 0200 	mov.w	r2, #0
 8005fb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fb6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fbe:	4689      	mov	r9, r1
 8005fc0:	4692      	mov	sl, r2
 8005fc2:	eb1b 0509 	adds.w	r5, fp, r9
 8005fc6:	eb4c 060a 	adc.w	r6, ip, sl
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	4619      	mov	r1, r3
 8005fd0:	f04f 0200 	mov.w	r2, #0
 8005fd4:	f04f 0300 	mov.w	r3, #0
 8005fd8:	f04f 0400 	mov.w	r4, #0
 8005fdc:	0094      	lsls	r4, r2, #2
 8005fde:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005fe2:	008b      	lsls	r3, r1, #2
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	4623      	mov	r3, r4
 8005fe8:	4628      	mov	r0, r5
 8005fea:	4631      	mov	r1, r6
 8005fec:	f7fa f958 	bl	80002a0 <__aeabi_uldivmod>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	460c      	mov	r4, r1
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	4b77      	ldr	r3, [pc, #476]	; (80061d4 <UART_SetConfig+0x6f4>)
 8005ff8:	fba3 1302 	umull	r1, r3, r3, r2
 8005ffc:	095b      	lsrs	r3, r3, #5
 8005ffe:	2164      	movs	r1, #100	; 0x64
 8006000:	fb01 f303 	mul.w	r3, r1, r3
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	011b      	lsls	r3, r3, #4
 8006008:	3332      	adds	r3, #50	; 0x32
 800600a:	4a72      	ldr	r2, [pc, #456]	; (80061d4 <UART_SetConfig+0x6f4>)
 800600c:	fba2 2303 	umull	r2, r3, r2, r3
 8006010:	095b      	lsrs	r3, r3, #5
 8006012:	f003 020f 	and.w	r2, r3, #15
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4442      	add	r2, r8
 800601c:	609a      	str	r2, [r3, #8]
 800601e:	e0d0      	b.n	80061c2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006020:	f7fe fdbe 	bl	8004ba0 <HAL_RCC_GetPCLK1Freq>
 8006024:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	469a      	mov	sl, r3
 800602a:	f04f 0b00 	mov.w	fp, #0
 800602e:	46d0      	mov	r8, sl
 8006030:	46d9      	mov	r9, fp
 8006032:	eb18 0308 	adds.w	r3, r8, r8
 8006036:	eb49 0409 	adc.w	r4, r9, r9
 800603a:	4698      	mov	r8, r3
 800603c:	46a1      	mov	r9, r4
 800603e:	eb18 080a 	adds.w	r8, r8, sl
 8006042:	eb49 090b 	adc.w	r9, r9, fp
 8006046:	f04f 0100 	mov.w	r1, #0
 800604a:	f04f 0200 	mov.w	r2, #0
 800604e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006052:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006056:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800605a:	4688      	mov	r8, r1
 800605c:	4691      	mov	r9, r2
 800605e:	eb1a 0508 	adds.w	r5, sl, r8
 8006062:	eb4b 0609 	adc.w	r6, fp, r9
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	4619      	mov	r1, r3
 800606c:	f04f 0200 	mov.w	r2, #0
 8006070:	f04f 0300 	mov.w	r3, #0
 8006074:	f04f 0400 	mov.w	r4, #0
 8006078:	0094      	lsls	r4, r2, #2
 800607a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800607e:	008b      	lsls	r3, r1, #2
 8006080:	461a      	mov	r2, r3
 8006082:	4623      	mov	r3, r4
 8006084:	4628      	mov	r0, r5
 8006086:	4631      	mov	r1, r6
 8006088:	f7fa f90a 	bl	80002a0 <__aeabi_uldivmod>
 800608c:	4603      	mov	r3, r0
 800608e:	460c      	mov	r4, r1
 8006090:	461a      	mov	r2, r3
 8006092:	4b50      	ldr	r3, [pc, #320]	; (80061d4 <UART_SetConfig+0x6f4>)
 8006094:	fba3 2302 	umull	r2, r3, r3, r2
 8006098:	095b      	lsrs	r3, r3, #5
 800609a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	469b      	mov	fp, r3
 80060a2:	f04f 0c00 	mov.w	ip, #0
 80060a6:	46d9      	mov	r9, fp
 80060a8:	46e2      	mov	sl, ip
 80060aa:	eb19 0309 	adds.w	r3, r9, r9
 80060ae:	eb4a 040a 	adc.w	r4, sl, sl
 80060b2:	4699      	mov	r9, r3
 80060b4:	46a2      	mov	sl, r4
 80060b6:	eb19 090b 	adds.w	r9, r9, fp
 80060ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 80060be:	f04f 0100 	mov.w	r1, #0
 80060c2:	f04f 0200 	mov.w	r2, #0
 80060c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060d2:	4689      	mov	r9, r1
 80060d4:	4692      	mov	sl, r2
 80060d6:	eb1b 0509 	adds.w	r5, fp, r9
 80060da:	eb4c 060a 	adc.w	r6, ip, sl
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	4619      	mov	r1, r3
 80060e4:	f04f 0200 	mov.w	r2, #0
 80060e8:	f04f 0300 	mov.w	r3, #0
 80060ec:	f04f 0400 	mov.w	r4, #0
 80060f0:	0094      	lsls	r4, r2, #2
 80060f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060f6:	008b      	lsls	r3, r1, #2
 80060f8:	461a      	mov	r2, r3
 80060fa:	4623      	mov	r3, r4
 80060fc:	4628      	mov	r0, r5
 80060fe:	4631      	mov	r1, r6
 8006100:	f7fa f8ce 	bl	80002a0 <__aeabi_uldivmod>
 8006104:	4603      	mov	r3, r0
 8006106:	460c      	mov	r4, r1
 8006108:	461a      	mov	r2, r3
 800610a:	4b32      	ldr	r3, [pc, #200]	; (80061d4 <UART_SetConfig+0x6f4>)
 800610c:	fba3 1302 	umull	r1, r3, r3, r2
 8006110:	095b      	lsrs	r3, r3, #5
 8006112:	2164      	movs	r1, #100	; 0x64
 8006114:	fb01 f303 	mul.w	r3, r1, r3
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	011b      	lsls	r3, r3, #4
 800611c:	3332      	adds	r3, #50	; 0x32
 800611e:	4a2d      	ldr	r2, [pc, #180]	; (80061d4 <UART_SetConfig+0x6f4>)
 8006120:	fba2 2303 	umull	r2, r3, r2, r3
 8006124:	095b      	lsrs	r3, r3, #5
 8006126:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800612a:	4498      	add	r8, r3
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	469b      	mov	fp, r3
 8006130:	f04f 0c00 	mov.w	ip, #0
 8006134:	46d9      	mov	r9, fp
 8006136:	46e2      	mov	sl, ip
 8006138:	eb19 0309 	adds.w	r3, r9, r9
 800613c:	eb4a 040a 	adc.w	r4, sl, sl
 8006140:	4699      	mov	r9, r3
 8006142:	46a2      	mov	sl, r4
 8006144:	eb19 090b 	adds.w	r9, r9, fp
 8006148:	eb4a 0a0c 	adc.w	sl, sl, ip
 800614c:	f04f 0100 	mov.w	r1, #0
 8006150:	f04f 0200 	mov.w	r2, #0
 8006154:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006158:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800615c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006160:	4689      	mov	r9, r1
 8006162:	4692      	mov	sl, r2
 8006164:	eb1b 0509 	adds.w	r5, fp, r9
 8006168:	eb4c 060a 	adc.w	r6, ip, sl
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	4619      	mov	r1, r3
 8006172:	f04f 0200 	mov.w	r2, #0
 8006176:	f04f 0300 	mov.w	r3, #0
 800617a:	f04f 0400 	mov.w	r4, #0
 800617e:	0094      	lsls	r4, r2, #2
 8006180:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006184:	008b      	lsls	r3, r1, #2
 8006186:	461a      	mov	r2, r3
 8006188:	4623      	mov	r3, r4
 800618a:	4628      	mov	r0, r5
 800618c:	4631      	mov	r1, r6
 800618e:	f7fa f887 	bl	80002a0 <__aeabi_uldivmod>
 8006192:	4603      	mov	r3, r0
 8006194:	460c      	mov	r4, r1
 8006196:	461a      	mov	r2, r3
 8006198:	4b0e      	ldr	r3, [pc, #56]	; (80061d4 <UART_SetConfig+0x6f4>)
 800619a:	fba3 1302 	umull	r1, r3, r3, r2
 800619e:	095b      	lsrs	r3, r3, #5
 80061a0:	2164      	movs	r1, #100	; 0x64
 80061a2:	fb01 f303 	mul.w	r3, r1, r3
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	011b      	lsls	r3, r3, #4
 80061aa:	3332      	adds	r3, #50	; 0x32
 80061ac:	4a09      	ldr	r2, [pc, #36]	; (80061d4 <UART_SetConfig+0x6f4>)
 80061ae:	fba2 2303 	umull	r2, r3, r2, r3
 80061b2:	095b      	lsrs	r3, r3, #5
 80061b4:	f003 020f 	and.w	r2, r3, #15
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4442      	add	r2, r8
 80061be:	609a      	str	r2, [r3, #8]
}
 80061c0:	e7ff      	b.n	80061c2 <UART_SetConfig+0x6e2>
 80061c2:	bf00      	nop
 80061c4:	3714      	adds	r7, #20
 80061c6:	46bd      	mov	sp, r7
 80061c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061cc:	40011000 	.word	0x40011000
 80061d0:	40011400 	.word	0x40011400
 80061d4:	51eb851f 	.word	0x51eb851f

080061d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061d8:	b084      	sub	sp, #16
 80061da:	b580      	push	{r7, lr}
 80061dc:	b084      	sub	sp, #16
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
 80061e2:	f107 001c 	add.w	r0, r7, #28
 80061e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d122      	bne.n	8006236 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006204:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800621a:	2b01      	cmp	r3, #1
 800621c:	d105      	bne.n	800622a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f94a 	bl	80064c4 <USB_CoreReset>
 8006230:	4603      	mov	r3, r0
 8006232:	73fb      	strb	r3, [r7, #15]
 8006234:	e01a      	b.n	800626c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f93e 	bl	80064c4 <USB_CoreReset>
 8006248:	4603      	mov	r3, r0
 800624a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800624c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800624e:	2b00      	cmp	r3, #0
 8006250:	d106      	bne.n	8006260 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006256:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	639a      	str	r2, [r3, #56]	; 0x38
 800625e:	e005      	b.n	800626c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006264:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800626c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626e:	2b01      	cmp	r3, #1
 8006270:	d10b      	bne.n	800628a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f043 0206 	orr.w	r2, r3, #6
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f043 0220 	orr.w	r2, r3, #32
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800628a:	7bfb      	ldrb	r3, [r7, #15]
}
 800628c:	4618      	mov	r0, r3
 800628e:	3710      	adds	r7, #16
 8006290:	46bd      	mov	sp, r7
 8006292:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006296:	b004      	add	sp, #16
 8006298:	4770      	bx	lr

0800629a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800629a:	b480      	push	{r7}
 800629c:	b083      	sub	sp, #12
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f043 0201 	orr.w	r2, r3, #1
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f023 0201 	bic.w	r2, r3, #1
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	370c      	adds	r7, #12
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr

080062de <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b082      	sub	sp, #8
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
 80062e6:	460b      	mov	r3, r1
 80062e8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80062f6:	78fb      	ldrb	r3, [r7, #3]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d106      	bne.n	800630a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	60da      	str	r2, [r3, #12]
 8006308:	e00b      	b.n	8006322 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800630a:	78fb      	ldrb	r3, [r7, #3]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d106      	bne.n	800631e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	60da      	str	r2, [r3, #12]
 800631c:	e001      	b.n	8006322 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e003      	b.n	800632a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006322:	2032      	movs	r0, #50	; 0x32
 8006324:	f7fb fac4 	bl	80018b0 <HAL_Delay>

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3708      	adds	r7, #8
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
	...

08006334 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800633e:	2300      	movs	r3, #0
 8006340:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	019b      	lsls	r3, r3, #6
 8006346:	f043 0220 	orr.w	r2, r3, #32
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	3301      	adds	r3, #1
 8006352:	60fb      	str	r3, [r7, #12]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	4a09      	ldr	r2, [pc, #36]	; (800637c <USB_FlushTxFifo+0x48>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d901      	bls.n	8006360 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e006      	b.n	800636e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	f003 0320 	and.w	r3, r3, #32
 8006368:	2b20      	cmp	r3, #32
 800636a:	d0f0      	beq.n	800634e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	00030d40 	.word	0x00030d40

08006380 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006388:	2300      	movs	r3, #0
 800638a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2210      	movs	r2, #16
 8006390:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	3301      	adds	r3, #1
 8006396:	60fb      	str	r3, [r7, #12]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	4a09      	ldr	r2, [pc, #36]	; (80063c0 <USB_FlushRxFifo+0x40>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d901      	bls.n	80063a4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e006      	b.n	80063b2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	f003 0310 	and.w	r3, r3, #16
 80063ac:	2b10      	cmp	r3, #16
 80063ae:	d0f0      	beq.n	8006392 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3714      	adds	r7, #20
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	00030d40 	.word	0x00030d40

080063c4 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b089      	sub	sp, #36	; 0x24
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	4611      	mov	r1, r2
 80063d0:	461a      	mov	r2, r3
 80063d2:	460b      	mov	r3, r1
 80063d4:	71fb      	strb	r3, [r7, #7]
 80063d6:	4613      	mov	r3, r2
 80063d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80063e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d11a      	bne.n	8006420 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80063ea:	88bb      	ldrh	r3, [r7, #4]
 80063ec:	3303      	adds	r3, #3
 80063ee:	089b      	lsrs	r3, r3, #2
 80063f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80063f2:	2300      	movs	r3, #0
 80063f4:	61bb      	str	r3, [r7, #24]
 80063f6:	e00f      	b.n	8006418 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80063f8:	79fb      	ldrb	r3, [r7, #7]
 80063fa:	031a      	lsls	r2, r3, #12
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	4413      	add	r3, r2
 8006400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006404:	461a      	mov	r2, r3
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	3304      	adds	r3, #4
 8006410:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	3301      	adds	r3, #1
 8006416:	61bb      	str	r3, [r7, #24]
 8006418:	69ba      	ldr	r2, [r7, #24]
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	429a      	cmp	r2, r3
 800641e:	d3eb      	bcc.n	80063f8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3724      	adds	r7, #36	; 0x24
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800642e:	b480      	push	{r7}
 8006430:	b089      	sub	sp, #36	; 0x24
 8006432:	af00      	add	r7, sp, #0
 8006434:	60f8      	str	r0, [r7, #12]
 8006436:	60b9      	str	r1, [r7, #8]
 8006438:	4613      	mov	r3, r2
 800643a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006444:	88fb      	ldrh	r3, [r7, #6]
 8006446:	3303      	adds	r3, #3
 8006448:	089b      	lsrs	r3, r3, #2
 800644a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800644c:	2300      	movs	r3, #0
 800644e:	61bb      	str	r3, [r7, #24]
 8006450:	e00b      	b.n	800646a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	601a      	str	r2, [r3, #0]
    pDest++;
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	3304      	adds	r3, #4
 8006462:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	3301      	adds	r3, #1
 8006468:	61bb      	str	r3, [r7, #24]
 800646a:	69ba      	ldr	r2, [r7, #24]
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	429a      	cmp	r2, r3
 8006470:	d3ef      	bcc.n	8006452 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006472:	69fb      	ldr	r3, [r7, #28]
}
 8006474:	4618      	mov	r0, r3
 8006476:	3724      	adds	r7, #36	; 0x24
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	695b      	ldr	r3, [r3, #20]
 800648c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	4013      	ands	r3, r2
 8006496:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006498:	68fb      	ldr	r3, [r7, #12]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3714      	adds	r7, #20
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80064a6:	b480      	push	{r7}
 80064a8:	b083      	sub	sp, #12
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	695b      	ldr	r3, [r3, #20]
 80064b2:	f003 0301 	and.w	r3, r3, #1
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
	...

080064c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80064cc:	2300      	movs	r3, #0
 80064ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	3301      	adds	r3, #1
 80064d4:	60fb      	str	r3, [r7, #12]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	4a13      	ldr	r2, [pc, #76]	; (8006528 <USB_CoreReset+0x64>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d901      	bls.n	80064e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e01b      	b.n	800651a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	daf2      	bge.n	80064d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80064ea:	2300      	movs	r3, #0
 80064ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	f043 0201 	orr.w	r2, r3, #1
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	3301      	adds	r3, #1
 80064fe:	60fb      	str	r3, [r7, #12]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	4a09      	ldr	r2, [pc, #36]	; (8006528 <USB_CoreReset+0x64>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d901      	bls.n	800650c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e006      	b.n	800651a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	f003 0301 	and.w	r3, r3, #1
 8006514:	2b01      	cmp	r3, #1
 8006516:	d0f0      	beq.n	80064fa <USB_CoreReset+0x36>

  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3714      	adds	r7, #20
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	00030d40 	.word	0x00030d40

0800652c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800652c:	b084      	sub	sp, #16
 800652e:	b580      	push	{r7, lr}
 8006530:	b084      	sub	sp, #16
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
 8006536:	f107 001c 	add.w	r0, r7, #28
 800653a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006548:	461a      	mov	r2, r3
 800654a:	2300      	movs	r3, #0
 800654c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006552:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800657a:	2b00      	cmp	r3, #0
 800657c:	d018      	beq.n	80065b0 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006580:	2b03      	cmp	r3, #3
 8006582:	d10a      	bne.n	800659a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006592:	f043 0304 	orr.w	r3, r3, #4
 8006596:	6013      	str	r3, [r2, #0]
 8006598:	e014      	b.n	80065c4 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065a8:	f023 0304 	bic.w	r3, r3, #4
 80065ac:	6013      	str	r3, [r2, #0]
 80065ae:	e009      	b.n	80065c4 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68ba      	ldr	r2, [r7, #8]
 80065ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065be:	f023 0304 	bic.w	r3, r3, #4
 80065c2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80065c4:	2110      	movs	r1, #16
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f7ff feb4 	bl	8006334 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f7ff fed7 	bl	8006380 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80065d2:	2300      	movs	r3, #0
 80065d4:	60fb      	str	r3, [r7, #12]
 80065d6:	e015      	b.n	8006604 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	015a      	lsls	r2, r3, #5
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	4413      	add	r3, r2
 80065e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e4:	461a      	mov	r2, r3
 80065e6:	f04f 33ff 	mov.w	r3, #4294967295
 80065ea:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	015a      	lsls	r2, r3, #5
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	4413      	add	r3, r2
 80065f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065f8:	461a      	mov	r2, r3
 80065fa:	2300      	movs	r3, #0
 80065fc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	3301      	adds	r3, #1
 8006602:	60fb      	str	r3, [r7, #12]
 8006604:	6a3b      	ldr	r3, [r7, #32]
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	429a      	cmp	r2, r3
 800660a:	d3e5      	bcc.n	80065d8 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800660c:	2101      	movs	r1, #1
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f8ac 	bl	800676c <USB_DriveVbus>

  HAL_Delay(200U);
 8006614:	20c8      	movs	r0, #200	; 0xc8
 8006616:	f7fb f94b 	bl	80018b0 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f04f 32ff 	mov.w	r2, #4294967295
 8006626:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800662c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00b      	beq.n	800664c <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800663a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a14      	ldr	r2, [pc, #80]	; (8006690 <USB_HostInit+0x164>)
 8006640:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a13      	ldr	r2, [pc, #76]	; (8006694 <USB_HostInit+0x168>)
 8006646:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800664a:	e009      	b.n	8006660 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2280      	movs	r2, #128	; 0x80
 8006650:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a10      	ldr	r2, [pc, #64]	; (8006698 <USB_HostInit+0x16c>)
 8006656:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a10      	ldr	r2, [pc, #64]	; (800669c <USB_HostInit+0x170>)
 800665c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006662:	2b00      	cmp	r3, #0
 8006664:	d105      	bne.n	8006672 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	f043 0210 	orr.w	r2, r3, #16
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	699a      	ldr	r2, [r3, #24]
 8006676:	4b0a      	ldr	r3, [pc, #40]	; (80066a0 <USB_HostInit+0x174>)
 8006678:	4313      	orrs	r3, r2
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3710      	adds	r7, #16
 8006684:	46bd      	mov	sp, r7
 8006686:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800668a:	b004      	add	sp, #16
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	01000200 	.word	0x01000200
 8006694:	00e00300 	.word	0x00e00300
 8006698:	00600080 	.word	0x00600080
 800669c:	004000e0 	.word	0x004000e0
 80066a0:	a3200008 	.word	0xa3200008

080066a4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	460b      	mov	r3, r1
 80066ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066c2:	f023 0303 	bic.w	r3, r3, #3
 80066c6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	78fb      	ldrb	r3, [r7, #3]
 80066d2:	f003 0303 	and.w	r3, r3, #3
 80066d6:	68f9      	ldr	r1, [r7, #12]
 80066d8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80066dc:	4313      	orrs	r3, r2
 80066de:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80066e0:	78fb      	ldrb	r3, [r7, #3]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d107      	bne.n	80066f6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066ec:	461a      	mov	r2, r3
 80066ee:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80066f2:	6053      	str	r3, [r2, #4]
 80066f4:	e009      	b.n	800670a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80066f6:	78fb      	ldrb	r3, [r7, #3]
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d106      	bne.n	800670a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006702:	461a      	mov	r2, r3
 8006704:	f241 7370 	movw	r3, #6000	; 0x1770
 8006708:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3714      	adds	r7, #20
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006724:	2300      	movs	r3, #0
 8006726:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006738:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006746:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006748:	2064      	movs	r0, #100	; 0x64
 800674a:	f7fb f8b1 	bl	80018b0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006756:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800675a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800675c:	200a      	movs	r0, #10
 800675e:	f7fb f8a7 	bl	80018b0 <HAL_Delay>

  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3710      	adds	r7, #16
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	460b      	mov	r3, r1
 8006776:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800677c:	2300      	movs	r3, #0
 800677e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006790:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d109      	bne.n	80067b0 <USB_DriveVbus+0x44>
 800679c:	78fb      	ldrb	r3, [r7, #3]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d106      	bne.n	80067b0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80067aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80067ae:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ba:	d109      	bne.n	80067d0 <USB_DriveVbus+0x64>
 80067bc:	78fb      	ldrb	r3, [r7, #3]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d106      	bne.n	80067d0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80067ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067ce:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3714      	adds	r7, #20
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80067de:	b480      	push	{r7}
 80067e0:	b085      	sub	sp, #20
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80067ea:	2300      	movs	r3, #0
 80067ec:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	0c5b      	lsrs	r3, r3, #17
 80067fc:	f003 0303 	and.w	r3, r3, #3
}
 8006800:	4618      	mov	r0, r3
 8006802:	3714      	adds	r7, #20
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	b29b      	uxth	r3, r3
}
 8006822:	4618      	mov	r0, r3
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
	...

08006830 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	4608      	mov	r0, r1
 800683a:	4611      	mov	r1, r2
 800683c:	461a      	mov	r2, r3
 800683e:	4603      	mov	r3, r0
 8006840:	70fb      	strb	r3, [r7, #3]
 8006842:	460b      	mov	r3, r1
 8006844:	70bb      	strb	r3, [r7, #2]
 8006846:	4613      	mov	r3, r2
 8006848:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800684a:	2300      	movs	r3, #0
 800684c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006852:	78fb      	ldrb	r3, [r7, #3]
 8006854:	015a      	lsls	r2, r3, #5
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	4413      	add	r3, r2
 800685a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800685e:	461a      	mov	r2, r3
 8006860:	f04f 33ff 	mov.w	r3, #4294967295
 8006864:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006866:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800686a:	2b03      	cmp	r3, #3
 800686c:	d87e      	bhi.n	800696c <USB_HC_Init+0x13c>
 800686e:	a201      	add	r2, pc, #4	; (adr r2, 8006874 <USB_HC_Init+0x44>)
 8006870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006874:	08006885 	.word	0x08006885
 8006878:	0800692f 	.word	0x0800692f
 800687c:	08006885 	.word	0x08006885
 8006880:	080068f1 	.word	0x080068f1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006884:	78fb      	ldrb	r3, [r7, #3]
 8006886:	015a      	lsls	r2, r3, #5
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	4413      	add	r3, r2
 800688c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006890:	461a      	mov	r2, r3
 8006892:	f240 439d 	movw	r3, #1181	; 0x49d
 8006896:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006898:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800689c:	2b00      	cmp	r3, #0
 800689e:	da10      	bge.n	80068c2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80068a0:	78fb      	ldrb	r3, [r7, #3]
 80068a2:	015a      	lsls	r2, r3, #5
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	4413      	add	r3, r2
 80068a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	78fa      	ldrb	r2, [r7, #3]
 80068b0:	0151      	lsls	r1, r2, #5
 80068b2:	68ba      	ldr	r2, [r7, #8]
 80068b4:	440a      	add	r2, r1
 80068b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068be:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80068c0:	e057      	b.n	8006972 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d051      	beq.n	8006972 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80068ce:	78fb      	ldrb	r3, [r7, #3]
 80068d0:	015a      	lsls	r2, r3, #5
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	4413      	add	r3, r2
 80068d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	78fa      	ldrb	r2, [r7, #3]
 80068de:	0151      	lsls	r1, r2, #5
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	440a      	add	r2, r1
 80068e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068e8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80068ec:	60d3      	str	r3, [r2, #12]
      break;
 80068ee:	e040      	b.n	8006972 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80068f0:	78fb      	ldrb	r3, [r7, #3]
 80068f2:	015a      	lsls	r2, r3, #5
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	4413      	add	r3, r2
 80068f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068fc:	461a      	mov	r2, r3
 80068fe:	f240 639d 	movw	r3, #1693	; 0x69d
 8006902:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006904:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006908:	2b00      	cmp	r3, #0
 800690a:	da34      	bge.n	8006976 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800690c:	78fb      	ldrb	r3, [r7, #3]
 800690e:	015a      	lsls	r2, r3, #5
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	4413      	add	r3, r2
 8006914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	78fa      	ldrb	r2, [r7, #3]
 800691c:	0151      	lsls	r1, r2, #5
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	440a      	add	r2, r1
 8006922:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800692a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800692c:	e023      	b.n	8006976 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800692e:	78fb      	ldrb	r3, [r7, #3]
 8006930:	015a      	lsls	r2, r3, #5
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	4413      	add	r3, r2
 8006936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800693a:	461a      	mov	r2, r3
 800693c:	f240 2325 	movw	r3, #549	; 0x225
 8006940:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006942:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006946:	2b00      	cmp	r3, #0
 8006948:	da17      	bge.n	800697a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800694a:	78fb      	ldrb	r3, [r7, #3]
 800694c:	015a      	lsls	r2, r3, #5
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	4413      	add	r3, r2
 8006952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	78fa      	ldrb	r2, [r7, #3]
 800695a:	0151      	lsls	r1, r2, #5
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	440a      	add	r2, r1
 8006960:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006964:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006968:	60d3      	str	r3, [r2, #12]
      }
      break;
 800696a:	e006      	b.n	800697a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	75fb      	strb	r3, [r7, #23]
      break;
 8006970:	e004      	b.n	800697c <USB_HC_Init+0x14c>
      break;
 8006972:	bf00      	nop
 8006974:	e002      	b.n	800697c <USB_HC_Init+0x14c>
      break;
 8006976:	bf00      	nop
 8006978:	e000      	b.n	800697c <USB_HC_Init+0x14c>
      break;
 800697a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006982:	699a      	ldr	r2, [r3, #24]
 8006984:	78fb      	ldrb	r3, [r7, #3]
 8006986:	f003 030f 	and.w	r3, r3, #15
 800698a:	2101      	movs	r1, #1
 800698c:	fa01 f303 	lsl.w	r3, r1, r3
 8006990:	68b9      	ldr	r1, [r7, #8]
 8006992:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006996:	4313      	orrs	r3, r2
 8006998:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80069a6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	da03      	bge.n	80069b6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80069ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069b2:	613b      	str	r3, [r7, #16]
 80069b4:	e001      	b.n	80069ba <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80069b6:	2300      	movs	r3, #0
 80069b8:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80069ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d103      	bne.n	80069ca <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80069c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80069c6:	60fb      	str	r3, [r7, #12]
 80069c8:	e001      	b.n	80069ce <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80069ca:	2300      	movs	r3, #0
 80069cc:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80069ce:	787b      	ldrb	r3, [r7, #1]
 80069d0:	059b      	lsls	r3, r3, #22
 80069d2:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80069d6:	78bb      	ldrb	r3, [r7, #2]
 80069d8:	02db      	lsls	r3, r3, #11
 80069da:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80069de:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80069e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80069e4:	049b      	lsls	r3, r3, #18
 80069e6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80069ea:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80069ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80069ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80069f2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80069f8:	78fb      	ldrb	r3, [r7, #3]
 80069fa:	0159      	lsls	r1, r3, #5
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	440b      	add	r3, r1
 8006a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a04:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a0a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006a0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006a10:	2b03      	cmp	r3, #3
 8006a12:	d10f      	bne.n	8006a34 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006a14:	78fb      	ldrb	r3, [r7, #3]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	78fa      	ldrb	r2, [r7, #3]
 8006a24:	0151      	lsls	r1, r2, #5
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	440a      	add	r2, r1
 8006a2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a32:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	371c      	adds	r7, #28
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop

08006a44 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b08c      	sub	sp, #48	; 0x30
 8006a48:	af02      	add	r7, sp, #8
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	785b      	ldrb	r3, [r3, #1]
 8006a5a:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006a5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a60:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d028      	beq.n	8006ac0 <USB_HC_StartXfer+0x7c>
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	791b      	ldrb	r3, [r3, #4]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d124      	bne.n	8006ac0 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8006a76:	79fb      	ldrb	r3, [r7, #7]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d10b      	bne.n	8006a94 <USB_HC_StartXfer+0x50>
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	795b      	ldrb	r3, [r3, #5]
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d107      	bne.n	8006a94 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	785b      	ldrb	r3, [r3, #1]
 8006a88:	4619      	mov	r1, r3
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f000 fa2e 	bl	8006eec <USB_DoPing>
      return HAL_OK;
 8006a90:	2300      	movs	r3, #0
 8006a92:	e112      	b.n	8006cba <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8006a94:	79fb      	ldrb	r3, [r7, #7]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d112      	bne.n	8006ac0 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	015a      	lsls	r2, r3, #5
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	69fa      	ldr	r2, [r7, #28]
 8006aaa:	0151      	lsls	r1, r2, #5
 8006aac:	6a3a      	ldr	r2, [r7, #32]
 8006aae:	440a      	add	r2, r1
 8006ab0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ab4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006ab8:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	2200      	movs	r2, #0
 8006abe:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d018      	beq.n	8006afa <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	68ba      	ldr	r2, [r7, #8]
 8006ace:	8912      	ldrh	r2, [r2, #8]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	8912      	ldrh	r2, [r2, #8]
 8006ad8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006adc:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006ade:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006ae0:	8b7b      	ldrh	r3, [r7, #26]
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d90b      	bls.n	8006afe <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8006ae6:	8b7b      	ldrh	r3, [r7, #26]
 8006ae8:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006aea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006aec:	68ba      	ldr	r2, [r7, #8]
 8006aee:	8912      	ldrh	r2, [r2, #8]
 8006af0:	fb02 f203 	mul.w	r2, r2, r3
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	611a      	str	r2, [r3, #16]
 8006af8:	e001      	b.n	8006afe <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8006afa:	2301      	movs	r3, #1
 8006afc:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	78db      	ldrb	r3, [r3, #3]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d006      	beq.n	8006b14 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006b06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b08:	68ba      	ldr	r2, [r7, #8]
 8006b0a:	8912      	ldrh	r2, [r2, #8]
 8006b0c:	fb02 f203 	mul.w	r2, r2, r3
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b1e:	04d9      	lsls	r1, r3, #19
 8006b20:	4b68      	ldr	r3, [pc, #416]	; (8006cc4 <USB_HC_StartXfer+0x280>)
 8006b22:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b24:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	7a9b      	ldrb	r3, [r3, #10]
 8006b2a:	075b      	lsls	r3, r3, #29
 8006b2c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b30:	69f9      	ldr	r1, [r7, #28]
 8006b32:	0148      	lsls	r0, r1, #5
 8006b34:	6a39      	ldr	r1, [r7, #32]
 8006b36:	4401      	add	r1, r0
 8006b38:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b3c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b3e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006b40:	79fb      	ldrb	r3, [r7, #7]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d009      	beq.n	8006b5a <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	68d9      	ldr	r1, [r3, #12]
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	015a      	lsls	r2, r3, #5
 8006b4e:	6a3b      	ldr	r3, [r7, #32]
 8006b50:	4413      	add	r3, r2
 8006b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b56:	460a      	mov	r2, r1
 8006b58:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006b5a:	6a3b      	ldr	r3, [r7, #32]
 8006b5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f003 0301 	and.w	r3, r3, #1
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	bf0c      	ite	eq
 8006b6a:	2301      	moveq	r3, #1
 8006b6c:	2300      	movne	r3, #0
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	015a      	lsls	r2, r3, #5
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	4413      	add	r3, r2
 8006b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	69fa      	ldr	r2, [r7, #28]
 8006b82:	0151      	lsls	r1, r2, #5
 8006b84:	6a3a      	ldr	r2, [r7, #32]
 8006b86:	440a      	add	r2, r1
 8006b88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b8c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006b90:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	015a      	lsls	r2, r3, #5
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	4413      	add	r3, r2
 8006b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	7e7b      	ldrb	r3, [r7, #25]
 8006ba2:	075b      	lsls	r3, r3, #29
 8006ba4:	69f9      	ldr	r1, [r7, #28]
 8006ba6:	0148      	lsls	r0, r1, #5
 8006ba8:	6a39      	ldr	r1, [r7, #32]
 8006baa:	4401      	add	r1, r0
 8006bac:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	015a      	lsls	r2, r3, #5
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	4413      	add	r3, r2
 8006bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a41      	ldr	r2, [pc, #260]	; (8006cc8 <USB_HC_StartXfer+0x284>)
 8006bc4:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006bc6:	4b40      	ldr	r3, [pc, #256]	; (8006cc8 <USB_HC_StartXfer+0x284>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006bce:	4a3e      	ldr	r2, [pc, #248]	; (8006cc8 <USB_HC_StartXfer+0x284>)
 8006bd0:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	78db      	ldrb	r3, [r3, #3]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d006      	beq.n	8006be8 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006bda:	4b3b      	ldr	r3, [pc, #236]	; (8006cc8 <USB_HC_StartXfer+0x284>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006be2:	4a39      	ldr	r2, [pc, #228]	; (8006cc8 <USB_HC_StartXfer+0x284>)
 8006be4:	6013      	str	r3, [r2, #0]
 8006be6:	e005      	b.n	8006bf4 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006be8:	4b37      	ldr	r3, [pc, #220]	; (8006cc8 <USB_HC_StartXfer+0x284>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006bf0:	4a35      	ldr	r2, [pc, #212]	; (8006cc8 <USB_HC_StartXfer+0x284>)
 8006bf2:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006bf4:	4b34      	ldr	r3, [pc, #208]	; (8006cc8 <USB_HC_StartXfer+0x284>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bfc:	4a32      	ldr	r2, [pc, #200]	; (8006cc8 <USB_HC_StartXfer+0x284>)
 8006bfe:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	015a      	lsls	r2, r3, #5
 8006c04:	6a3b      	ldr	r3, [r7, #32]
 8006c06:	4413      	add	r3, r2
 8006c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	4b2e      	ldr	r3, [pc, #184]	; (8006cc8 <USB_HC_StartXfer+0x284>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8006c14:	79fb      	ldrb	r3, [r7, #7]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d14e      	bne.n	8006cb8 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	78db      	ldrb	r3, [r3, #3]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d14a      	bne.n	8006cb8 <USB_HC_StartXfer+0x274>
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d046      	beq.n	8006cb8 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	79db      	ldrb	r3, [r3, #7]
 8006c2e:	2b03      	cmp	r3, #3
 8006c30:	d830      	bhi.n	8006c94 <USB_HC_StartXfer+0x250>
 8006c32:	a201      	add	r2, pc, #4	; (adr r2, 8006c38 <USB_HC_StartXfer+0x1f4>)
 8006c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c38:	08006c49 	.word	0x08006c49
 8006c3c:	08006c6d 	.word	0x08006c6d
 8006c40:	08006c49 	.word	0x08006c49
 8006c44:	08006c6d 	.word	0x08006c6d
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	3303      	adds	r3, #3
 8006c4e:	089b      	lsrs	r3, r3, #2
 8006c50:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006c52:	8afa      	ldrh	r2, [r7, #22]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d91c      	bls.n	8006c98 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	699b      	ldr	r3, [r3, #24]
 8006c62:	f043 0220 	orr.w	r2, r3, #32
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	619a      	str	r2, [r3, #24]
          }
          break;
 8006c6a:	e015      	b.n	8006c98 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	3303      	adds	r3, #3
 8006c72:	089b      	lsrs	r3, r3, #2
 8006c74:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006c76:	8afa      	ldrh	r2, [r7, #22]
 8006c78:	6a3b      	ldr	r3, [r7, #32]
 8006c7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d90a      	bls.n	8006c9c <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	619a      	str	r2, [r3, #24]
          }
          break;
 8006c92:	e003      	b.n	8006c9c <USB_HC_StartXfer+0x258>

        default:
          break;
 8006c94:	bf00      	nop
 8006c96:	e002      	b.n	8006c9e <USB_HC_StartXfer+0x25a>
          break;
 8006c98:	bf00      	nop
 8006c9a:	e000      	b.n	8006c9e <USB_HC_StartXfer+0x25a>
          break;
 8006c9c:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	68d9      	ldr	r1, [r3, #12]
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	785a      	ldrb	r2, [r3, #1]
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	b298      	uxth	r0, r3
 8006cac:	2300      	movs	r3, #0
 8006cae:	9300      	str	r3, [sp, #0]
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	f7ff fb86 	bl	80063c4 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3728      	adds	r7, #40	; 0x28
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	1ff80000 	.word	0x1ff80000
 8006cc8:	20000234 	.word	0x20000234

08006ccc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cde:	695b      	ldr	r3, [r3, #20]
 8006ce0:	b29b      	uxth	r3, r3
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3714      	adds	r7, #20
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr

08006cee <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006cee:	b480      	push	{r7}
 8006cf0:	b087      	sub	sp, #28
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006cfe:	78fb      	ldrb	r3, [r7, #3]
 8006d00:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006d02:	2300      	movs	r3, #0
 8006d04:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	015a      	lsls	r2, r3, #5
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	0c9b      	lsrs	r3, r3, #18
 8006d16:	f003 0303 	and.w	r3, r3, #3
 8006d1a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d002      	beq.n	8006d28 <USB_HC_Halt+0x3a>
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d16c      	bne.n	8006e02 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	015a      	lsls	r2, r3, #5
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	4413      	add	r3, r2
 8006d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	0151      	lsls	r1, r2, #5
 8006d3a:	693a      	ldr	r2, [r7, #16]
 8006d3c:	440a      	add	r2, r1
 8006d3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d46:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d143      	bne.n	8006ddc <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	015a      	lsls	r2, r3, #5
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	0151      	lsls	r1, r2, #5
 8006d66:	693a      	ldr	r2, [r7, #16]
 8006d68:	440a      	add	r2, r1
 8006d6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d72:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	015a      	lsls	r2, r3, #5
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	0151      	lsls	r1, r2, #5
 8006d86:	693a      	ldr	r2, [r7, #16]
 8006d88:	440a      	add	r2, r1
 8006d8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d92:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	015a      	lsls	r2, r3, #5
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	0151      	lsls	r1, r2, #5
 8006da6:	693a      	ldr	r2, [r7, #16]
 8006da8:	440a      	add	r2, r1
 8006daa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006db2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	3301      	adds	r3, #1
 8006db8:	617b      	str	r3, [r7, #20]
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006dc0:	d81d      	bhi.n	8006dfe <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	015a      	lsls	r2, r3, #5
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	4413      	add	r3, r2
 8006dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dd8:	d0ec      	beq.n	8006db4 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006dda:	e080      	b.n	8006ede <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	015a      	lsls	r2, r3, #5
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	4413      	add	r3, r2
 8006de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	0151      	lsls	r1, r2, #5
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	440a      	add	r2, r1
 8006df2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006df6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006dfa:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006dfc:	e06f      	b.n	8006ede <USB_HC_Halt+0x1f0>
          break;
 8006dfe:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006e00:	e06d      	b.n	8006ede <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	015a      	lsls	r2, r3, #5
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	4413      	add	r3, r2
 8006e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	0151      	lsls	r1, r2, #5
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	440a      	add	r2, r1
 8006e18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e20:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d143      	bne.n	8006eba <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	015a      	lsls	r2, r3, #5
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	4413      	add	r3, r2
 8006e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	0151      	lsls	r1, r2, #5
 8006e44:	693a      	ldr	r2, [r7, #16]
 8006e46:	440a      	add	r2, r1
 8006e48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e50:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	015a      	lsls	r2, r3, #5
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	4413      	add	r3, r2
 8006e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	0151      	lsls	r1, r2, #5
 8006e64:	693a      	ldr	r2, [r7, #16]
 8006e66:	440a      	add	r2, r1
 8006e68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e70:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	015a      	lsls	r2, r3, #5
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	4413      	add	r3, r2
 8006e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	0151      	lsls	r1, r2, #5
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	440a      	add	r2, r1
 8006e88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e90:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	3301      	adds	r3, #1
 8006e96:	617b      	str	r3, [r7, #20]
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e9e:	d81d      	bhi.n	8006edc <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	015a      	lsls	r2, r3, #5
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006eb6:	d0ec      	beq.n	8006e92 <USB_HC_Halt+0x1a4>
 8006eb8:	e011      	b.n	8006ede <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	015a      	lsls	r2, r3, #5
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	0151      	lsls	r1, r2, #5
 8006ecc:	693a      	ldr	r2, [r7, #16]
 8006ece:	440a      	add	r2, r1
 8006ed0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ed4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ed8:	6013      	str	r3, [r2, #0]
 8006eda:	e000      	b.n	8006ede <USB_HC_Halt+0x1f0>
          break;
 8006edc:	bf00      	nop
    }
  }

  return HAL_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	371c      	adds	r7, #28
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b087      	sub	sp, #28
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006efc:	78fb      	ldrb	r3, [r7, #3]
 8006efe:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006f00:	2301      	movs	r3, #1
 8006f02:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	04da      	lsls	r2, r3, #19
 8006f08:	4b15      	ldr	r3, [pc, #84]	; (8006f60 <USB_DoPing+0x74>)
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	0151      	lsls	r1, r2, #5
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	440a      	add	r2, r1
 8006f14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f1c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	015a      	lsls	r2, r3, #5
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	4413      	add	r3, r2
 8006f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f34:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f3c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	015a      	lsls	r2, r3, #5
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	4413      	add	r3, r2
 8006f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	371c      	adds	r7, #28
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	1ff80000 	.word	0x1ff80000

08006f64 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b086      	sub	sp, #24
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006f70:	2300      	movs	r3, #0
 8006f72:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f7ff f9a1 	bl	80062bc <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006f7a:	2110      	movs	r1, #16
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f7ff f9d9 	bl	8006334 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f7ff f9fc 	bl	8006380 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006f88:	2300      	movs	r3, #0
 8006f8a:	613b      	str	r3, [r7, #16]
 8006f8c:	e01f      	b.n	8006fce <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	015a      	lsls	r2, r3, #5
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	4413      	add	r3, r2
 8006f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006fa4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006fac:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006fb4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	015a      	lsls	r2, r3, #5
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	3301      	adds	r3, #1
 8006fcc:	613b      	str	r3, [r7, #16]
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	2b0f      	cmp	r3, #15
 8006fd2:	d9dc      	bls.n	8006f8e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	613b      	str	r3, [r7, #16]
 8006fd8:	e034      	b.n	8007044 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	015a      	lsls	r2, r3, #5
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ff0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ff8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007000:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	015a      	lsls	r2, r3, #5
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	4413      	add	r3, r2
 800700a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800700e:	461a      	mov	r2, r3
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	3301      	adds	r3, #1
 8007018:	617b      	str	r3, [r7, #20]
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007020:	d80c      	bhi.n	800703c <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	015a      	lsls	r2, r3, #5
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	4413      	add	r3, r2
 800702a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007034:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007038:	d0ec      	beq.n	8007014 <USB_StopHost+0xb0>
 800703a:	e000      	b.n	800703e <USB_StopHost+0xda>
        break;
 800703c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	3301      	adds	r3, #1
 8007042:	613b      	str	r3, [r7, #16]
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	2b0f      	cmp	r3, #15
 8007048:	d9c7      	bls.n	8006fda <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007050:	461a      	mov	r2, r3
 8007052:	f04f 33ff 	mov.w	r3, #4294967295
 8007056:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f04f 32ff 	mov.w	r2, #4294967295
 800705e:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f7ff f91a 	bl	800629a <USB_EnableGlobalInt>

  return HAL_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3718      	adds	r7, #24
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8007070:	b590      	push	{r4, r7, lr}
 8007072:	b089      	sub	sp, #36	; 0x24
 8007074:	af04      	add	r7, sp, #16
 8007076:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8007078:	2302      	movs	r3, #2
 800707a:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 800707c:	2301      	movs	r3, #1
 800707e:	2202      	movs	r2, #2
 8007080:	2102      	movs	r1, #2
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fc3a 	bl	80078fc <USBH_FindInterface>
 8007088:	4603      	mov	r3, r0
 800708a:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 800708c:	7bbb      	ldrb	r3, [r7, #14]
 800708e:	2bff      	cmp	r3, #255	; 0xff
 8007090:	f000 812a 	beq.w	80072e8 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8007094:	7bbb      	ldrb	r3, [r7, #14]
 8007096:	4619      	mov	r1, r3
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 fc13 	bl	80078c4 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 80070a4:	2050      	movs	r0, #80	; 0x50
 80070a6:	f002 f8df 	bl	8009268 <malloc>
 80070aa:	4603      	mov	r3, r0
 80070ac:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80070b4:	69db      	ldr	r3, [r3, #28]
 80070b6:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80070b8:	7bbb      	ldrb	r3, [r7, #14]
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	211a      	movs	r1, #26
 80070be:	fb01 f303 	mul.w	r3, r1, r3
 80070c2:	4413      	add	r3, r2
 80070c4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	b25b      	sxtb	r3, r3
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	da15      	bge.n	80070fc <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80070d0:	7bbb      	ldrb	r3, [r7, #14]
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	211a      	movs	r1, #26
 80070d6:	fb01 f303 	mul.w	r3, r1, r3
 80070da:	4413      	add	r3, r2
 80070dc:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80070e0:	781a      	ldrb	r2, [r3, #0]
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80070e6:	7bbb      	ldrb	r3, [r7, #14]
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	211a      	movs	r1, #26
 80070ec:	fb01 f303 	mul.w	r3, r1, r3
 80070f0:	4413      	add	r3, r2
 80070f2:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80070f6:	881a      	ldrh	r2, [r3, #0]
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	785b      	ldrb	r3, [r3, #1]
 8007100:	4619      	mov	r1, r3
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f001 fd21 	bl	8008b4a <USBH_AllocPipe>
 8007108:	4603      	mov	r3, r0
 800710a:	461a      	mov	r2, r3
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	7819      	ldrb	r1, [r3, #0]
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	7858      	ldrb	r0, [r3, #1]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007124:	68ba      	ldr	r2, [r7, #8]
 8007126:	8952      	ldrh	r2, [r2, #10]
 8007128:	9202      	str	r2, [sp, #8]
 800712a:	2203      	movs	r2, #3
 800712c:	9201      	str	r2, [sp, #4]
 800712e:	9300      	str	r3, [sp, #0]
 8007130:	4623      	mov	r3, r4
 8007132:	4602      	mov	r2, r0
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f001 fcd9 	bl	8008aec <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	2200      	movs	r2, #0
 8007140:	4619      	mov	r1, r3
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f001 ffe0 	bl	8009108 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8007148:	2300      	movs	r3, #0
 800714a:	2200      	movs	r2, #0
 800714c:	210a      	movs	r1, #10
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 fbd4 	bl	80078fc <USBH_FindInterface>
 8007154:	4603      	mov	r3, r0
 8007156:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8007158:	7bbb      	ldrb	r3, [r7, #14]
 800715a:	2bff      	cmp	r3, #255	; 0xff
 800715c:	f000 80c4 	beq.w	80072e8 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007160:	7bbb      	ldrb	r3, [r7, #14]
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	211a      	movs	r1, #26
 8007166:	fb01 f303 	mul.w	r3, r1, r3
 800716a:	4413      	add	r3, r2
 800716c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	b25b      	sxtb	r3, r3
 8007174:	2b00      	cmp	r3, #0
 8007176:	da16      	bge.n	80071a6 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007178:	7bbb      	ldrb	r3, [r7, #14]
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	211a      	movs	r1, #26
 800717e:	fb01 f303 	mul.w	r3, r1, r3
 8007182:	4413      	add	r3, r2
 8007184:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8007188:	781a      	ldrb	r2, [r3, #0]
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800718e:	7bbb      	ldrb	r3, [r7, #14]
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	211a      	movs	r1, #26
 8007194:	fb01 f303 	mul.w	r3, r1, r3
 8007198:	4413      	add	r3, r2
 800719a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800719e:	881a      	ldrh	r2, [r3, #0]
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	835a      	strh	r2, [r3, #26]
 80071a4:	e015      	b.n	80071d2 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80071a6:	7bbb      	ldrb	r3, [r7, #14]
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	211a      	movs	r1, #26
 80071ac:	fb01 f303 	mul.w	r3, r1, r3
 80071b0:	4413      	add	r3, r2
 80071b2:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80071b6:	781a      	ldrb	r2, [r3, #0]
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80071bc:	7bbb      	ldrb	r3, [r7, #14]
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	211a      	movs	r1, #26
 80071c2:	fb01 f303 	mul.w	r3, r1, r3
 80071c6:	4413      	add	r3, r2
 80071c8:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80071cc:	881a      	ldrh	r2, [r3, #0]
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80071d2:	7bbb      	ldrb	r3, [r7, #14]
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	211a      	movs	r1, #26
 80071d8:	fb01 f303 	mul.w	r3, r1, r3
 80071dc:	4413      	add	r3, r2
 80071de:	f203 3352 	addw	r3, r3, #850	; 0x352
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	b25b      	sxtb	r3, r3
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	da16      	bge.n	8007218 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80071ea:	7bbb      	ldrb	r3, [r7, #14]
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	211a      	movs	r1, #26
 80071f0:	fb01 f303 	mul.w	r3, r1, r3
 80071f4:	4413      	add	r3, r2
 80071f6:	f203 3352 	addw	r3, r3, #850	; 0x352
 80071fa:	781a      	ldrb	r2, [r3, #0]
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007200:	7bbb      	ldrb	r3, [r7, #14]
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	211a      	movs	r1, #26
 8007206:	fb01 f303 	mul.w	r3, r1, r3
 800720a:	4413      	add	r3, r2
 800720c:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8007210:	881a      	ldrh	r2, [r3, #0]
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	835a      	strh	r2, [r3, #26]
 8007216:	e015      	b.n	8007244 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007218:	7bbb      	ldrb	r3, [r7, #14]
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	211a      	movs	r1, #26
 800721e:	fb01 f303 	mul.w	r3, r1, r3
 8007222:	4413      	add	r3, r2
 8007224:	f203 3352 	addw	r3, r3, #850	; 0x352
 8007228:	781a      	ldrb	r2, [r3, #0]
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800722e:	7bbb      	ldrb	r3, [r7, #14]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	211a      	movs	r1, #26
 8007234:	fb01 f303 	mul.w	r3, r1, r3
 8007238:	4413      	add	r3, r2
 800723a:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800723e:	881a      	ldrh	r2, [r3, #0]
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	7b9b      	ldrb	r3, [r3, #14]
 8007248:	4619      	mov	r1, r3
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f001 fc7d 	bl	8008b4a <USBH_AllocPipe>
 8007250:	4603      	mov	r3, r0
 8007252:	461a      	mov	r2, r3
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	7bdb      	ldrb	r3, [r3, #15]
 800725c:	4619      	mov	r1, r3
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f001 fc73 	bl	8008b4a <USBH_AllocPipe>
 8007264:	4603      	mov	r3, r0
 8007266:	461a      	mov	r2, r3
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	7b59      	ldrb	r1, [r3, #13]
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	7b98      	ldrb	r0, [r3, #14]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007280:	68ba      	ldr	r2, [r7, #8]
 8007282:	8b12      	ldrh	r2, [r2, #24]
 8007284:	9202      	str	r2, [sp, #8]
 8007286:	2202      	movs	r2, #2
 8007288:	9201      	str	r2, [sp, #4]
 800728a:	9300      	str	r3, [sp, #0]
 800728c:	4623      	mov	r3, r4
 800728e:	4602      	mov	r2, r0
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f001 fc2b 	bl	8008aec <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	7b19      	ldrb	r1, [r3, #12]
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	7bd8      	ldrb	r0, [r3, #15]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	8b52      	ldrh	r2, [r2, #26]
 80072ae:	9202      	str	r2, [sp, #8]
 80072b0:	2202      	movs	r2, #2
 80072b2:	9201      	str	r2, [sp, #4]
 80072b4:	9300      	str	r3, [sp, #0]
 80072b6:	4623      	mov	r3, r4
 80072b8:	4602      	mov	r2, r0
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f001 fc16 	bl	8008aec <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	7b5b      	ldrb	r3, [r3, #13]
 80072cc:	2200      	movs	r2, #0
 80072ce:	4619      	mov	r1, r3
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f001 ff19 	bl	8009108 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	7b1b      	ldrb	r3, [r3, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	4619      	mov	r1, r3
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f001 ff12 	bl	8009108 <USBH_LL_SetToggle>
      status = USBH_OK;
 80072e4:	2300      	movs	r3, #0
 80072e6:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 80072e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3714      	adds	r7, #20
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd90      	pop	{r4, r7, pc}

080072f2 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b084      	sub	sp, #16
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007300:	69db      	ldr	r3, [r3, #28]
 8007302:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00e      	beq.n	800732a <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	4619      	mov	r1, r3
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f001 fc09 	bl	8008b2a <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	4619      	mov	r1, r3
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f001 fc31 	bl	8008b86 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2200      	movs	r2, #0
 8007328:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	7b1b      	ldrb	r3, [r3, #12]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d00e      	beq.n	8007350 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	7b1b      	ldrb	r3, [r3, #12]
 8007336:	4619      	mov	r1, r3
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f001 fbf6 	bl	8008b2a <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	7b1b      	ldrb	r3, [r3, #12]
 8007342:	4619      	mov	r1, r3
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f001 fc1e 	bl	8008b86 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	7b5b      	ldrb	r3, [r3, #13]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00e      	beq.n	8007376 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	7b5b      	ldrb	r3, [r3, #13]
 800735c:	4619      	mov	r1, r3
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f001 fbe3 	bl	8008b2a <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	7b5b      	ldrb	r3, [r3, #13]
 8007368:	4619      	mov	r1, r3
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f001 fc0b 	bl	8008b86 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800737c:	69db      	ldr	r3, [r3, #28]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00b      	beq.n	800739a <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007388:	69db      	ldr	r3, [r3, #28]
 800738a:	4618      	mov	r0, r3
 800738c:	f001 ff74 	bl	8009278 <free>
    phost->pActiveClass->pData = 0U;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007396:	2200      	movs	r2, #0
 8007398:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 80073ac:	2302      	movs	r3, #2
 80073ae:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80073b6:	69db      	ldr	r3, [r3, #28]
 80073b8:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	3340      	adds	r3, #64	; 0x40
 80073be:	4619      	mov	r1, r3
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 f8b2 	bl	800752a <GetLineCoding>
 80073c6:	4603      	mov	r3, r0
 80073c8:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 80073ca:	7bfb      	ldrb	r3, [r7, #15]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d105      	bne.n	80073dc <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80073d6:	2102      	movs	r1, #2
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	4798      	blx	r3
  }
  return status;
 80073dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
	...

080073e8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80073f0:	2301      	movs	r3, #1
 80073f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80073f4:	2300      	movs	r3, #0
 80073f6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80073fe:	69db      	ldr	r3, [r3, #28]
 8007400:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007408:	2b04      	cmp	r3, #4
 800740a:	d877      	bhi.n	80074fc <USBH_CDC_Process+0x114>
 800740c:	a201      	add	r2, pc, #4	; (adr r2, 8007414 <USBH_CDC_Process+0x2c>)
 800740e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007412:	bf00      	nop
 8007414:	08007429 	.word	0x08007429
 8007418:	0800742f 	.word	0x0800742f
 800741c:	0800745f 	.word	0x0800745f
 8007420:	080074d3 	.word	0x080074d3
 8007424:	080074e1 	.word	0x080074e1
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8007428:	2300      	movs	r3, #0
 800742a:	73fb      	strb	r3, [r7, #15]
    break;
 800742c:	e06d      	b.n	800750a <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007432:	4619      	mov	r1, r3
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f897 	bl	8007568 <SetLineCoding>
 800743a:	4603      	mov	r3, r0
 800743c:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800743e:	7bbb      	ldrb	r3, [r7, #14]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d104      	bne.n	800744e <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	2202      	movs	r2, #2
 8007448:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800744c:	e058      	b.n	8007500 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 800744e:	7bbb      	ldrb	r3, [r7, #14]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d055      	beq.n	8007500 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	2204      	movs	r2, #4
 8007458:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800745c:	e050      	b.n	8007500 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	3340      	adds	r3, #64	; 0x40
 8007462:	4619      	mov	r1, r3
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 f860 	bl	800752a <GetLineCoding>
 800746a:	4603      	mov	r3, r0
 800746c:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800746e:	7bbb      	ldrb	r3, [r7, #14]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d126      	bne.n	80074c2 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007486:	791b      	ldrb	r3, [r3, #4]
 8007488:	429a      	cmp	r2, r3
 800748a:	d13b      	bne.n	8007504 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007496:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007498:	429a      	cmp	r2, r3
 800749a:	d133      	bne.n	8007504 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074a6:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d12b      	bne.n	8007504 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074b4:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d124      	bne.n	8007504 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 f95a 	bl	8007774 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 80074c0:	e020      	b.n	8007504 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 80074c2:	7bbb      	ldrb	r3, [r7, #14]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d01d      	beq.n	8007504 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	2204      	movs	r2, #4
 80074cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 80074d0:	e018      	b.n	8007504 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f867 	bl	80075a6 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 f8dc 	bl	8007696 <CDC_ProcessReception>
    break;
 80074de:	e014      	b.n	800750a <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 80074e0:	2100      	movs	r1, #0
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 fece 	bl	8008284 <USBH_ClrFeature>
 80074e8:	4603      	mov	r3, r0
 80074ea:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 80074ec:	7bbb      	ldrb	r3, [r7, #14]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d10a      	bne.n	8007508 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 80074fa:	e005      	b.n	8007508 <USBH_CDC_Process+0x120>

  default:
    break;
 80074fc:	bf00      	nop
 80074fe:	e004      	b.n	800750a <USBH_CDC_Process+0x122>
    break;
 8007500:	bf00      	nop
 8007502:	e002      	b.n	800750a <USBH_CDC_Process+0x122>
    break;
 8007504:	bf00      	nop
 8007506:	e000      	b.n	800750a <USBH_CDC_Process+0x122>
    break;
 8007508:	bf00      	nop

  }

  return status;
 800750a:	7bfb      	ldrb	r3, [r7, #15]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	370c      	adds	r7, #12
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr

0800752a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b082      	sub	sp, #8
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
 8007532:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	22a1      	movs	r2, #161	; 0xa1
 8007538:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2221      	movs	r2, #33	; 0x21
 800753e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2207      	movs	r2, #7
 8007550:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	2207      	movs	r2, #7
 8007556:	4619      	mov	r1, r3
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f001 f873 	bl	8008644 <USBH_CtlReq>
 800755e:	4603      	mov	r3, r0
}
 8007560:	4618      	mov	r0, r3
 8007562:	3708      	adds	r7, #8
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2221      	movs	r2, #33	; 0x21
 8007576:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2220      	movs	r2, #32
 800757c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2207      	movs	r2, #7
 800758e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	2207      	movs	r2, #7
 8007594:	4619      	mov	r1, r3
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f001 f854 	bl	8008644 <USBH_CtlReq>
 800759c:	4603      	mov	r3, r0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3708      	adds	r7, #8
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b086      	sub	sp, #24
 80075aa:	af02      	add	r7, sp, #8
 80075ac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80075b4:	69db      	ldr	r3, [r3, #28]
 80075b6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80075b8:	2300      	movs	r3, #0
 80075ba:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d002      	beq.n	80075cc <CDC_ProcessTransmission+0x26>
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d025      	beq.n	8007616 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 80075ca:	e060      	b.n	800768e <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	8b12      	ldrh	r2, [r2, #24]
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d90c      	bls.n	80075f2 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	69d9      	ldr	r1, [r3, #28]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	8b1a      	ldrh	r2, [r3, #24]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	7b58      	ldrb	r0, [r3, #13]
 80075e4:	2301      	movs	r3, #1
 80075e6:	9300      	str	r3, [sp, #0]
 80075e8:	4603      	mov	r3, r0
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f001 fa3b 	bl	8008a66 <USBH_BulkSendData>
 80075f0:	e00c      	b.n	800760c <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	7b58      	ldrb	r0, [r3, #13]
 8007600:	2301      	movs	r3, #1
 8007602:	9300      	str	r3, [sp, #0]
 8007604:	4603      	mov	r3, r0
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f001 fa2d 	bl	8008a66 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2202      	movs	r2, #2
 8007610:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8007614:	e03b      	b.n	800768e <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	7b5b      	ldrb	r3, [r3, #13]
 800761a:	4619      	mov	r1, r3
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f001 fd49 	bl	80090b4 <USBH_LL_GetURBState>
 8007622:	4603      	mov	r3, r0
 8007624:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8007626:	7afb      	ldrb	r3, [r7, #11]
 8007628:	2b01      	cmp	r3, #1
 800762a:	d128      	bne.n	800767e <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	8b12      	ldrh	r2, [r2, #24]
 8007634:	4293      	cmp	r3, r2
 8007636:	d90e      	bls.n	8007656 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	8b12      	ldrh	r2, [r2, #24]
 8007640:	1a9a      	subs	r2, r3, r2
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	69db      	ldr	r3, [r3, #28]
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	8b12      	ldrh	r2, [r2, #24]
 800764e:	441a      	add	r2, r3
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	61da      	str	r2, [r3, #28]
 8007654:	e002      	b.n	800765c <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2200      	movs	r2, #0
 800765a:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007660:	2b00      	cmp	r3, #0
 8007662:	d004      	beq.n	800766e <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800766c:	e00e      	b.n	800768c <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 f868 	bl	800774c <USBH_CDC_TransmitCallback>
    break;
 800767c:	e006      	b.n	800768c <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 800767e:	7afb      	ldrb	r3, [r7, #11]
 8007680:	2b02      	cmp	r3, #2
 8007682:	d103      	bne.n	800768c <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800768c:	bf00      	nop
  }
}
 800768e:	bf00      	nop
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b086      	sub	sp, #24
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80076a4:	69db      	ldr	r3, [r3, #28]
 80076a6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80076a8:	2300      	movs	r3, #0
 80076aa:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80076b2:	2b03      	cmp	r3, #3
 80076b4:	d002      	beq.n	80076bc <CDC_ProcessReception+0x26>
 80076b6:	2b04      	cmp	r3, #4
 80076b8:	d00e      	beq.n	80076d8 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 80076ba:	e043      	b.n	8007744 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	6a19      	ldr	r1, [r3, #32]
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	8b5a      	ldrh	r2, [r3, #26]
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	7b1b      	ldrb	r3, [r3, #12]
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f001 f9f1 	bl	8008ab0 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	2204      	movs	r2, #4
 80076d2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 80076d6:	e035      	b.n	8007744 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	7b1b      	ldrb	r3, [r3, #12]
 80076dc:	4619      	mov	r1, r3
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f001 fce8 	bl	80090b4 <USBH_LL_GetURBState>
 80076e4:	4603      	mov	r3, r0
 80076e6:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 80076e8:	7cfb      	ldrb	r3, [r7, #19]
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d129      	bne.n	8007742 <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	7b1b      	ldrb	r3, [r3, #12]
 80076f2:	4619      	mov	r1, r3
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f001 fc4b 	bl	8008f90 <USBH_LL_GetLastXferSize>
 80076fa:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	429a      	cmp	r2, r3
 8007704:	d016      	beq.n	8007734 <CDC_ProcessReception+0x9e>
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	8b5b      	ldrh	r3, [r3, #26]
 800770a:	461a      	mov	r2, r3
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	4293      	cmp	r3, r2
 8007710:	d910      	bls.n	8007734 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	1ad2      	subs	r2, r2, r3
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	6a1a      	ldr	r2, [r3, #32]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	441a      	add	r2, r3
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	2203      	movs	r2, #3
 800772e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8007732:	e006      	b.n	8007742 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 f80f 	bl	8007760 <USBH_CDC_ReceiveCallback>
    break;
 8007742:	bf00      	nop
  }
}
 8007744:	bf00      	nop
 8007746:	3718      	adds	r7, #24
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]

}
 8007754:	bf00      	nop
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]

}
 8007768:	bf00      	nop
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]

}
 800777c:	bf00      	nop
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	4613      	mov	r3, r2
 8007794:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d101      	bne.n	80077a0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800779c:	2302      	movs	r3, #2
 800779e:	e019      	b.n	80077d4 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	79fa      	ldrb	r2, [r7, #7]
 80077a4:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	f000 f80f 	bl	80077dc <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d003      	beq.n	80077cc <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	68ba      	ldr	r2, [r7, #8]
 80077c8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f001 fb2d 	bl	8008e2c <USBH_LL_Init>

  return USBH_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80077dc:	b480      	push	{r7}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80077e4:	2300      	movs	r3, #0
 80077e6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80077e8:	e008      	b.n	80077fc <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	32e0      	adds	r2, #224	; 0xe0
 80077f0:	2100      	movs	r1, #0
 80077f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	3301      	adds	r3, #1
 80077fa:	60fb      	str	r3, [r7, #12]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2b0e      	cmp	r3, #14
 8007800:	d9f3      	bls.n	80077ea <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8007802:	2300      	movs	r3, #0
 8007804:	60fb      	str	r3, [r7, #12]
 8007806:	e009      	b.n	800781c <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	4413      	add	r3, r2
 800780e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007812:	2200      	movs	r2, #0
 8007814:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	3301      	adds	r3, #1
 800781a:	60fb      	str	r3, [r7, #12]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007822:	d3f1      	bcc.n	8007808 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2201      	movs	r2, #1
 8007842:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2240      	movs	r2, #64	; 0x40
 8007848:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3714      	adds	r7, #20
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr

0800786e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800786e:	b480      	push	{r7}
 8007870:	b085      	sub	sp, #20
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
 8007876:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8007878:	2300      	movs	r3, #0
 800787a:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d017      	beq.n	80078b2 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007888:	2b00      	cmp	r3, #0
 800788a:	d10f      	bne.n	80078ac <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007892:	1c59      	adds	r1, r3, #1
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	33dc      	adds	r3, #220	; 0xdc
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	4413      	add	r3, r2
 80078a2:	683a      	ldr	r2, [r7, #0]
 80078a4:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 80078a6:	2300      	movs	r3, #0
 80078a8:	73fb      	strb	r3, [r7, #15]
 80078aa:	e004      	b.n	80078b6 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80078ac:	2302      	movs	r3, #2
 80078ae:	73fb      	strb	r3, [r7, #15]
 80078b0:	e001      	b.n	80078b6 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80078b2:	2302      	movs	r3, #2
 80078b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80078b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3714      	adds	r7, #20
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	460b      	mov	r3, r1
 80078ce:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 80078d0:	2300      	movs	r3, #0
 80078d2:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 80078da:	78fa      	ldrb	r2, [r7, #3]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d204      	bcs.n	80078ea <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	78fa      	ldrb	r2, [r7, #3]
 80078e4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 80078e8:	e001      	b.n	80078ee <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 80078ea:	2302      	movs	r3, #2
 80078ec:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80078ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3714      	adds	r7, #20
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b087      	sub	sp, #28
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	4608      	mov	r0, r1
 8007906:	4611      	mov	r1, r2
 8007908:	461a      	mov	r2, r3
 800790a:	4603      	mov	r3, r0
 800790c:	70fb      	strb	r3, [r7, #3]
 800790e:	460b      	mov	r3, r1
 8007910:	70bb      	strb	r3, [r7, #2]
 8007912:	4613      	mov	r3, r2
 8007914:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8007916:	2300      	movs	r3, #0
 8007918:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800791a:	2300      	movs	r3, #0
 800791c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8007924:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007926:	e025      	b.n	8007974 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007928:	7dfb      	ldrb	r3, [r7, #23]
 800792a:	221a      	movs	r2, #26
 800792c:	fb02 f303 	mul.w	r3, r2, r3
 8007930:	3308      	adds	r3, #8
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	4413      	add	r3, r2
 8007936:	3302      	adds	r3, #2
 8007938:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	795b      	ldrb	r3, [r3, #5]
 800793e:	78fa      	ldrb	r2, [r7, #3]
 8007940:	429a      	cmp	r2, r3
 8007942:	d002      	beq.n	800794a <USBH_FindInterface+0x4e>
 8007944:	78fb      	ldrb	r3, [r7, #3]
 8007946:	2bff      	cmp	r3, #255	; 0xff
 8007948:	d111      	bne.n	800796e <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800794e:	78ba      	ldrb	r2, [r7, #2]
 8007950:	429a      	cmp	r2, r3
 8007952:	d002      	beq.n	800795a <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8007954:	78bb      	ldrb	r3, [r7, #2]
 8007956:	2bff      	cmp	r3, #255	; 0xff
 8007958:	d109      	bne.n	800796e <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800795e:	787a      	ldrb	r2, [r7, #1]
 8007960:	429a      	cmp	r2, r3
 8007962:	d002      	beq.n	800796a <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007964:	787b      	ldrb	r3, [r7, #1]
 8007966:	2bff      	cmp	r3, #255	; 0xff
 8007968:	d101      	bne.n	800796e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800796a:	7dfb      	ldrb	r3, [r7, #23]
 800796c:	e006      	b.n	800797c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800796e:	7dfb      	ldrb	r3, [r7, #23]
 8007970:	3301      	adds	r3, #1
 8007972:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007974:	7dfb      	ldrb	r3, [r7, #23]
 8007976:	2b01      	cmp	r3, #1
 8007978:	d9d6      	bls.n	8007928 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800797a:	23ff      	movs	r3, #255	; 0xff
}
 800797c:	4618      	mov	r0, r3
 800797e:	371c      	adds	r7, #28
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f001 fa87 	bl	8008ea4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8007996:	2101      	movs	r1, #1
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f001 fb9e 	bl	80090da <USBH_LL_DriverVBUS>

  return USBH_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3708      	adds	r7, #8
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b088      	sub	sp, #32
 80079ac:	af04      	add	r7, sp, #16
 80079ae:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80079b0:	2302      	movs	r3, #2
 80079b2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80079b4:	2300      	movs	r3, #0
 80079b6:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 faec 	bl	8007f96 <USBH_IsPortEnabled>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d10c      	bne.n	80079de <USBH_Process+0x36>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d007      	beq.n	80079de <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	2b03      	cmp	r3, #3
 80079d6:	d002      	beq.n	80079de <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2203      	movs	r2, #3
 80079dc:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	2b0b      	cmp	r3, #11
 80079e6:	f200 814c 	bhi.w	8007c82 <USBH_Process+0x2da>
 80079ea:	a201      	add	r2, pc, #4	; (adr r2, 80079f0 <USBH_Process+0x48>)
 80079ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f0:	08007a21 	.word	0x08007a21
 80079f4:	08007a43 	.word	0x08007a43
 80079f8:	08007a57 	.word	0x08007a57
 80079fc:	08007c5d 	.word	0x08007c5d
 8007a00:	08007c83 	.word	0x08007c83
 8007a04:	08007ae5 	.word	0x08007ae5
 8007a08:	08007c13 	.word	0x08007c13
 8007a0c:	08007b15 	.word	0x08007b15
 8007a10:	08007b35 	.word	0x08007b35
 8007a14:	08007b55 	.word	0x08007b55
 8007a18:	08007b83 	.word	0x08007b83
 8007a1c:	08007c45 	.word	0x08007c45
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f000 812c 	beq.w	8007c86 <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2201      	movs	r2, #1
 8007a32:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8007a34:	20c8      	movs	r0, #200	; 0xc8
 8007a36:	f001 fb9a 	bl	800916e <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f001 fa8d 	bl	8008f5a <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007a40:	e121      	b.n	8007c86 <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	f040 811e 	bne.w	8007c8a <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2202      	movs	r2, #2
 8007a52:	701a      	strb	r2, [r3, #0]
    }
    break;
 8007a54:	e119      	b.n	8007c8a <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8007a56:	2064      	movs	r0, #100	; 0x64
 8007a58:	f001 fb89 	bl	800916e <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f001 fa57 	bl	8008f10 <USBH_LL_GetSpeed>
 8007a62:	4603      	mov	r3, r0
 8007a64:	461a      	mov	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2205      	movs	r2, #5
 8007a70:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8007a72:	2100      	movs	r1, #0
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f001 f868 	bl	8008b4a <USBH_AllocPipe>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8007a82:	2180      	movs	r1, #128	; 0x80
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f001 f860 	bl	8008b4a <USBH_AllocPipe>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	7919      	ldrb	r1, [r3, #4]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8007aa6:	b292      	uxth	r2, r2
 8007aa8:	9202      	str	r2, [sp, #8]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	9201      	str	r2, [sp, #4]
 8007aae:	9300      	str	r3, [sp, #0]
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2280      	movs	r2, #128	; 0x80
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f001 f819 	bl	8008aec <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	7959      	ldrb	r1, [r3, #5]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8007ace:	b292      	uxth	r2, r2
 8007ad0:	9202      	str	r2, [sp, #8]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	9201      	str	r2, [sp, #4]
 8007ad6:	9300      	str	r3, [sp, #0]
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2200      	movs	r2, #0
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f001 f805 	bl	8008aec <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007ae2:	e0e3      	b.n	8007cac <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f8e7 	bl	8007cb8 <USBH_HandleEnum>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f040 80ce 	bne.w	8007c8e <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d103      	bne.n	8007b0c <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2208      	movs	r2, #8
 8007b08:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8007b0a:	e0c0      	b.n	8007c8e <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2207      	movs	r2, #7
 8007b10:	701a      	strb	r2, [r3, #0]
    break;
 8007b12:	e0bc      	b.n	8007c8e <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	f000 80b9 	beq.w	8007c92 <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007b26:	2101      	movs	r1, #1
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2208      	movs	r2, #8
 8007b30:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007b32:	e0ae      	b.n	8007c92 <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 fb59 	bl	80081f6 <USBH_SetCfg>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f040 80a5 	bne.w	8007c96 <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2209      	movs	r2, #9
 8007b50:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007b52:	e0a0      	b.n	8007c96 <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8007b5a:	f003 0320 	and.w	r3, r3, #32
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d00b      	beq.n	8007b7a <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007b62:	2101      	movs	r1, #1
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fb69 	bl	800823c <USBH_SetFeature>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f040 8094 	bne.w	8007c9a <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	220a      	movs	r2, #10
 8007b76:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007b78:	e08f      	b.n	8007c9a <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	220a      	movs	r2, #10
 8007b7e:	701a      	strb	r2, [r3, #0]
    break;
 8007b80:	e08b      	b.n	8007c9a <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f000 8088 	beq.w	8007c9e <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007b96:	2300      	movs	r3, #0
 8007b98:	73fb      	strb	r3, [r7, #15]
 8007b9a:	e017      	b.n	8007bcc <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007b9c:	7bfb      	ldrb	r3, [r7, #15]
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	33dc      	adds	r3, #220	; 0xdc
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	4413      	add	r3, r2
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	791a      	ldrb	r2, [r3, #4]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d108      	bne.n	8007bc6 <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 8007bb4:	7bfb      	ldrb	r3, [r7, #15]
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	33dc      	adds	r3, #220	; 0xdc
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	4413      	add	r3, r2
 8007bbe:	685a      	ldr	r2, [r3, #4]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007bc6:	7bfb      	ldrb	r3, [r7, #15]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	73fb      	strb	r3, [r7, #15]
 8007bcc:	7bfb      	ldrb	r3, [r7, #15]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d0e4      	beq.n	8007b9c <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d016      	beq.n	8007c0a <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	4798      	blx	r3
 8007be8:	4603      	mov	r3, r0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d109      	bne.n	8007c02 <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2206      	movs	r2, #6
 8007bf2:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007bfa:	2103      	movs	r1, #3
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007c00:	e04d      	b.n	8007c9e <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	220d      	movs	r2, #13
 8007c06:	701a      	strb	r2, [r3, #0]
    break;
 8007c08:	e049      	b.n	8007c9e <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	220d      	movs	r2, #13
 8007c0e:	701a      	strb	r2, [r3, #0]
    break;
 8007c10:	e045      	b.n	8007c9e <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d00f      	beq.n	8007c3c <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007c22:	691b      	ldr	r3, [r3, #16]
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	4798      	blx	r3
 8007c28:	4603      	mov	r3, r0
 8007c2a:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8007c2c:	7bbb      	ldrb	r3, [r7, #14]
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d136      	bne.n	8007ca2 <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	220b      	movs	r2, #11
 8007c38:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8007c3a:	e032      	b.n	8007ca2 <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	220d      	movs	r2, #13
 8007c40:	701a      	strb	r2, [r3, #0]
    break;
 8007c42:	e02e      	b.n	8007ca2 <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d02b      	beq.n	8007ca6 <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007c54:	695b      	ldr	r3, [r3, #20]
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	4798      	blx	r3
    }
    break;
 8007c5a:	e024      	b.n	8007ca6 <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f7ff fdbd 	bl	80077dc <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d01e      	beq.n	8007caa <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8007c80:	e013      	b.n	8007caa <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 8007c82:	bf00      	nop
 8007c84:	e012      	b.n	8007cac <USBH_Process+0x304>
    break;
 8007c86:	bf00      	nop
 8007c88:	e010      	b.n	8007cac <USBH_Process+0x304>
    break;
 8007c8a:	bf00      	nop
 8007c8c:	e00e      	b.n	8007cac <USBH_Process+0x304>
    break;
 8007c8e:	bf00      	nop
 8007c90:	e00c      	b.n	8007cac <USBH_Process+0x304>
    break;
 8007c92:	bf00      	nop
 8007c94:	e00a      	b.n	8007cac <USBH_Process+0x304>
    break;
 8007c96:	bf00      	nop
 8007c98:	e008      	b.n	8007cac <USBH_Process+0x304>
    break;
 8007c9a:	bf00      	nop
 8007c9c:	e006      	b.n	8007cac <USBH_Process+0x304>
    break;
 8007c9e:	bf00      	nop
 8007ca0:	e004      	b.n	8007cac <USBH_Process+0x304>
    break;
 8007ca2:	bf00      	nop
 8007ca4:	e002      	b.n	8007cac <USBH_Process+0x304>
    break;
 8007ca6:	bf00      	nop
 8007ca8:	e000      	b.n	8007cac <USBH_Process+0x304>
    break;
 8007caa:	bf00      	nop
  }
 return USBH_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop

08007cb8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b088      	sub	sp, #32
 8007cbc:	af04      	add	r7, sp, #16
 8007cbe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	785b      	ldrb	r3, [r3, #1]
 8007cc8:	2b07      	cmp	r3, #7
 8007cca:	f200 80f8 	bhi.w	8007ebe <USBH_HandleEnum+0x206>
 8007cce:	a201      	add	r2, pc, #4	; (adr r2, 8007cd4 <USBH_HandleEnum+0x1c>)
 8007cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd4:	08007cf5 	.word	0x08007cf5
 8007cd8:	08007d67 	.word	0x08007d67
 8007cdc:	08007d7f 	.word	0x08007d7f
 8007ce0:	08007df5 	.word	0x08007df5
 8007ce4:	08007e0b 	.word	0x08007e0b
 8007ce8:	08007e27 	.word	0x08007e27
 8007cec:	08007e5b 	.word	0x08007e5b
 8007cf0:	08007e8f 	.word	0x08007e8f
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8007cf4:	2108      	movs	r1, #8
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f9ad 	bl	8008056 <USBH_Get_DevDesc>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	f040 80df 	bne.w	8007ec2 <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2201      	movs	r2, #1
 8007d12:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	7919      	ldrb	r1, [r3, #4]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007d28:	b292      	uxth	r2, r2
 8007d2a:	9202      	str	r2, [sp, #8]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	9201      	str	r2, [sp, #4]
 8007d30:	9300      	str	r3, [sp, #0]
 8007d32:	4603      	mov	r3, r0
 8007d34:	2280      	movs	r2, #128	; 0x80
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 fed8 	bl	8008aec <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	7959      	ldrb	r1, [r3, #5]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007d50:	b292      	uxth	r2, r2
 8007d52:	9202      	str	r2, [sp, #8]
 8007d54:	2200      	movs	r2, #0
 8007d56:	9201      	str	r2, [sp, #4]
 8007d58:	9300      	str	r3, [sp, #0]
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 fec4 	bl	8008aec <USBH_OpenPipe>

    }
    break;
 8007d64:	e0ad      	b.n	8007ec2 <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8007d66:	2112      	movs	r1, #18
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 f974 	bl	8008056 <USBH_Get_DevDesc>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f040 80a8 	bne.w	8007ec6 <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2202      	movs	r2, #2
 8007d7a:	705a      	strb	r2, [r3, #1]

    }
    break;
 8007d7c:	e0a3      	b.n	8007ec6 <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8007d7e:	2101      	movs	r1, #1
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 fa14 	bl	80081ae <USBH_SetAddress>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f040 809e 	bne.w	8007eca <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 8007d8e:	2002      	movs	r0, #2
 8007d90:	f001 f9ed 	bl	800916e <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2203      	movs	r2, #3
 8007da0:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	7919      	ldrb	r1, [r3, #4]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007db6:	b292      	uxth	r2, r2
 8007db8:	9202      	str	r2, [sp, #8]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	9201      	str	r2, [sp, #4]
 8007dbe:	9300      	str	r3, [sp, #0]
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2280      	movs	r2, #128	; 0x80
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 fe91 	bl	8008aec <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	7959      	ldrb	r1, [r3, #5]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007dde:	b292      	uxth	r2, r2
 8007de0:	9202      	str	r2, [sp, #8]
 8007de2:	2200      	movs	r2, #0
 8007de4:	9201      	str	r2, [sp, #4]
 8007de6:	9300      	str	r3, [sp, #0]
 8007de8:	4603      	mov	r3, r0
 8007dea:	2200      	movs	r2, #0
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 fe7d 	bl	8008aec <USBH_OpenPipe>
    }
    break;
 8007df2:	e06a      	b.n	8007eca <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8007df4:	2109      	movs	r1, #9
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f955 	bl	80080a6 <USBH_Get_CfgDesc>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d165      	bne.n	8007ece <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2204      	movs	r2, #4
 8007e06:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007e08:	e061      	b.n	8007ece <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8007e10:	4619      	mov	r1, r3
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 f947 	bl	80080a6 <USBH_Get_CfgDesc>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d159      	bne.n	8007ed2 <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2205      	movs	r2, #5
 8007e22:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007e24:	e055      	b.n	8007ed2 <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d010      	beq.n	8007e52 <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007e3c:	23ff      	movs	r3, #255	; 0xff
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 f955 	bl	80080ee <USBH_Get_StringDesc>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d145      	bne.n	8007ed6 <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2206      	movs	r2, #6
 8007e4e:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007e50:	e041      	b.n	8007ed6 <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2206      	movs	r2, #6
 8007e56:	705a      	strb	r2, [r3, #1]
    break;
 8007e58:	e03d      	b.n	8007ed6 <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d010      	beq.n	8007e86 <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007e70:	23ff      	movs	r3, #255	; 0xff
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 f93b 	bl	80080ee <USBH_Get_StringDesc>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d12d      	bne.n	8007eda <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2207      	movs	r2, #7
 8007e82:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007e84:	e029      	b.n	8007eda <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2207      	movs	r2, #7
 8007e8a:	705a      	strb	r2, [r3, #1]
    break;
 8007e8c:	e025      	b.n	8007eda <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d00f      	beq.n	8007eb8 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007ea4:	23ff      	movs	r3, #255	; 0xff
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 f921 	bl	80080ee <USBH_Get_StringDesc>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d115      	bne.n	8007ede <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007eb6:	e012      	b.n	8007ede <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	73fb      	strb	r3, [r7, #15]
    break;
 8007ebc:	e00f      	b.n	8007ede <USBH_HandleEnum+0x226>

  default:
    break;
 8007ebe:	bf00      	nop
 8007ec0:	e00e      	b.n	8007ee0 <USBH_HandleEnum+0x228>
    break;
 8007ec2:	bf00      	nop
 8007ec4:	e00c      	b.n	8007ee0 <USBH_HandleEnum+0x228>
    break;
 8007ec6:	bf00      	nop
 8007ec8:	e00a      	b.n	8007ee0 <USBH_HandleEnum+0x228>
    break;
 8007eca:	bf00      	nop
 8007ecc:	e008      	b.n	8007ee0 <USBH_HandleEnum+0x228>
    break;
 8007ece:	bf00      	nop
 8007ed0:	e006      	b.n	8007ee0 <USBH_HandleEnum+0x228>
    break;
 8007ed2:	bf00      	nop
 8007ed4:	e004      	b.n	8007ee0 <USBH_HandleEnum+0x228>
    break;
 8007ed6:	bf00      	nop
 8007ed8:	e002      	b.n	8007ee0 <USBH_HandleEnum+0x228>
    break;
 8007eda:	bf00      	nop
 8007edc:	e000      	b.n	8007ee0 <USBH_HandleEnum+0x228>
    break;
 8007ede:	bf00      	nop
  }
  return Status;
 8007ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3710      	adds	r7, #16
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop

08007eec <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	683a      	ldr	r2, [r7, #0]
 8007efa:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8007efe:	bf00      	nop
 8007f00:	370c      	adds	r7, #12
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b082      	sub	sp, #8
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007f18:	1c5a      	adds	r2, r3, #1
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 f804 	bl	8007f2e <USBH_HandleSof>
}
 8007f26:	bf00      	nop
 8007f28:	3708      	adds	r7, #8
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}

08007f2e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	b082      	sub	sp, #8
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	2b0b      	cmp	r3, #11
 8007f3e:	d10a      	bne.n	8007f56 <USBH_HandleSof+0x28>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d005      	beq.n	8007f56 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007f50:	699b      	ldr	r3, [r3, #24]
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	4798      	blx	r3
  }
}
 8007f56:	bf00      	nop
 8007f58:	3708      	adds	r7, #8
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8007f5e:	b480      	push	{r7}
 8007f60:	b083      	sub	sp, #12
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8007f6e:	bf00      	nop
}
 8007f70:	370c      	adds	r7, #12
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr

08007f7a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8007f7a:	b480      	push	{r7}
 8007f7c:	b083      	sub	sp, #12
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8007f8a:	bf00      	nop
}
 8007f8c:	370c      	adds	r7, #12
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr

08007f96 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8007f96:	b480      	push	{r7}
 8007f98:	b083      	sub	sp, #12
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d10f      	bne.n	8007fe2 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d00e      	beq.n	8007ff2 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007fda:	2104      	movs	r1, #4
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	4798      	blx	r3
 8007fe0:	e007      	b.n	8007ff2 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d102      	bne.n	8007ff2 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2202      	movs	r2, #2
 8007ff0:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3708      	adds	r7, #8
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 ff68 	bl	8008eda <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	791b      	ldrb	r3, [r3, #4]
 800800e:	4619      	mov	r1, r3
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fdb8 	bl	8008b86 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	795b      	ldrb	r3, [r3, #5]
 800801a:	4619      	mov	r1, r3
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 fdb2 	bl	8008b86 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008030:	2b00      	cmp	r3, #0
 8008032:	d005      	beq.n	8008040 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800803a:	2105      	movs	r1, #5
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 ff2f 	bl	8008ea4 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2203      	movs	r2, #3
 800804a:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	3708      	adds	r7, #8
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b086      	sub	sp, #24
 800805a:	af02      	add	r7, sp, #8
 800805c:	6078      	str	r0, [r7, #4]
 800805e:	460b      	mov	r3, r1
 8008060:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8008068:	78fb      	ldrb	r3, [r7, #3]
 800806a:	b29b      	uxth	r3, r3
 800806c:	9300      	str	r3, [sp, #0]
 800806e:	4613      	mov	r3, r2
 8008070:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008074:	2100      	movs	r1, #0
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f864 	bl	8008144 <USBH_GetDescriptor>
 800807c:	4603      	mov	r3, r0
 800807e:	73fb      	strb	r3, [r7, #15]
 8008080:	7bfb      	ldrb	r3, [r7, #15]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d10a      	bne.n	800809c <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f203 3022 	addw	r0, r3, #802	; 0x322
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008092:	78fa      	ldrb	r2, [r7, #3]
 8008094:	b292      	uxth	r2, r2
 8008096:	4619      	mov	r1, r3
 8008098:	f000 f918 	bl	80082cc <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 800809c:	7bfb      	ldrb	r3, [r7, #15]
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b086      	sub	sp, #24
 80080aa:	af02      	add	r7, sp, #8
 80080ac:	6078      	str	r0, [r7, #4]
 80080ae:	460b      	mov	r3, r1
 80080b0:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	331c      	adds	r3, #28
 80080b6:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 80080b8:	887b      	ldrh	r3, [r7, #2]
 80080ba:	9300      	str	r3, [sp, #0]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080c2:	2100      	movs	r1, #0
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 f83d 	bl	8008144 <USBH_GetDescriptor>
 80080ca:	4603      	mov	r3, r0
 80080cc:	72fb      	strb	r3, [r7, #11]
 80080ce:	7afb      	ldrb	r3, [r7, #11]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d107      	bne.n	80080e4 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80080da:	887a      	ldrh	r2, [r7, #2]
 80080dc:	68f9      	ldr	r1, [r7, #12]
 80080de:	4618      	mov	r0, r3
 80080e0:	f000 f964 	bl	80083ac <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 80080e4:	7afb      	ldrb	r3, [r7, #11]
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b088      	sub	sp, #32
 80080f2:	af02      	add	r7, sp, #8
 80080f4:	60f8      	str	r0, [r7, #12]
 80080f6:	607a      	str	r2, [r7, #4]
 80080f8:	461a      	mov	r2, r3
 80080fa:	460b      	mov	r3, r1
 80080fc:	72fb      	strb	r3, [r7, #11]
 80080fe:	4613      	mov	r3, r2
 8008100:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8008102:	7afb      	ldrb	r3, [r7, #11]
 8008104:	b29b      	uxth	r3, r3
 8008106:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800810a:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8008112:	893b      	ldrh	r3, [r7, #8]
 8008114:	9300      	str	r3, [sp, #0]
 8008116:	460b      	mov	r3, r1
 8008118:	2100      	movs	r1, #0
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	f000 f812 	bl	8008144 <USBH_GetDescriptor>
 8008120:	4603      	mov	r3, r0
 8008122:	75fb      	strb	r3, [r7, #23]
 8008124:	7dfb      	ldrb	r3, [r7, #23]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d107      	bne.n	800813a <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008130:	893a      	ldrh	r2, [r7, #8]
 8008132:	6879      	ldr	r1, [r7, #4]
 8008134:	4618      	mov	r0, r3
 8008136:	f000 fa37 	bl	80085a8 <USBH_ParseStringDesc>
  }
  return status;
 800813a:	7dfb      	ldrb	r3, [r7, #23]
}
 800813c:	4618      	mov	r0, r3
 800813e:	3718      	adds	r7, #24
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	607b      	str	r3, [r7, #4]
 800814e:	460b      	mov	r3, r1
 8008150:	72fb      	strb	r3, [r7, #11]
 8008152:	4613      	mov	r3, r2
 8008154:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	789b      	ldrb	r3, [r3, #2]
 800815a:	2b01      	cmp	r3, #1
 800815c:	d11c      	bne.n	8008198 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800815e:	7afb      	ldrb	r3, [r7, #11]
 8008160:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008164:	b2da      	uxtb	r2, r3
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2206      	movs	r2, #6
 800816e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	893a      	ldrh	r2, [r7, #8]
 8008174:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008176:	893b      	ldrh	r3, [r7, #8]
 8008178:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800817c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008180:	d104      	bne.n	800818c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f240 4209 	movw	r2, #1033	; 0x409
 8008188:	829a      	strh	r2, [r3, #20]
 800818a:	e002      	b.n	8008192 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2200      	movs	r2, #0
 8008190:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	8b3a      	ldrh	r2, [r7, #24]
 8008196:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8008198:	8b3b      	ldrh	r3, [r7, #24]
 800819a:	461a      	mov	r2, r3
 800819c:	6879      	ldr	r1, [r7, #4]
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f000 fa50 	bl	8008644 <USBH_CtlReq>
 80081a4:	4603      	mov	r3, r0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b082      	sub	sp, #8
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
 80081b6:	460b      	mov	r3, r1
 80081b8:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	789b      	ldrb	r3, [r3, #2]
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d10f      	bne.n	80081e2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2205      	movs	r2, #5
 80081cc:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80081ce:	78fb      	ldrb	r3, [r7, #3]
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80081e2:	2200      	movs	r2, #0
 80081e4:	2100      	movs	r1, #0
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 fa2c 	bl	8008644 <USBH_CtlReq>
 80081ec:	4603      	mov	r3, r0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3708      	adds	r7, #8
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b082      	sub	sp, #8
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
 80081fe:	460b      	mov	r3, r1
 8008200:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	789b      	ldrb	r3, [r3, #2]
 8008206:	2b01      	cmp	r3, #1
 8008208:	d10e      	bne.n	8008228 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2209      	movs	r2, #9
 8008214:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	887a      	ldrh	r2, [r7, #2]
 800821a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8008228:	2200      	movs	r2, #0
 800822a:	2100      	movs	r1, #0
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 fa09 	bl	8008644 <USBH_CtlReq>
 8008232:	4603      	mov	r3, r0
}
 8008234:	4618      	mov	r0, r3
 8008236:	3708      	adds	r7, #8
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	460b      	mov	r3, r1
 8008246:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	789b      	ldrb	r3, [r3, #2]
 800824c:	2b01      	cmp	r3, #1
 800824e:	d10f      	bne.n	8008270 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2203      	movs	r2, #3
 800825a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800825c:	78fb      	ldrb	r3, [r7, #3]
 800825e:	b29a      	uxth	r2, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008270:	2200      	movs	r2, #0
 8008272:	2100      	movs	r1, #0
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 f9e5 	bl	8008644 <USBH_CtlReq>
 800827a:	4603      	mov	r3, r0
}
 800827c:	4618      	mov	r0, r3
 800827e:	3708      	adds	r7, #8
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	460b      	mov	r3, r1
 800828e:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	789b      	ldrb	r3, [r3, #2]
 8008294:	2b01      	cmp	r3, #1
 8008296:	d10f      	bne.n	80082b8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2202      	movs	r2, #2
 800829c:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2201      	movs	r2, #1
 80082a2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80082aa:	78fb      	ldrb	r3, [r7, #3]
 80082ac:	b29a      	uxth	r2, r3
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 80082b8:	2200      	movs	r2, #0
 80082ba:	2100      	movs	r1, #0
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 f9c1 	bl	8008644 <USBH_CtlReq>
 80082c2:	4603      	mov	r3, r0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3708      	adds	r7, #8
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b085      	sub	sp, #20
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	4613      	mov	r3, r2
 80082d8:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	781a      	ldrb	r2, [r3, #0]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	785a      	ldrb	r2, [r3, #1]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	3302      	adds	r3, #2
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	b29a      	uxth	r2, r3
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	3303      	adds	r3, #3
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	021b      	lsls	r3, r3, #8
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	4313      	orrs	r3, r2
 8008300:	b29a      	uxth	r2, r3
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	791a      	ldrb	r2, [r3, #4]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	795a      	ldrb	r2, [r3, #5]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	799a      	ldrb	r2, [r3, #6]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	79da      	ldrb	r2, [r3, #7]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008326:	88fb      	ldrh	r3, [r7, #6]
 8008328:	2b08      	cmp	r3, #8
 800832a:	d939      	bls.n	80083a0 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	3308      	adds	r3, #8
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	b29a      	uxth	r2, r3
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	3309      	adds	r3, #9
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	b29b      	uxth	r3, r3
 800833c:	021b      	lsls	r3, r3, #8
 800833e:	b29b      	uxth	r3, r3
 8008340:	4313      	orrs	r3, r2
 8008342:	b29a      	uxth	r2, r3
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	330a      	adds	r3, #10
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	b29a      	uxth	r2, r3
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	330b      	adds	r3, #11
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	b29b      	uxth	r3, r3
 8008358:	021b      	lsls	r3, r3, #8
 800835a:	b29b      	uxth	r3, r3
 800835c:	4313      	orrs	r3, r2
 800835e:	b29a      	uxth	r2, r3
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	330c      	adds	r3, #12
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	b29a      	uxth	r2, r3
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	330d      	adds	r3, #13
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	b29b      	uxth	r3, r3
 8008374:	021b      	lsls	r3, r3, #8
 8008376:	b29b      	uxth	r3, r3
 8008378:	4313      	orrs	r3, r2
 800837a:	b29a      	uxth	r2, r3
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	7b9a      	ldrb	r2, [r3, #14]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	7bda      	ldrb	r2, [r3, #15]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	7c1a      	ldrb	r2, [r3, #16]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	7c5a      	ldrb	r2, [r3, #17]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	745a      	strb	r2, [r3, #17]
  }
}
 80083a0:	bf00      	nop
 80083a2:	3714      	adds	r7, #20
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b08a      	sub	sp, #40	; 0x28
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	4613      	mov	r3, r2
 80083b8:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80083be:	2300      	movs	r3, #0
 80083c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80083c4:	2300      	movs	r3, #0
 80083c6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	781a      	ldrb	r2, [r3, #0]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	785a      	ldrb	r2, [r3, #1]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	3302      	adds	r3, #2
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	b29a      	uxth	r2, r3
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	3303      	adds	r3, #3
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	021b      	lsls	r3, r3, #8
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	4313      	orrs	r3, r2
 80083f4:	b29a      	uxth	r2, r3
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	791a      	ldrb	r2, [r3, #4]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	795a      	ldrb	r2, [r3, #5]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	799a      	ldrb	r2, [r3, #6]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	79da      	ldrb	r2, [r3, #7]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	7a1a      	ldrb	r2, [r3, #8]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008422:	88fb      	ldrh	r3, [r7, #6]
 8008424:	2b09      	cmp	r3, #9
 8008426:	d95f      	bls.n	80084e8 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008428:	2309      	movs	r3, #9
 800842a:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800842c:	2300      	movs	r3, #0
 800842e:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008430:	e051      	b.n	80084d6 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008432:	f107 0316 	add.w	r3, r7, #22
 8008436:	4619      	mov	r1, r3
 8008438:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800843a:	f000 f8e8 	bl	800860e <USBH_GetNextDesc>
 800843e:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008442:	785b      	ldrb	r3, [r3, #1]
 8008444:	2b04      	cmp	r3, #4
 8008446:	d146      	bne.n	80084d6 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008448:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800844c:	221a      	movs	r2, #26
 800844e:	fb02 f303 	mul.w	r3, r2, r3
 8008452:	3308      	adds	r3, #8
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	4413      	add	r3, r2
 8008458:	3302      	adds	r3, #2
 800845a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 800845c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800845e:	69f8      	ldr	r0, [r7, #28]
 8008460:	f000 f846 	bl	80084f0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008464:	2300      	movs	r3, #0
 8008466:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800846a:	2300      	movs	r3, #0
 800846c:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800846e:	e022      	b.n	80084b6 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8008470:	f107 0316 	add.w	r3, r7, #22
 8008474:	4619      	mov	r1, r3
 8008476:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008478:	f000 f8c9 	bl	800860e <USBH_GetNextDesc>
 800847c:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800847e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008480:	785b      	ldrb	r3, [r3, #1]
 8008482:	2b05      	cmp	r3, #5
 8008484:	d117      	bne.n	80084b6 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008486:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800848a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800848e:	3201      	adds	r2, #1
 8008490:	00d2      	lsls	r2, r2, #3
 8008492:	211a      	movs	r1, #26
 8008494:	fb01 f303 	mul.w	r3, r1, r3
 8008498:	4413      	add	r3, r2
 800849a:	3308      	adds	r3, #8
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	4413      	add	r3, r2
 80084a0:	3304      	adds	r3, #4
 80084a2:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 80084a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084a6:	69b8      	ldr	r0, [r7, #24]
 80084a8:	f000 f851 	bl	800854e <USBH_ParseEPDesc>
            ep_ix++;
 80084ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80084b0:	3301      	adds	r3, #1
 80084b2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	791b      	ldrb	r3, [r3, #4]
 80084ba:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80084be:	429a      	cmp	r2, r3
 80084c0:	d204      	bcs.n	80084cc <USBH_ParseCfgDesc+0x120>
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	885a      	ldrh	r2, [r3, #2]
 80084c6:	8afb      	ldrh	r3, [r7, #22]
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d8d1      	bhi.n	8008470 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80084cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80084d0:	3301      	adds	r3, #1
 80084d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80084d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d804      	bhi.n	80084e8 <USBH_ParseCfgDesc+0x13c>
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	885a      	ldrh	r2, [r3, #2]
 80084e2:	8afb      	ldrh	r3, [r7, #22]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d8a4      	bhi.n	8008432 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80084e8:	bf00      	nop
 80084ea:	3728      	adds	r7, #40	; 0x28
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	781a      	ldrb	r2, [r3, #0]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	785a      	ldrb	r2, [r3, #1]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	789a      	ldrb	r2, [r3, #2]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	78da      	ldrb	r2, [r3, #3]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	791a      	ldrb	r2, [r3, #4]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	795a      	ldrb	r2, [r3, #5]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	799a      	ldrb	r2, [r3, #6]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	79da      	ldrb	r2, [r3, #7]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	7a1a      	ldrb	r2, [r3, #8]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	721a      	strb	r2, [r3, #8]
}
 8008542:	bf00      	nop
 8008544:	370c      	adds	r7, #12
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr

0800854e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 800854e:	b480      	push	{r7}
 8008550:	b083      	sub	sp, #12
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
 8008556:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	781a      	ldrb	r2, [r3, #0]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	785a      	ldrb	r2, [r3, #1]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	789a      	ldrb	r2, [r3, #2]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	78da      	ldrb	r2, [r3, #3]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	3304      	adds	r3, #4
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	b29a      	uxth	r2, r3
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	3305      	adds	r3, #5
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	b29b      	uxth	r3, r3
 8008588:	021b      	lsls	r3, r3, #8
 800858a:	b29b      	uxth	r3, r3
 800858c:	4313      	orrs	r3, r2
 800858e:	b29a      	uxth	r2, r3
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	799a      	ldrb	r2, [r3, #6]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	719a      	strb	r2, [r3, #6]
}
 800859c:	bf00      	nop
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b087      	sub	sp, #28
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	4613      	mov	r3, r2
 80085b4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	3301      	adds	r3, #1
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	2b03      	cmp	r3, #3
 80085be:	d120      	bne.n	8008602 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	1e9a      	subs	r2, r3, #2
 80085c6:	88fb      	ldrh	r3, [r7, #6]
 80085c8:	4293      	cmp	r3, r2
 80085ca:	bf28      	it	cs
 80085cc:	4613      	movcs	r3, r2
 80085ce:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	3302      	adds	r3, #2
 80085d4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80085d6:	2300      	movs	r3, #0
 80085d8:	82fb      	strh	r3, [r7, #22]
 80085da:	e00b      	b.n	80085f4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80085dc:	8afb      	ldrh	r3, [r7, #22]
 80085de:	68fa      	ldr	r2, [r7, #12]
 80085e0:	4413      	add	r3, r2
 80085e2:	781a      	ldrb	r2, [r3, #0]
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	701a      	strb	r2, [r3, #0]
      pdest++;
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	3301      	adds	r3, #1
 80085ec:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80085ee:	8afb      	ldrh	r3, [r7, #22]
 80085f0:	3302      	adds	r3, #2
 80085f2:	82fb      	strh	r3, [r7, #22]
 80085f4:	8afa      	ldrh	r2, [r7, #22]
 80085f6:	8abb      	ldrh	r3, [r7, #20]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d3ef      	bcc.n	80085dc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	2200      	movs	r2, #0
 8008600:	701a      	strb	r2, [r3, #0]
  }
}
 8008602:	bf00      	nop
 8008604:	371c      	adds	r7, #28
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr

0800860e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800860e:	b480      	push	{r7}
 8008610:	b085      	sub	sp, #20
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
 8008616:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	881a      	ldrh	r2, [r3, #0]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	b29b      	uxth	r3, r3
 8008622:	4413      	add	r3, r2
 8008624:	b29a      	uxth	r2, r3
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4413      	add	r3, r2
 8008634:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8008636:	68fb      	ldr	r3, [r7, #12]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3714      	adds	r7, #20
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b086      	sub	sp, #24
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	4613      	mov	r3, r2
 8008650:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008652:	2301      	movs	r3, #1
 8008654:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	789b      	ldrb	r3, [r3, #2]
 800865a:	2b01      	cmp	r3, #1
 800865c:	d002      	beq.n	8008664 <USBH_CtlReq+0x20>
 800865e:	2b02      	cmp	r3, #2
 8008660:	d00f      	beq.n	8008682 <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8008662:	e034      	b.n	80086ce <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	68ba      	ldr	r2, [r7, #8]
 8008668:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	88fa      	ldrh	r2, [r7, #6]
 800866e:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2201      	movs	r2, #1
 8008674:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2202      	movs	r2, #2
 800867a:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 800867c:	2301      	movs	r3, #1
 800867e:	75fb      	strb	r3, [r7, #23]
    break;
 8008680:	e025      	b.n	80086ce <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8008682:	68f8      	ldr	r0, [r7, #12]
 8008684:	f000 f828 	bl	80086d8 <USBH_HandleControl>
 8008688:	4603      	mov	r3, r0
 800868a:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 800868c:	7dfb      	ldrb	r3, [r7, #23]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d108      	bne.n	80086a4 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2201      	movs	r2, #1
 8008696:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2200      	movs	r2, #0
 800869c:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800869e:	2300      	movs	r3, #0
 80086a0:	75fb      	strb	r3, [r7, #23]
    break;
 80086a2:	e013      	b.n	80086cc <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 80086a4:	7dfb      	ldrb	r3, [r7, #23]
 80086a6:	2b03      	cmp	r3, #3
 80086a8:	d108      	bne.n	80086bc <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2201      	movs	r2, #1
 80086ae:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2200      	movs	r2, #0
 80086b4:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 80086b6:	2303      	movs	r3, #3
 80086b8:	75fb      	strb	r3, [r7, #23]
    break;
 80086ba:	e007      	b.n	80086cc <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 80086bc:	7dfb      	ldrb	r3, [r7, #23]
 80086be:	2b02      	cmp	r3, #2
 80086c0:	d104      	bne.n	80086cc <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2201      	movs	r2, #1
 80086c6:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 80086c8:	2302      	movs	r3, #2
 80086ca:	75fb      	strb	r3, [r7, #23]
    break;
 80086cc:	bf00      	nop
  }
  return status;
 80086ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3718      	adds	r7, #24
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b086      	sub	sp, #24
 80086dc:	af02      	add	r7, sp, #8
 80086de:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80086e0:	2301      	movs	r3, #1
 80086e2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80086e4:	2300      	movs	r3, #0
 80086e6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	7e1b      	ldrb	r3, [r3, #24]
 80086ec:	3b01      	subs	r3, #1
 80086ee:	2b0a      	cmp	r3, #10
 80086f0:	f200 814c 	bhi.w	800898c <USBH_HandleControl+0x2b4>
 80086f4:	a201      	add	r2, pc, #4	; (adr r2, 80086fc <USBH_HandleControl+0x24>)
 80086f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086fa:	bf00      	nop
 80086fc:	08008729 	.word	0x08008729
 8008700:	08008743 	.word	0x08008743
 8008704:	080087ad 	.word	0x080087ad
 8008708:	080087d3 	.word	0x080087d3
 800870c:	0800880b 	.word	0x0800880b
 8008710:	08008837 	.word	0x08008837
 8008714:	08008889 	.word	0x08008889
 8008718:	080088ab 	.word	0x080088ab
 800871c:	080088e7 	.word	0x080088e7
 8008720:	0800890f 	.word	0x0800890f
 8008724:	0800894d 	.word	0x0800894d
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f103 0110 	add.w	r1, r3, #16
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	795b      	ldrb	r3, [r3, #5]
 8008732:	461a      	mov	r2, r3
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 f939 	bl	80089ac <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2202      	movs	r2, #2
 800873e:	761a      	strb	r2, [r3, #24]
    break;
 8008740:	e12f      	b.n	80089a2 <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	795b      	ldrb	r3, [r3, #5]
 8008746:	4619      	mov	r1, r3
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 fcb3 	bl	80090b4 <USBH_LL_GetURBState>
 800874e:	4603      	mov	r3, r0
 8008750:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8008752:	7bbb      	ldrb	r3, [r7, #14]
 8008754:	2b01      	cmp	r3, #1
 8008756:	d11e      	bne.n	8008796 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	7c1b      	ldrb	r3, [r3, #16]
 800875c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008760:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	8adb      	ldrh	r3, [r3, #22]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d00a      	beq.n	8008780 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 800876a:	7b7b      	ldrb	r3, [r7, #13]
 800876c:	2b80      	cmp	r3, #128	; 0x80
 800876e:	d103      	bne.n	8008778 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2203      	movs	r2, #3
 8008774:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008776:	e10b      	b.n	8008990 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2205      	movs	r2, #5
 800877c:	761a      	strb	r2, [r3, #24]
    break;
 800877e:	e107      	b.n	8008990 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8008780:	7b7b      	ldrb	r3, [r7, #13]
 8008782:	2b80      	cmp	r3, #128	; 0x80
 8008784:	d103      	bne.n	800878e <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2209      	movs	r2, #9
 800878a:	761a      	strb	r2, [r3, #24]
    break;
 800878c:	e100      	b.n	8008990 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2207      	movs	r2, #7
 8008792:	761a      	strb	r2, [r3, #24]
    break;
 8008794:	e0fc      	b.n	8008990 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008796:	7bbb      	ldrb	r3, [r7, #14]
 8008798:	2b04      	cmp	r3, #4
 800879a:	d003      	beq.n	80087a4 <USBH_HandleControl+0xcc>
 800879c:	7bbb      	ldrb	r3, [r7, #14]
 800879e:	2b02      	cmp	r3, #2
 80087a0:	f040 80f6 	bne.w	8008990 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	220b      	movs	r2, #11
 80087a8:	761a      	strb	r2, [r3, #24]
    break;
 80087aa:	e0f1      	b.n	8008990 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80087b2:	b29a      	uxth	r2, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6899      	ldr	r1, [r3, #8]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	899a      	ldrh	r2, [r3, #12]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	791b      	ldrb	r3, [r3, #4]
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 f930 	bl	8008a2a <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2204      	movs	r2, #4
 80087ce:	761a      	strb	r2, [r3, #24]
    break;
 80087d0:	e0e7      	b.n	80089a2 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	791b      	ldrb	r3, [r3, #4]
 80087d6:	4619      	mov	r1, r3
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 fc6b 	bl	80090b4 <USBH_LL_GetURBState>
 80087de:	4603      	mov	r3, r0
 80087e0:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 80087e2:	7bbb      	ldrb	r3, [r7, #14]
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d102      	bne.n	80087ee <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2209      	movs	r2, #9
 80087ec:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 80087ee:	7bbb      	ldrb	r3, [r7, #14]
 80087f0:	2b05      	cmp	r3, #5
 80087f2:	d102      	bne.n	80087fa <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 80087f4:	2303      	movs	r3, #3
 80087f6:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80087f8:	e0cc      	b.n	8008994 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 80087fa:	7bbb      	ldrb	r3, [r7, #14]
 80087fc:	2b04      	cmp	r3, #4
 80087fe:	f040 80c9 	bne.w	8008994 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	220b      	movs	r2, #11
 8008806:	761a      	strb	r2, [r3, #24]
    break;
 8008808:	e0c4      	b.n	8008994 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6899      	ldr	r1, [r3, #8]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	899a      	ldrh	r2, [r3, #12]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	7958      	ldrb	r0, [r3, #5]
 8008816:	2301      	movs	r3, #1
 8008818:	9300      	str	r3, [sp, #0]
 800881a:	4603      	mov	r3, r0
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 f8df 	bl	80089e0 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8008828:	b29a      	uxth	r2, r3
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2206      	movs	r2, #6
 8008832:	761a      	strb	r2, [r3, #24]
    break;
 8008834:	e0b5      	b.n	80089a2 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	795b      	ldrb	r3, [r3, #5]
 800883a:	4619      	mov	r1, r3
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 fc39 	bl	80090b4 <USBH_LL_GetURBState>
 8008842:	4603      	mov	r3, r0
 8008844:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8008846:	7bbb      	ldrb	r3, [r7, #14]
 8008848:	2b01      	cmp	r3, #1
 800884a:	d103      	bne.n	8008854 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2207      	movs	r2, #7
 8008850:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008852:	e0a1      	b.n	8008998 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8008854:	7bbb      	ldrb	r3, [r7, #14]
 8008856:	2b05      	cmp	r3, #5
 8008858:	d105      	bne.n	8008866 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	220c      	movs	r2, #12
 800885e:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8008860:	2303      	movs	r3, #3
 8008862:	73fb      	strb	r3, [r7, #15]
    break;
 8008864:	e098      	b.n	8008998 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8008866:	7bbb      	ldrb	r3, [r7, #14]
 8008868:	2b02      	cmp	r3, #2
 800886a:	d103      	bne.n	8008874 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2205      	movs	r2, #5
 8008870:	761a      	strb	r2, [r3, #24]
    break;
 8008872:	e091      	b.n	8008998 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8008874:	7bbb      	ldrb	r3, [r7, #14]
 8008876:	2b04      	cmp	r3, #4
 8008878:	f040 808e 	bne.w	8008998 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	220b      	movs	r2, #11
 8008880:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8008882:	2302      	movs	r3, #2
 8008884:	73fb      	strb	r3, [r7, #15]
    break;
 8008886:	e087      	b.n	8008998 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	791b      	ldrb	r3, [r3, #4]
 800888c:	2200      	movs	r2, #0
 800888e:	2100      	movs	r1, #0
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 f8ca 	bl	8008a2a <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800889c:	b29a      	uxth	r2, r3
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2208      	movs	r2, #8
 80088a6:	761a      	strb	r2, [r3, #24]

    break;
 80088a8:	e07b      	b.n	80089a2 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	791b      	ldrb	r3, [r3, #4]
 80088ae:	4619      	mov	r1, r3
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 fbff 	bl	80090b4 <USBH_LL_GetURBState>
 80088b6:	4603      	mov	r3, r0
 80088b8:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 80088ba:	7bbb      	ldrb	r3, [r7, #14]
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d105      	bne.n	80088cc <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	220d      	movs	r2, #13
 80088c4:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 80088c6:	2300      	movs	r3, #0
 80088c8:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80088ca:	e067      	b.n	800899c <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 80088cc:	7bbb      	ldrb	r3, [r7, #14]
 80088ce:	2b04      	cmp	r3, #4
 80088d0:	d103      	bne.n	80088da <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	220b      	movs	r2, #11
 80088d6:	761a      	strb	r2, [r3, #24]
    break;
 80088d8:	e060      	b.n	800899c <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 80088da:	7bbb      	ldrb	r3, [r7, #14]
 80088dc:	2b05      	cmp	r3, #5
 80088de:	d15d      	bne.n	800899c <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 80088e0:	2303      	movs	r3, #3
 80088e2:	73fb      	strb	r3, [r7, #15]
    break;
 80088e4:	e05a      	b.n	800899c <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	795a      	ldrb	r2, [r3, #5]
 80088ea:	2301      	movs	r3, #1
 80088ec:	9300      	str	r3, [sp, #0]
 80088ee:	4613      	mov	r3, r2
 80088f0:	2200      	movs	r2, #0
 80088f2:	2100      	movs	r1, #0
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 f873 	bl	80089e0 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8008900:	b29a      	uxth	r2, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	220a      	movs	r2, #10
 800890a:	761a      	strb	r2, [r3, #24]
    break;
 800890c:	e049      	b.n	80089a2 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	795b      	ldrb	r3, [r3, #5]
 8008912:	4619      	mov	r1, r3
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 fbcd 	bl	80090b4 <USBH_LL_GetURBState>
 800891a:	4603      	mov	r3, r0
 800891c:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800891e:	7bbb      	ldrb	r3, [r7, #14]
 8008920:	2b01      	cmp	r3, #1
 8008922:	d105      	bne.n	8008930 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8008924:	2300      	movs	r3, #0
 8008926:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	220d      	movs	r2, #13
 800892c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 800892e:	e037      	b.n	80089a0 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8008930:	7bbb      	ldrb	r3, [r7, #14]
 8008932:	2b02      	cmp	r3, #2
 8008934:	d103      	bne.n	800893e <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2209      	movs	r2, #9
 800893a:	761a      	strb	r2, [r3, #24]
    break;
 800893c:	e030      	b.n	80089a0 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 800893e:	7bbb      	ldrb	r3, [r7, #14]
 8008940:	2b04      	cmp	r3, #4
 8008942:	d12d      	bne.n	80089a0 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	220b      	movs	r2, #11
 8008948:	761a      	strb	r2, [r3, #24]
    break;
 800894a:	e029      	b.n	80089a0 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	7e5b      	ldrb	r3, [r3, #25]
 8008950:	3301      	adds	r3, #1
 8008952:	b2da      	uxtb	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	765a      	strb	r2, [r3, #25]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	7e5b      	ldrb	r3, [r3, #25]
 800895c:	2b02      	cmp	r3, #2
 800895e:	d809      	bhi.n	8008974 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 faba 	bl	8008eda <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2201      	movs	r2, #1
 800896a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8008972:	e016      	b.n	80089a2 <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800897a:	2106      	movs	r1, #6
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2200      	movs	r2, #0
 8008984:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8008986:	2302      	movs	r3, #2
 8008988:	73fb      	strb	r3, [r7, #15]
    break;
 800898a:	e00a      	b.n	80089a2 <USBH_HandleControl+0x2ca>

  default:
    break;
 800898c:	bf00      	nop
 800898e:	e008      	b.n	80089a2 <USBH_HandleControl+0x2ca>
    break;
 8008990:	bf00      	nop
 8008992:	e006      	b.n	80089a2 <USBH_HandleControl+0x2ca>
    break;
 8008994:	bf00      	nop
 8008996:	e004      	b.n	80089a2 <USBH_HandleControl+0x2ca>
    break;
 8008998:	bf00      	nop
 800899a:	e002      	b.n	80089a2 <USBH_HandleControl+0x2ca>
    break;
 800899c:	bf00      	nop
 800899e:	e000      	b.n	80089a2 <USBH_HandleControl+0x2ca>
    break;
 80089a0:	bf00      	nop
  }
  return status;
 80089a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3710      	adds	r7, #16
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b088      	sub	sp, #32
 80089b0:	af04      	add	r7, sp, #16
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	4613      	mov	r3, r2
 80089b8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80089ba:	79f9      	ldrb	r1, [r7, #7]
 80089bc:	2300      	movs	r3, #0
 80089be:	9303      	str	r3, [sp, #12]
 80089c0:	2308      	movs	r3, #8
 80089c2:	9302      	str	r3, [sp, #8]
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	9301      	str	r3, [sp, #4]
 80089c8:	2300      	movs	r3, #0
 80089ca:	9300      	str	r3, [sp, #0]
 80089cc:	2300      	movs	r3, #0
 80089ce:	2200      	movs	r2, #0
 80089d0:	68f8      	ldr	r0, [r7, #12]
 80089d2:	f000 fb3e 	bl	8009052 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80089d6:	2300      	movs	r3, #0
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3710      	adds	r7, #16
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b088      	sub	sp, #32
 80089e4:	af04      	add	r7, sp, #16
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	4611      	mov	r1, r2
 80089ec:	461a      	mov	r2, r3
 80089ee:	460b      	mov	r3, r1
 80089f0:	80fb      	strh	r3, [r7, #6]
 80089f2:	4613      	mov	r3, r2
 80089f4:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d001      	beq.n	8008a04 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008a00:	2300      	movs	r3, #0
 8008a02:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008a04:	7979      	ldrb	r1, [r7, #5]
 8008a06:	7e3b      	ldrb	r3, [r7, #24]
 8008a08:	9303      	str	r3, [sp, #12]
 8008a0a:	88fb      	ldrh	r3, [r7, #6]
 8008a0c:	9302      	str	r3, [sp, #8]
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	9301      	str	r3, [sp, #4]
 8008a12:	2301      	movs	r3, #1
 8008a14:	9300      	str	r3, [sp, #0]
 8008a16:	2300      	movs	r3, #0
 8008a18:	2200      	movs	r2, #0
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f000 fb19 	bl	8009052 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b088      	sub	sp, #32
 8008a2e:	af04      	add	r7, sp, #16
 8008a30:	60f8      	str	r0, [r7, #12]
 8008a32:	60b9      	str	r1, [r7, #8]
 8008a34:	4611      	mov	r1, r2
 8008a36:	461a      	mov	r2, r3
 8008a38:	460b      	mov	r3, r1
 8008a3a:	80fb      	strh	r3, [r7, #6]
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008a40:	7979      	ldrb	r1, [r7, #5]
 8008a42:	2300      	movs	r3, #0
 8008a44:	9303      	str	r3, [sp, #12]
 8008a46:	88fb      	ldrh	r3, [r7, #6]
 8008a48:	9302      	str	r3, [sp, #8]
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	9301      	str	r3, [sp, #4]
 8008a4e:	2301      	movs	r3, #1
 8008a50:	9300      	str	r3, [sp, #0]
 8008a52:	2300      	movs	r3, #0
 8008a54:	2201      	movs	r2, #1
 8008a56:	68f8      	ldr	r0, [r7, #12]
 8008a58:	f000 fafb 	bl	8009052 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008a5c:	2300      	movs	r3, #0

}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b088      	sub	sp, #32
 8008a6a:	af04      	add	r7, sp, #16
 8008a6c:	60f8      	str	r0, [r7, #12]
 8008a6e:	60b9      	str	r1, [r7, #8]
 8008a70:	4611      	mov	r1, r2
 8008a72:	461a      	mov	r2, r3
 8008a74:	460b      	mov	r3, r1
 8008a76:	80fb      	strh	r3, [r7, #6]
 8008a78:	4613      	mov	r3, r2
 8008a7a:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d001      	beq.n	8008a8a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008a86:	2300      	movs	r3, #0
 8008a88:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008a8a:	7979      	ldrb	r1, [r7, #5]
 8008a8c:	7e3b      	ldrb	r3, [r7, #24]
 8008a8e:	9303      	str	r3, [sp, #12]
 8008a90:	88fb      	ldrh	r3, [r7, #6]
 8008a92:	9302      	str	r3, [sp, #8]
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	9301      	str	r3, [sp, #4]
 8008a98:	2301      	movs	r3, #1
 8008a9a:	9300      	str	r3, [sp, #0]
 8008a9c:	2302      	movs	r3, #2
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	68f8      	ldr	r0, [r7, #12]
 8008aa2:	f000 fad6 	bl	8009052 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3710      	adds	r7, #16
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b088      	sub	sp, #32
 8008ab4:	af04      	add	r7, sp, #16
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	4611      	mov	r1, r2
 8008abc:	461a      	mov	r2, r3
 8008abe:	460b      	mov	r3, r1
 8008ac0:	80fb      	strh	r3, [r7, #6]
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008ac6:	7979      	ldrb	r1, [r7, #5]
 8008ac8:	2300      	movs	r3, #0
 8008aca:	9303      	str	r3, [sp, #12]
 8008acc:	88fb      	ldrh	r3, [r7, #6]
 8008ace:	9302      	str	r3, [sp, #8]
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	9301      	str	r3, [sp, #4]
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	9300      	str	r3, [sp, #0]
 8008ad8:	2302      	movs	r3, #2
 8008ada:	2201      	movs	r2, #1
 8008adc:	68f8      	ldr	r0, [r7, #12]
 8008ade:	f000 fab8 	bl	8009052 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008ae2:	2300      	movs	r3, #0
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3710      	adds	r7, #16
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b086      	sub	sp, #24
 8008af0:	af04      	add	r7, sp, #16
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	4608      	mov	r0, r1
 8008af6:	4611      	mov	r1, r2
 8008af8:	461a      	mov	r2, r3
 8008afa:	4603      	mov	r3, r0
 8008afc:	70fb      	strb	r3, [r7, #3]
 8008afe:	460b      	mov	r3, r1
 8008b00:	70bb      	strb	r3, [r7, #2]
 8008b02:	4613      	mov	r3, r2
 8008b04:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8008b06:	7878      	ldrb	r0, [r7, #1]
 8008b08:	78ba      	ldrb	r2, [r7, #2]
 8008b0a:	78f9      	ldrb	r1, [r7, #3]
 8008b0c:	8b3b      	ldrh	r3, [r7, #24]
 8008b0e:	9302      	str	r3, [sp, #8]
 8008b10:	7d3b      	ldrb	r3, [r7, #20]
 8008b12:	9301      	str	r3, [sp, #4]
 8008b14:	7c3b      	ldrb	r3, [r7, #16]
 8008b16:	9300      	str	r3, [sp, #0]
 8008b18:	4603      	mov	r3, r0
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 fa4b 	bl	8008fb6 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8008b20:	2300      	movs	r3, #0

}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3708      	adds	r7, #8
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b082      	sub	sp, #8
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
 8008b32:	460b      	mov	r3, r1
 8008b34:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8008b36:	78fb      	ldrb	r3, [r7, #3]
 8008b38:	4619      	mov	r1, r3
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 fa6a 	bl	8009014 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008b40:	2300      	movs	r3, #0

}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3708      	adds	r7, #8
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b084      	sub	sp, #16
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
 8008b52:	460b      	mov	r3, r1
 8008b54:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 f831 	bl	8008bbe <USBH_GetFreePipe>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008b60:	89fb      	ldrh	r3, [r7, #14]
 8008b62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d007      	beq.n	8008b7a <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8008b6a:	78fb      	ldrb	r3, [r7, #3]
 8008b6c:	89fa      	ldrh	r2, [r7, #14]
 8008b6e:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	32e0      	adds	r2, #224	; 0xe0
 8008b76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8008b7a:	89fb      	ldrh	r3, [r7, #14]
 8008b7c:	b2db      	uxtb	r3, r3
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3710      	adds	r7, #16
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008b86:	b480      	push	{r7}
 8008b88:	b083      	sub	sp, #12
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
 8008b8e:	460b      	mov	r3, r1
 8008b90:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8008b92:	78fb      	ldrb	r3, [r7, #3]
 8008b94:	2b0a      	cmp	r3, #10
 8008b96:	d80b      	bhi.n	8008bb0 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8008b98:	78fa      	ldrb	r2, [r7, #3]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	32e0      	adds	r2, #224	; 0xe0
 8008b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba2:	78fa      	ldrb	r2, [r7, #3]
 8008ba4:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	32e0      	adds	r2, #224	; 0xe0
 8008bac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	370c      	adds	r7, #12
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr

08008bbe <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	b085      	sub	sp, #20
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008bca:	2300      	movs	r3, #0
 8008bcc:	73fb      	strb	r3, [r7, #15]
 8008bce:	e00e      	b.n	8008bee <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008bd0:	7bfa      	ldrb	r2, [r7, #15]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	32e0      	adds	r2, #224	; 0xe0
 8008bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d102      	bne.n	8008be8 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8008be2:	7bfb      	ldrb	r3, [r7, #15]
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	e007      	b.n	8008bf8 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8008be8:	7bfb      	ldrb	r3, [r7, #15]
 8008bea:	3301      	adds	r3, #1
 8008bec:	73fb      	strb	r3, [r7, #15]
 8008bee:	7bfb      	ldrb	r3, [r7, #15]
 8008bf0:	2b0a      	cmp	r3, #10
 8008bf2:	d9ed      	bls.n	8008bd0 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8008bf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3714      	adds	r7, #20
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008c08:	2201      	movs	r2, #1
 8008c0a:	490e      	ldr	r1, [pc, #56]	; (8008c44 <MX_USB_HOST_Init+0x40>)
 8008c0c:	480e      	ldr	r0, [pc, #56]	; (8008c48 <MX_USB_HOST_Init+0x44>)
 8008c0e:	f7fe fdbb 	bl	8007788 <USBH_Init>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d001      	beq.n	8008c1c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008c18:	f7f8 fa9a 	bl	8001150 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008c1c:	490b      	ldr	r1, [pc, #44]	; (8008c4c <MX_USB_HOST_Init+0x48>)
 8008c1e:	480a      	ldr	r0, [pc, #40]	; (8008c48 <MX_USB_HOST_Init+0x44>)
 8008c20:	f7fe fe25 	bl	800786e <USBH_RegisterClass>
 8008c24:	4603      	mov	r3, r0
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d001      	beq.n	8008c2e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008c2a:	f7f8 fa91 	bl	8001150 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008c2e:	4806      	ldr	r0, [pc, #24]	; (8008c48 <MX_USB_HOST_Init+0x44>)
 8008c30:	f7fe feaa 	bl	8007988 <USBH_Start>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d001      	beq.n	8008c3e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008c3a:	f7f8 fa89 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008c3e:	bf00      	nop
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	08008c65 	.word	0x08008c65
 8008c48:	200004a0 	.word	0x200004a0
 8008c4c:	20000018 	.word	0x20000018

08008c50 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008c54:	4802      	ldr	r0, [pc, #8]	; (8008c60 <MX_USB_HOST_Process+0x10>)
 8008c56:	f7fe fea7 	bl	80079a8 <USBH_Process>
}
 8008c5a:	bf00      	nop
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	200004a0 	.word	0x200004a0

08008c64 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008c70:	78fb      	ldrb	r3, [r7, #3]
 8008c72:	3b01      	subs	r3, #1
 8008c74:	2b04      	cmp	r3, #4
 8008c76:	d819      	bhi.n	8008cac <USBH_UserProcess+0x48>
 8008c78:	a201      	add	r2, pc, #4	; (adr r2, 8008c80 <USBH_UserProcess+0x1c>)
 8008c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c7e:	bf00      	nop
 8008c80:	08008cad 	.word	0x08008cad
 8008c84:	08008c9d 	.word	0x08008c9d
 8008c88:	08008cad 	.word	0x08008cad
 8008c8c:	08008ca5 	.word	0x08008ca5
 8008c90:	08008c95 	.word	0x08008c95
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008c94:	4b09      	ldr	r3, [pc, #36]	; (8008cbc <USBH_UserProcess+0x58>)
 8008c96:	2203      	movs	r2, #3
 8008c98:	701a      	strb	r2, [r3, #0]
  break;
 8008c9a:	e008      	b.n	8008cae <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008c9c:	4b07      	ldr	r3, [pc, #28]	; (8008cbc <USBH_UserProcess+0x58>)
 8008c9e:	2202      	movs	r2, #2
 8008ca0:	701a      	strb	r2, [r3, #0]
  break;
 8008ca2:	e004      	b.n	8008cae <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008ca4:	4b05      	ldr	r3, [pc, #20]	; (8008cbc <USBH_UserProcess+0x58>)
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	701a      	strb	r2, [r3, #0]
  break;
 8008caa:	e000      	b.n	8008cae <USBH_UserProcess+0x4a>

  default:
  break;
 8008cac:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008cae:	bf00      	nop
 8008cb0:	370c      	adds	r7, #12
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	20000238 	.word	0x20000238

08008cc0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b08a      	sub	sp, #40	; 0x28
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cc8:	f107 0314 	add.w	r3, r7, #20
 8008ccc:	2200      	movs	r2, #0
 8008cce:	601a      	str	r2, [r3, #0]
 8008cd0:	605a      	str	r2, [r3, #4]
 8008cd2:	609a      	str	r2, [r3, #8]
 8008cd4:	60da      	str	r2, [r3, #12]
 8008cd6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ce0:	d147      	bne.n	8008d72 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	613b      	str	r3, [r7, #16]
 8008ce6:	4b25      	ldr	r3, [pc, #148]	; (8008d7c <HAL_HCD_MspInit+0xbc>)
 8008ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cea:	4a24      	ldr	r2, [pc, #144]	; (8008d7c <HAL_HCD_MspInit+0xbc>)
 8008cec:	f043 0301 	orr.w	r3, r3, #1
 8008cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8008cf2:	4b22      	ldr	r3, [pc, #136]	; (8008d7c <HAL_HCD_MspInit+0xbc>)
 8008cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cf6:	f003 0301 	and.w	r3, r3, #1
 8008cfa:	613b      	str	r3, [r7, #16]
 8008cfc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008cfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008d04:	2300      	movs	r3, #0
 8008d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008d0c:	f107 0314 	add.w	r3, r7, #20
 8008d10:	4619      	mov	r1, r3
 8008d12:	481b      	ldr	r0, [pc, #108]	; (8008d80 <HAL_HCD_MspInit+0xc0>)
 8008d14:	f7f8 ff00 	bl	8001b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008d18:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d1e:	2302      	movs	r3, #2
 8008d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d22:	2300      	movs	r3, #0
 8008d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d26:	2300      	movs	r3, #0
 8008d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008d2a:	230a      	movs	r3, #10
 8008d2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d2e:	f107 0314 	add.w	r3, r7, #20
 8008d32:	4619      	mov	r1, r3
 8008d34:	4812      	ldr	r0, [pc, #72]	; (8008d80 <HAL_HCD_MspInit+0xc0>)
 8008d36:	f7f8 feef 	bl	8001b18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008d3a:	4b10      	ldr	r3, [pc, #64]	; (8008d7c <HAL_HCD_MspInit+0xbc>)
 8008d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d3e:	4a0f      	ldr	r2, [pc, #60]	; (8008d7c <HAL_HCD_MspInit+0xbc>)
 8008d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d44:	6353      	str	r3, [r2, #52]	; 0x34
 8008d46:	2300      	movs	r3, #0
 8008d48:	60fb      	str	r3, [r7, #12]
 8008d4a:	4b0c      	ldr	r3, [pc, #48]	; (8008d7c <HAL_HCD_MspInit+0xbc>)
 8008d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d4e:	4a0b      	ldr	r2, [pc, #44]	; (8008d7c <HAL_HCD_MspInit+0xbc>)
 8008d50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d54:	6453      	str	r3, [r2, #68]	; 0x44
 8008d56:	4b09      	ldr	r3, [pc, #36]	; (8008d7c <HAL_HCD_MspInit+0xbc>)
 8008d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d5e:	60fb      	str	r3, [r7, #12]
 8008d60:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008d62:	2200      	movs	r2, #0
 8008d64:	2100      	movs	r1, #0
 8008d66:	2043      	movs	r0, #67	; 0x43
 8008d68:	f7f8 fe9f 	bl	8001aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008d6c:	2043      	movs	r0, #67	; 0x43
 8008d6e:	f7f8 feb8 	bl	8001ae2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008d72:	bf00      	nop
 8008d74:	3728      	adds	r7, #40	; 0x28
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	40023800 	.word	0x40023800
 8008d80:	40020000 	.word	0x40020000

08008d84 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d92:	4618      	mov	r0, r3
 8008d94:	f7ff f8b9 	bl	8007f0a <USBH_LL_IncTimer>
}
 8008d98:	bf00      	nop
 8008d9a:	3708      	adds	r7, #8
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7ff f8fe 	bl	8007fb0 <USBH_LL_Connect>
}
 8008db4:	bf00      	nop
 8008db6:	3708      	adds	r7, #8
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7ff f916 	bl	8007ffc <USBH_LL_Disconnect>
}
 8008dd0:	bf00      	nop
 8008dd2:	3708      	adds	r7, #8
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b083      	sub	sp, #12
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	460b      	mov	r3, r1
 8008de2:	70fb      	strb	r3, [r7, #3]
 8008de4:	4613      	mov	r3, r2
 8008de6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008de8:	bf00      	nop
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7ff f8ab 	bl	8007f5e <USBH_LL_PortEnabled>
} 
 8008e08:	bf00      	nop
 8008e0a:	3708      	adds	r7, #8
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f7ff f8ab 	bl	8007f7a <USBH_LL_PortDisabled>
} 
 8008e24:	bf00      	nop
 8008e26:	3708      	adds	r7, #8
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d12a      	bne.n	8008e94 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008e3e:	4a18      	ldr	r2, [pc, #96]	; (8008ea0 <USBH_LL_Init+0x74>)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	4a15      	ldr	r2, [pc, #84]	; (8008ea0 <USBH_LL_Init+0x74>)
 8008e4a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008e4e:	4b14      	ldr	r3, [pc, #80]	; (8008ea0 <USBH_LL_Init+0x74>)
 8008e50:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008e54:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008e56:	4b12      	ldr	r3, [pc, #72]	; (8008ea0 <USBH_LL_Init+0x74>)
 8008e58:	2208      	movs	r2, #8
 8008e5a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008e5c:	4b10      	ldr	r3, [pc, #64]	; (8008ea0 <USBH_LL_Init+0x74>)
 8008e5e:	2201      	movs	r2, #1
 8008e60:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008e62:	4b0f      	ldr	r3, [pc, #60]	; (8008ea0 <USBH_LL_Init+0x74>)
 8008e64:	2200      	movs	r2, #0
 8008e66:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008e68:	4b0d      	ldr	r3, [pc, #52]	; (8008ea0 <USBH_LL_Init+0x74>)
 8008e6a:	2202      	movs	r2, #2
 8008e6c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008e6e:	4b0c      	ldr	r3, [pc, #48]	; (8008ea0 <USBH_LL_Init+0x74>)
 8008e70:	2200      	movs	r2, #0
 8008e72:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008e74:	480a      	ldr	r0, [pc, #40]	; (8008ea0 <USBH_LL_Init+0x74>)
 8008e76:	f7f9 f81a 	bl	8001eae <HAL_HCD_Init>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d001      	beq.n	8008e84 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008e80:	f7f8 f966 	bl	8001150 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008e84:	4806      	ldr	r0, [pc, #24]	; (8008ea0 <USBH_LL_Init+0x74>)
 8008e86:	f7f9 fc15 	bl	80026b4 <HAL_HCD_GetCurrentFrame>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f7ff f82c 	bl	8007eec <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3708      	adds	r7, #8
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	2000086c 	.word	0x2000086c

08008ea4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eac:	2300      	movs	r3, #0
 8008eae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7f9 fb82 	bl	80025c4 <HAL_HCD_Start>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ec4:	7bfb      	ldrb	r3, [r7, #15]
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f000 f95c 	bl	8009184 <USBH_Get_USB_Status>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008ed0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b084      	sub	sp, #16
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7f9 fb8a 	bl	800260a <HAL_HCD_Stop>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008efa:	7bfb      	ldrb	r3, [r7, #15]
 8008efc:	4618      	mov	r0, r3
 8008efe:	f000 f941 	bl	8009184 <USBH_Get_USB_Status>
 8008f02:	4603      	mov	r3, r0
 8008f04:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8008f06:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3710      	adds	r7, #16
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008f22:	4618      	mov	r0, r3
 8008f24:	f7f9 fbd4 	bl	80026d0 <HAL_HCD_GetCurrentSpeed>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d007      	beq.n	8008f3e <USBH_LL_GetSpeed+0x2e>
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d302      	bcc.n	8008f38 <USBH_LL_GetSpeed+0x28>
 8008f32:	2b02      	cmp	r3, #2
 8008f34:	d006      	beq.n	8008f44 <USBH_LL_GetSpeed+0x34>
 8008f36:	e008      	b.n	8008f4a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f3c:	e008      	b.n	8008f50 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	73fb      	strb	r3, [r7, #15]
    break;
 8008f42:	e005      	b.n	8008f50 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008f44:	2302      	movs	r3, #2
 8008f46:	73fb      	strb	r3, [r7, #15]
    break;
 8008f48:	e002      	b.n	8008f50 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	73fb      	strb	r3, [r7, #15]
    break;
 8008f4e:	bf00      	nop
  }
  return  speed;
 8008f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3710      	adds	r7, #16
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}

08008f5a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008f5a:	b580      	push	{r7, lr}
 8008f5c:	b084      	sub	sp, #16
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f62:	2300      	movs	r3, #0
 8008f64:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f66:	2300      	movs	r3, #0
 8008f68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7f9 fb67 	bl	8002644 <HAL_HCD_ResetPort>
 8008f76:	4603      	mov	r3, r0
 8008f78:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8008f7a:	7bfb      	ldrb	r3, [r7, #15]
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f000 f901 	bl	8009184 <USBH_Get_USB_Status>
 8008f82:	4603      	mov	r3, r0
 8008f84:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008f86:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3710      	adds	r7, #16
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	460b      	mov	r3, r1
 8008f9a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008fa2:	78fa      	ldrb	r2, [r7, #3]
 8008fa4:	4611      	mov	r1, r2
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7f9 fb6f 	bl	800268a <HAL_HCD_HC_GetXferCount>
 8008fac:	4603      	mov	r3, r0
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3708      	adds	r7, #8
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008fb6:	b590      	push	{r4, r7, lr}
 8008fb8:	b089      	sub	sp, #36	; 0x24
 8008fba:	af04      	add	r7, sp, #16
 8008fbc:	6078      	str	r0, [r7, #4]
 8008fbe:	4608      	mov	r0, r1
 8008fc0:	4611      	mov	r1, r2
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	70fb      	strb	r3, [r7, #3]
 8008fc8:	460b      	mov	r3, r1
 8008fca:	70bb      	strb	r3, [r7, #2]
 8008fcc:	4613      	mov	r3, r2
 8008fce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8008fde:	787c      	ldrb	r4, [r7, #1]
 8008fe0:	78ba      	ldrb	r2, [r7, #2]
 8008fe2:	78f9      	ldrb	r1, [r7, #3]
 8008fe4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008fe6:	9302      	str	r3, [sp, #8]
 8008fe8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008fec:	9301      	str	r3, [sp, #4]
 8008fee:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008ff2:	9300      	str	r3, [sp, #0]
 8008ff4:	4623      	mov	r3, r4
 8008ff6:	f7f8 ffbc 	bl	8001f72 <HAL_HCD_HC_Init>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ffe:	7bfb      	ldrb	r3, [r7, #15]
 8009000:	4618      	mov	r0, r3
 8009002:	f000 f8bf 	bl	8009184 <USBH_Get_USB_Status>
 8009006:	4603      	mov	r3, r0
 8009008:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800900a:	7bbb      	ldrb	r3, [r7, #14]
}
 800900c:	4618      	mov	r0, r3
 800900e:	3714      	adds	r7, #20
 8009010:	46bd      	mov	sp, r7
 8009012:	bd90      	pop	{r4, r7, pc}

08009014 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	460b      	mov	r3, r1
 800901e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009020:	2300      	movs	r3, #0
 8009022:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009024:	2300      	movs	r3, #0
 8009026:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800902e:	78fa      	ldrb	r2, [r7, #3]
 8009030:	4611      	mov	r1, r2
 8009032:	4618      	mov	r0, r3
 8009034:	f7f9 f835 	bl	80020a2 <HAL_HCD_HC_Halt>
 8009038:	4603      	mov	r3, r0
 800903a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800903c:	7bfb      	ldrb	r3, [r7, #15]
 800903e:	4618      	mov	r0, r3
 8009040:	f000 f8a0 	bl	8009184 <USBH_Get_USB_Status>
 8009044:	4603      	mov	r3, r0
 8009046:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009048:	7bbb      	ldrb	r3, [r7, #14]
}
 800904a:	4618      	mov	r0, r3
 800904c:	3710      	adds	r7, #16
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009052:	b590      	push	{r4, r7, lr}
 8009054:	b089      	sub	sp, #36	; 0x24
 8009056:	af04      	add	r7, sp, #16
 8009058:	6078      	str	r0, [r7, #4]
 800905a:	4608      	mov	r0, r1
 800905c:	4611      	mov	r1, r2
 800905e:	461a      	mov	r2, r3
 8009060:	4603      	mov	r3, r0
 8009062:	70fb      	strb	r3, [r7, #3]
 8009064:	460b      	mov	r3, r1
 8009066:	70bb      	strb	r3, [r7, #2]
 8009068:	4613      	mov	r3, r2
 800906a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800906c:	2300      	movs	r3, #0
 800906e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009070:	2300      	movs	r3, #0
 8009072:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800907a:	787c      	ldrb	r4, [r7, #1]
 800907c:	78ba      	ldrb	r2, [r7, #2]
 800907e:	78f9      	ldrb	r1, [r7, #3]
 8009080:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009084:	9303      	str	r3, [sp, #12]
 8009086:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009088:	9302      	str	r3, [sp, #8]
 800908a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908c:	9301      	str	r3, [sp, #4]
 800908e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009092:	9300      	str	r3, [sp, #0]
 8009094:	4623      	mov	r3, r4
 8009096:	f7f9 f827 	bl	80020e8 <HAL_HCD_HC_SubmitRequest>
 800909a:	4603      	mov	r3, r0
 800909c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800909e:	7bfb      	ldrb	r3, [r7, #15]
 80090a0:	4618      	mov	r0, r3
 80090a2:	f000 f86f 	bl	8009184 <USBH_Get_USB_Status>
 80090a6:	4603      	mov	r3, r0
 80090a8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80090aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3714      	adds	r7, #20
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd90      	pop	{r4, r7, pc}

080090b4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	460b      	mov	r3, r1
 80090be:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80090c6:	78fa      	ldrb	r2, [r7, #3]
 80090c8:	4611      	mov	r1, r2
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7f9 fac8 	bl	8002660 <HAL_HCD_HC_GetURBState>
 80090d0:	4603      	mov	r3, r0
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3708      	adds	r7, #8
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}

080090da <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80090da:	b580      	push	{r7, lr}
 80090dc:	b082      	sub	sp, #8
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
 80090e2:	460b      	mov	r3, r1
 80090e4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d103      	bne.n	80090f8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80090f0:	78fb      	ldrb	r3, [r7, #3]
 80090f2:	4618      	mov	r0, r3
 80090f4:	f000 f872 	bl	80091dc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80090f8:	20c8      	movs	r0, #200	; 0xc8
 80090fa:	f7f8 fbd9 	bl	80018b0 <HAL_Delay>
  return USBH_OK;
 80090fe:	2300      	movs	r3, #0
}
 8009100:	4618      	mov	r0, r3
 8009102:	3708      	adds	r7, #8
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009108:	b480      	push	{r7}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	460b      	mov	r3, r1
 8009112:	70fb      	strb	r3, [r7, #3]
 8009114:	4613      	mov	r3, r2
 8009116:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800911e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009120:	78fa      	ldrb	r2, [r7, #3]
 8009122:	68f9      	ldr	r1, [r7, #12]
 8009124:	4613      	mov	r3, r2
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	4413      	add	r3, r2
 800912a:	00db      	lsls	r3, r3, #3
 800912c:	440b      	add	r3, r1
 800912e:	333b      	adds	r3, #59	; 0x3b
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d00a      	beq.n	800914c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009136:	78fa      	ldrb	r2, [r7, #3]
 8009138:	68f9      	ldr	r1, [r7, #12]
 800913a:	4613      	mov	r3, r2
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	4413      	add	r3, r2
 8009140:	00db      	lsls	r3, r3, #3
 8009142:	440b      	add	r3, r1
 8009144:	3350      	adds	r3, #80	; 0x50
 8009146:	78ba      	ldrb	r2, [r7, #2]
 8009148:	701a      	strb	r2, [r3, #0]
 800914a:	e009      	b.n	8009160 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800914c:	78fa      	ldrb	r2, [r7, #3]
 800914e:	68f9      	ldr	r1, [r7, #12]
 8009150:	4613      	mov	r3, r2
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	4413      	add	r3, r2
 8009156:	00db      	lsls	r3, r3, #3
 8009158:	440b      	add	r3, r1
 800915a:	3351      	adds	r3, #81	; 0x51
 800915c:	78ba      	ldrb	r2, [r7, #2]
 800915e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009160:	2300      	movs	r3, #0
}
 8009162:	4618      	mov	r0, r3
 8009164:	3714      	adds	r7, #20
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr

0800916e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800916e:	b580      	push	{r7, lr}
 8009170:	b082      	sub	sp, #8
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f7f8 fb9a 	bl	80018b0 <HAL_Delay>
}
 800917c:	bf00      	nop
 800917e:	3708      	adds	r7, #8
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009184:	b480      	push	{r7}
 8009186:	b085      	sub	sp, #20
 8009188:	af00      	add	r7, sp, #0
 800918a:	4603      	mov	r3, r0
 800918c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800918e:	2300      	movs	r3, #0
 8009190:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009192:	79fb      	ldrb	r3, [r7, #7]
 8009194:	2b03      	cmp	r3, #3
 8009196:	d817      	bhi.n	80091c8 <USBH_Get_USB_Status+0x44>
 8009198:	a201      	add	r2, pc, #4	; (adr r2, 80091a0 <USBH_Get_USB_Status+0x1c>)
 800919a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800919e:	bf00      	nop
 80091a0:	080091b1 	.word	0x080091b1
 80091a4:	080091b7 	.word	0x080091b7
 80091a8:	080091bd 	.word	0x080091bd
 80091ac:	080091c3 	.word	0x080091c3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80091b0:	2300      	movs	r3, #0
 80091b2:	73fb      	strb	r3, [r7, #15]
    break;
 80091b4:	e00b      	b.n	80091ce <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80091b6:	2302      	movs	r3, #2
 80091b8:	73fb      	strb	r3, [r7, #15]
    break;
 80091ba:	e008      	b.n	80091ce <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80091bc:	2301      	movs	r3, #1
 80091be:	73fb      	strb	r3, [r7, #15]
    break;
 80091c0:	e005      	b.n	80091ce <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80091c2:	2302      	movs	r3, #2
 80091c4:	73fb      	strb	r3, [r7, #15]
    break;
 80091c6:	e002      	b.n	80091ce <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80091c8:	2302      	movs	r3, #2
 80091ca:	73fb      	strb	r3, [r7, #15]
    break;
 80091cc:	bf00      	nop
  }
  return usb_status;
 80091ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3714      	adds	r7, #20
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	4603      	mov	r3, r0
 80091e4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 80091e6:	79fb      	ldrb	r3, [r7, #7]
 80091e8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80091ea:	79fb      	ldrb	r3, [r7, #7]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d102      	bne.n	80091f6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 80091f0:	2301      	movs	r3, #1
 80091f2:	73fb      	strb	r3, [r7, #15]
 80091f4:	e001      	b.n	80091fa <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80091f6:	2300      	movs	r3, #0
 80091f8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80091fa:	7bfb      	ldrb	r3, [r7, #15]
 80091fc:	461a      	mov	r2, r3
 80091fe:	2101      	movs	r1, #1
 8009200:	4803      	ldr	r0, [pc, #12]	; (8009210 <MX_DriverVbusFS+0x34>)
 8009202:	f7f8 fe3b 	bl	8001e7c <HAL_GPIO_WritePin>
}
 8009206:	bf00      	nop
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	40020800 	.word	0x40020800

08009214 <__errno>:
 8009214:	4b01      	ldr	r3, [pc, #4]	; (800921c <__errno+0x8>)
 8009216:	6818      	ldr	r0, [r3, #0]
 8009218:	4770      	bx	lr
 800921a:	bf00      	nop
 800921c:	20000038 	.word	0x20000038

08009220 <__libc_init_array>:
 8009220:	b570      	push	{r4, r5, r6, lr}
 8009222:	4e0d      	ldr	r6, [pc, #52]	; (8009258 <__libc_init_array+0x38>)
 8009224:	4c0d      	ldr	r4, [pc, #52]	; (800925c <__libc_init_array+0x3c>)
 8009226:	1ba4      	subs	r4, r4, r6
 8009228:	10a4      	asrs	r4, r4, #2
 800922a:	2500      	movs	r5, #0
 800922c:	42a5      	cmp	r5, r4
 800922e:	d109      	bne.n	8009244 <__libc_init_array+0x24>
 8009230:	4e0b      	ldr	r6, [pc, #44]	; (8009260 <__libc_init_array+0x40>)
 8009232:	4c0c      	ldr	r4, [pc, #48]	; (8009264 <__libc_init_array+0x44>)
 8009234:	f000 fe08 	bl	8009e48 <_init>
 8009238:	1ba4      	subs	r4, r4, r6
 800923a:	10a4      	asrs	r4, r4, #2
 800923c:	2500      	movs	r5, #0
 800923e:	42a5      	cmp	r5, r4
 8009240:	d105      	bne.n	800924e <__libc_init_array+0x2e>
 8009242:	bd70      	pop	{r4, r5, r6, pc}
 8009244:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009248:	4798      	blx	r3
 800924a:	3501      	adds	r5, #1
 800924c:	e7ee      	b.n	800922c <__libc_init_array+0xc>
 800924e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009252:	4798      	blx	r3
 8009254:	3501      	adds	r5, #1
 8009256:	e7f2      	b.n	800923e <__libc_init_array+0x1e>
 8009258:	0800a040 	.word	0x0800a040
 800925c:	0800a040 	.word	0x0800a040
 8009260:	0800a040 	.word	0x0800a040
 8009264:	0800a044 	.word	0x0800a044

08009268 <malloc>:
 8009268:	4b02      	ldr	r3, [pc, #8]	; (8009274 <malloc+0xc>)
 800926a:	4601      	mov	r1, r0
 800926c:	6818      	ldr	r0, [r3, #0]
 800926e:	f000 b861 	b.w	8009334 <_malloc_r>
 8009272:	bf00      	nop
 8009274:	20000038 	.word	0x20000038

08009278 <free>:
 8009278:	4b02      	ldr	r3, [pc, #8]	; (8009284 <free+0xc>)
 800927a:	4601      	mov	r1, r0
 800927c:	6818      	ldr	r0, [r3, #0]
 800927e:	f000 b80b 	b.w	8009298 <_free_r>
 8009282:	bf00      	nop
 8009284:	20000038 	.word	0x20000038

08009288 <memset>:
 8009288:	4402      	add	r2, r0
 800928a:	4603      	mov	r3, r0
 800928c:	4293      	cmp	r3, r2
 800928e:	d100      	bne.n	8009292 <memset+0xa>
 8009290:	4770      	bx	lr
 8009292:	f803 1b01 	strb.w	r1, [r3], #1
 8009296:	e7f9      	b.n	800928c <memset+0x4>

08009298 <_free_r>:
 8009298:	b538      	push	{r3, r4, r5, lr}
 800929a:	4605      	mov	r5, r0
 800929c:	2900      	cmp	r1, #0
 800929e:	d045      	beq.n	800932c <_free_r+0x94>
 80092a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092a4:	1f0c      	subs	r4, r1, #4
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	bfb8      	it	lt
 80092aa:	18e4      	addlt	r4, r4, r3
 80092ac:	f000 f8d8 	bl	8009460 <__malloc_lock>
 80092b0:	4a1f      	ldr	r2, [pc, #124]	; (8009330 <_free_r+0x98>)
 80092b2:	6813      	ldr	r3, [r2, #0]
 80092b4:	4610      	mov	r0, r2
 80092b6:	b933      	cbnz	r3, 80092c6 <_free_r+0x2e>
 80092b8:	6063      	str	r3, [r4, #4]
 80092ba:	6014      	str	r4, [r2, #0]
 80092bc:	4628      	mov	r0, r5
 80092be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092c2:	f000 b8ce 	b.w	8009462 <__malloc_unlock>
 80092c6:	42a3      	cmp	r3, r4
 80092c8:	d90c      	bls.n	80092e4 <_free_r+0x4c>
 80092ca:	6821      	ldr	r1, [r4, #0]
 80092cc:	1862      	adds	r2, r4, r1
 80092ce:	4293      	cmp	r3, r2
 80092d0:	bf04      	itt	eq
 80092d2:	681a      	ldreq	r2, [r3, #0]
 80092d4:	685b      	ldreq	r3, [r3, #4]
 80092d6:	6063      	str	r3, [r4, #4]
 80092d8:	bf04      	itt	eq
 80092da:	1852      	addeq	r2, r2, r1
 80092dc:	6022      	streq	r2, [r4, #0]
 80092de:	6004      	str	r4, [r0, #0]
 80092e0:	e7ec      	b.n	80092bc <_free_r+0x24>
 80092e2:	4613      	mov	r3, r2
 80092e4:	685a      	ldr	r2, [r3, #4]
 80092e6:	b10a      	cbz	r2, 80092ec <_free_r+0x54>
 80092e8:	42a2      	cmp	r2, r4
 80092ea:	d9fa      	bls.n	80092e2 <_free_r+0x4a>
 80092ec:	6819      	ldr	r1, [r3, #0]
 80092ee:	1858      	adds	r0, r3, r1
 80092f0:	42a0      	cmp	r0, r4
 80092f2:	d10b      	bne.n	800930c <_free_r+0x74>
 80092f4:	6820      	ldr	r0, [r4, #0]
 80092f6:	4401      	add	r1, r0
 80092f8:	1858      	adds	r0, r3, r1
 80092fa:	4282      	cmp	r2, r0
 80092fc:	6019      	str	r1, [r3, #0]
 80092fe:	d1dd      	bne.n	80092bc <_free_r+0x24>
 8009300:	6810      	ldr	r0, [r2, #0]
 8009302:	6852      	ldr	r2, [r2, #4]
 8009304:	605a      	str	r2, [r3, #4]
 8009306:	4401      	add	r1, r0
 8009308:	6019      	str	r1, [r3, #0]
 800930a:	e7d7      	b.n	80092bc <_free_r+0x24>
 800930c:	d902      	bls.n	8009314 <_free_r+0x7c>
 800930e:	230c      	movs	r3, #12
 8009310:	602b      	str	r3, [r5, #0]
 8009312:	e7d3      	b.n	80092bc <_free_r+0x24>
 8009314:	6820      	ldr	r0, [r4, #0]
 8009316:	1821      	adds	r1, r4, r0
 8009318:	428a      	cmp	r2, r1
 800931a:	bf04      	itt	eq
 800931c:	6811      	ldreq	r1, [r2, #0]
 800931e:	6852      	ldreq	r2, [r2, #4]
 8009320:	6062      	str	r2, [r4, #4]
 8009322:	bf04      	itt	eq
 8009324:	1809      	addeq	r1, r1, r0
 8009326:	6021      	streq	r1, [r4, #0]
 8009328:	605c      	str	r4, [r3, #4]
 800932a:	e7c7      	b.n	80092bc <_free_r+0x24>
 800932c:	bd38      	pop	{r3, r4, r5, pc}
 800932e:	bf00      	nop
 8009330:	2000023c 	.word	0x2000023c

08009334 <_malloc_r>:
 8009334:	b570      	push	{r4, r5, r6, lr}
 8009336:	1ccd      	adds	r5, r1, #3
 8009338:	f025 0503 	bic.w	r5, r5, #3
 800933c:	3508      	adds	r5, #8
 800933e:	2d0c      	cmp	r5, #12
 8009340:	bf38      	it	cc
 8009342:	250c      	movcc	r5, #12
 8009344:	2d00      	cmp	r5, #0
 8009346:	4606      	mov	r6, r0
 8009348:	db01      	blt.n	800934e <_malloc_r+0x1a>
 800934a:	42a9      	cmp	r1, r5
 800934c:	d903      	bls.n	8009356 <_malloc_r+0x22>
 800934e:	230c      	movs	r3, #12
 8009350:	6033      	str	r3, [r6, #0]
 8009352:	2000      	movs	r0, #0
 8009354:	bd70      	pop	{r4, r5, r6, pc}
 8009356:	f000 f883 	bl	8009460 <__malloc_lock>
 800935a:	4a21      	ldr	r2, [pc, #132]	; (80093e0 <_malloc_r+0xac>)
 800935c:	6814      	ldr	r4, [r2, #0]
 800935e:	4621      	mov	r1, r4
 8009360:	b991      	cbnz	r1, 8009388 <_malloc_r+0x54>
 8009362:	4c20      	ldr	r4, [pc, #128]	; (80093e4 <_malloc_r+0xb0>)
 8009364:	6823      	ldr	r3, [r4, #0]
 8009366:	b91b      	cbnz	r3, 8009370 <_malloc_r+0x3c>
 8009368:	4630      	mov	r0, r6
 800936a:	f000 f83d 	bl	80093e8 <_sbrk_r>
 800936e:	6020      	str	r0, [r4, #0]
 8009370:	4629      	mov	r1, r5
 8009372:	4630      	mov	r0, r6
 8009374:	f000 f838 	bl	80093e8 <_sbrk_r>
 8009378:	1c43      	adds	r3, r0, #1
 800937a:	d124      	bne.n	80093c6 <_malloc_r+0x92>
 800937c:	230c      	movs	r3, #12
 800937e:	6033      	str	r3, [r6, #0]
 8009380:	4630      	mov	r0, r6
 8009382:	f000 f86e 	bl	8009462 <__malloc_unlock>
 8009386:	e7e4      	b.n	8009352 <_malloc_r+0x1e>
 8009388:	680b      	ldr	r3, [r1, #0]
 800938a:	1b5b      	subs	r3, r3, r5
 800938c:	d418      	bmi.n	80093c0 <_malloc_r+0x8c>
 800938e:	2b0b      	cmp	r3, #11
 8009390:	d90f      	bls.n	80093b2 <_malloc_r+0x7e>
 8009392:	600b      	str	r3, [r1, #0]
 8009394:	50cd      	str	r5, [r1, r3]
 8009396:	18cc      	adds	r4, r1, r3
 8009398:	4630      	mov	r0, r6
 800939a:	f000 f862 	bl	8009462 <__malloc_unlock>
 800939e:	f104 000b 	add.w	r0, r4, #11
 80093a2:	1d23      	adds	r3, r4, #4
 80093a4:	f020 0007 	bic.w	r0, r0, #7
 80093a8:	1ac3      	subs	r3, r0, r3
 80093aa:	d0d3      	beq.n	8009354 <_malloc_r+0x20>
 80093ac:	425a      	negs	r2, r3
 80093ae:	50e2      	str	r2, [r4, r3]
 80093b0:	e7d0      	b.n	8009354 <_malloc_r+0x20>
 80093b2:	428c      	cmp	r4, r1
 80093b4:	684b      	ldr	r3, [r1, #4]
 80093b6:	bf16      	itet	ne
 80093b8:	6063      	strne	r3, [r4, #4]
 80093ba:	6013      	streq	r3, [r2, #0]
 80093bc:	460c      	movne	r4, r1
 80093be:	e7eb      	b.n	8009398 <_malloc_r+0x64>
 80093c0:	460c      	mov	r4, r1
 80093c2:	6849      	ldr	r1, [r1, #4]
 80093c4:	e7cc      	b.n	8009360 <_malloc_r+0x2c>
 80093c6:	1cc4      	adds	r4, r0, #3
 80093c8:	f024 0403 	bic.w	r4, r4, #3
 80093cc:	42a0      	cmp	r0, r4
 80093ce:	d005      	beq.n	80093dc <_malloc_r+0xa8>
 80093d0:	1a21      	subs	r1, r4, r0
 80093d2:	4630      	mov	r0, r6
 80093d4:	f000 f808 	bl	80093e8 <_sbrk_r>
 80093d8:	3001      	adds	r0, #1
 80093da:	d0cf      	beq.n	800937c <_malloc_r+0x48>
 80093dc:	6025      	str	r5, [r4, #0]
 80093de:	e7db      	b.n	8009398 <_malloc_r+0x64>
 80093e0:	2000023c 	.word	0x2000023c
 80093e4:	20000240 	.word	0x20000240

080093e8 <_sbrk_r>:
 80093e8:	b538      	push	{r3, r4, r5, lr}
 80093ea:	4c06      	ldr	r4, [pc, #24]	; (8009404 <_sbrk_r+0x1c>)
 80093ec:	2300      	movs	r3, #0
 80093ee:	4605      	mov	r5, r0
 80093f0:	4608      	mov	r0, r1
 80093f2:	6023      	str	r3, [r4, #0]
 80093f4:	f7f8 f97e 	bl	80016f4 <_sbrk>
 80093f8:	1c43      	adds	r3, r0, #1
 80093fa:	d102      	bne.n	8009402 <_sbrk_r+0x1a>
 80093fc:	6823      	ldr	r3, [r4, #0]
 80093fe:	b103      	cbz	r3, 8009402 <_sbrk_r+0x1a>
 8009400:	602b      	str	r3, [r5, #0]
 8009402:	bd38      	pop	{r3, r4, r5, pc}
 8009404:	20000b30 	.word	0x20000b30

08009408 <siscanf>:
 8009408:	b40e      	push	{r1, r2, r3}
 800940a:	b530      	push	{r4, r5, lr}
 800940c:	b09c      	sub	sp, #112	; 0x70
 800940e:	ac1f      	add	r4, sp, #124	; 0x7c
 8009410:	f44f 7201 	mov.w	r2, #516	; 0x204
 8009414:	f854 5b04 	ldr.w	r5, [r4], #4
 8009418:	f8ad 2014 	strh.w	r2, [sp, #20]
 800941c:	9002      	str	r0, [sp, #8]
 800941e:	9006      	str	r0, [sp, #24]
 8009420:	f7f6 fee0 	bl	80001e4 <strlen>
 8009424:	4b0b      	ldr	r3, [pc, #44]	; (8009454 <siscanf+0x4c>)
 8009426:	9003      	str	r0, [sp, #12]
 8009428:	9007      	str	r0, [sp, #28]
 800942a:	930b      	str	r3, [sp, #44]	; 0x2c
 800942c:	480a      	ldr	r0, [pc, #40]	; (8009458 <siscanf+0x50>)
 800942e:	9401      	str	r4, [sp, #4]
 8009430:	2300      	movs	r3, #0
 8009432:	930f      	str	r3, [sp, #60]	; 0x3c
 8009434:	9314      	str	r3, [sp, #80]	; 0x50
 8009436:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800943a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800943e:	462a      	mov	r2, r5
 8009440:	4623      	mov	r3, r4
 8009442:	a902      	add	r1, sp, #8
 8009444:	6800      	ldr	r0, [r0, #0]
 8009446:	f000 f867 	bl	8009518 <__ssvfiscanf_r>
 800944a:	b01c      	add	sp, #112	; 0x70
 800944c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009450:	b003      	add	sp, #12
 8009452:	4770      	bx	lr
 8009454:	0800945d 	.word	0x0800945d
 8009458:	20000038 	.word	0x20000038

0800945c <__seofread>:
 800945c:	2000      	movs	r0, #0
 800945e:	4770      	bx	lr

08009460 <__malloc_lock>:
 8009460:	4770      	bx	lr

08009462 <__malloc_unlock>:
 8009462:	4770      	bx	lr

08009464 <_sungetc_r>:
 8009464:	b538      	push	{r3, r4, r5, lr}
 8009466:	1c4b      	adds	r3, r1, #1
 8009468:	4614      	mov	r4, r2
 800946a:	d103      	bne.n	8009474 <_sungetc_r+0x10>
 800946c:	f04f 35ff 	mov.w	r5, #4294967295
 8009470:	4628      	mov	r0, r5
 8009472:	bd38      	pop	{r3, r4, r5, pc}
 8009474:	8993      	ldrh	r3, [r2, #12]
 8009476:	f023 0320 	bic.w	r3, r3, #32
 800947a:	8193      	strh	r3, [r2, #12]
 800947c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800947e:	6852      	ldr	r2, [r2, #4]
 8009480:	b2cd      	uxtb	r5, r1
 8009482:	b18b      	cbz	r3, 80094a8 <_sungetc_r+0x44>
 8009484:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009486:	4293      	cmp	r3, r2
 8009488:	dd08      	ble.n	800949c <_sungetc_r+0x38>
 800948a:	6823      	ldr	r3, [r4, #0]
 800948c:	1e5a      	subs	r2, r3, #1
 800948e:	6022      	str	r2, [r4, #0]
 8009490:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009494:	6863      	ldr	r3, [r4, #4]
 8009496:	3301      	adds	r3, #1
 8009498:	6063      	str	r3, [r4, #4]
 800949a:	e7e9      	b.n	8009470 <_sungetc_r+0xc>
 800949c:	4621      	mov	r1, r4
 800949e:	f000 fc2f 	bl	8009d00 <__submore>
 80094a2:	2800      	cmp	r0, #0
 80094a4:	d0f1      	beq.n	800948a <_sungetc_r+0x26>
 80094a6:	e7e1      	b.n	800946c <_sungetc_r+0x8>
 80094a8:	6921      	ldr	r1, [r4, #16]
 80094aa:	6823      	ldr	r3, [r4, #0]
 80094ac:	b151      	cbz	r1, 80094c4 <_sungetc_r+0x60>
 80094ae:	4299      	cmp	r1, r3
 80094b0:	d208      	bcs.n	80094c4 <_sungetc_r+0x60>
 80094b2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80094b6:	42a9      	cmp	r1, r5
 80094b8:	d104      	bne.n	80094c4 <_sungetc_r+0x60>
 80094ba:	3b01      	subs	r3, #1
 80094bc:	3201      	adds	r2, #1
 80094be:	6023      	str	r3, [r4, #0]
 80094c0:	6062      	str	r2, [r4, #4]
 80094c2:	e7d5      	b.n	8009470 <_sungetc_r+0xc>
 80094c4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80094c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094cc:	6363      	str	r3, [r4, #52]	; 0x34
 80094ce:	2303      	movs	r3, #3
 80094d0:	63a3      	str	r3, [r4, #56]	; 0x38
 80094d2:	4623      	mov	r3, r4
 80094d4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80094d8:	6023      	str	r3, [r4, #0]
 80094da:	2301      	movs	r3, #1
 80094dc:	e7dc      	b.n	8009498 <_sungetc_r+0x34>

080094de <__ssrefill_r>:
 80094de:	b510      	push	{r4, lr}
 80094e0:	460c      	mov	r4, r1
 80094e2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80094e4:	b169      	cbz	r1, 8009502 <__ssrefill_r+0x24>
 80094e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094ea:	4299      	cmp	r1, r3
 80094ec:	d001      	beq.n	80094f2 <__ssrefill_r+0x14>
 80094ee:	f7ff fed3 	bl	8009298 <_free_r>
 80094f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80094f4:	6063      	str	r3, [r4, #4]
 80094f6:	2000      	movs	r0, #0
 80094f8:	6360      	str	r0, [r4, #52]	; 0x34
 80094fa:	b113      	cbz	r3, 8009502 <__ssrefill_r+0x24>
 80094fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80094fe:	6023      	str	r3, [r4, #0]
 8009500:	bd10      	pop	{r4, pc}
 8009502:	6923      	ldr	r3, [r4, #16]
 8009504:	6023      	str	r3, [r4, #0]
 8009506:	2300      	movs	r3, #0
 8009508:	6063      	str	r3, [r4, #4]
 800950a:	89a3      	ldrh	r3, [r4, #12]
 800950c:	f043 0320 	orr.w	r3, r3, #32
 8009510:	81a3      	strh	r3, [r4, #12]
 8009512:	f04f 30ff 	mov.w	r0, #4294967295
 8009516:	e7f3      	b.n	8009500 <__ssrefill_r+0x22>

08009518 <__ssvfiscanf_r>:
 8009518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800951c:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8009520:	460c      	mov	r4, r1
 8009522:	2100      	movs	r1, #0
 8009524:	9144      	str	r1, [sp, #272]	; 0x110
 8009526:	9145      	str	r1, [sp, #276]	; 0x114
 8009528:	499f      	ldr	r1, [pc, #636]	; (80097a8 <__ssvfiscanf_r+0x290>)
 800952a:	91a0      	str	r1, [sp, #640]	; 0x280
 800952c:	f10d 0804 	add.w	r8, sp, #4
 8009530:	499e      	ldr	r1, [pc, #632]	; (80097ac <__ssvfiscanf_r+0x294>)
 8009532:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80097b0 <__ssvfiscanf_r+0x298>
 8009536:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800953a:	4606      	mov	r6, r0
 800953c:	4692      	mov	sl, r2
 800953e:	91a1      	str	r1, [sp, #644]	; 0x284
 8009540:	9300      	str	r3, [sp, #0]
 8009542:	270a      	movs	r7, #10
 8009544:	f89a 3000 	ldrb.w	r3, [sl]
 8009548:	2b00      	cmp	r3, #0
 800954a:	f000 812a 	beq.w	80097a2 <__ssvfiscanf_r+0x28a>
 800954e:	4655      	mov	r5, sl
 8009550:	f000 fc14 	bl	8009d7c <__locale_ctype_ptr>
 8009554:	f815 bb01 	ldrb.w	fp, [r5], #1
 8009558:	4458      	add	r0, fp
 800955a:	7843      	ldrb	r3, [r0, #1]
 800955c:	f013 0308 	ands.w	r3, r3, #8
 8009560:	d01c      	beq.n	800959c <__ssvfiscanf_r+0x84>
 8009562:	6863      	ldr	r3, [r4, #4]
 8009564:	2b00      	cmp	r3, #0
 8009566:	dd12      	ble.n	800958e <__ssvfiscanf_r+0x76>
 8009568:	f000 fc08 	bl	8009d7c <__locale_ctype_ptr>
 800956c:	6823      	ldr	r3, [r4, #0]
 800956e:	781a      	ldrb	r2, [r3, #0]
 8009570:	4410      	add	r0, r2
 8009572:	7842      	ldrb	r2, [r0, #1]
 8009574:	0712      	lsls	r2, r2, #28
 8009576:	d401      	bmi.n	800957c <__ssvfiscanf_r+0x64>
 8009578:	46aa      	mov	sl, r5
 800957a:	e7e3      	b.n	8009544 <__ssvfiscanf_r+0x2c>
 800957c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800957e:	3201      	adds	r2, #1
 8009580:	9245      	str	r2, [sp, #276]	; 0x114
 8009582:	6862      	ldr	r2, [r4, #4]
 8009584:	3301      	adds	r3, #1
 8009586:	3a01      	subs	r2, #1
 8009588:	6062      	str	r2, [r4, #4]
 800958a:	6023      	str	r3, [r4, #0]
 800958c:	e7e9      	b.n	8009562 <__ssvfiscanf_r+0x4a>
 800958e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009590:	4621      	mov	r1, r4
 8009592:	4630      	mov	r0, r6
 8009594:	4798      	blx	r3
 8009596:	2800      	cmp	r0, #0
 8009598:	d0e6      	beq.n	8009568 <__ssvfiscanf_r+0x50>
 800959a:	e7ed      	b.n	8009578 <__ssvfiscanf_r+0x60>
 800959c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80095a0:	f040 8082 	bne.w	80096a8 <__ssvfiscanf_r+0x190>
 80095a4:	9343      	str	r3, [sp, #268]	; 0x10c
 80095a6:	9341      	str	r3, [sp, #260]	; 0x104
 80095a8:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80095ac:	2b2a      	cmp	r3, #42	; 0x2a
 80095ae:	d103      	bne.n	80095b8 <__ssvfiscanf_r+0xa0>
 80095b0:	2310      	movs	r3, #16
 80095b2:	9341      	str	r3, [sp, #260]	; 0x104
 80095b4:	f10a 0502 	add.w	r5, sl, #2
 80095b8:	46aa      	mov	sl, r5
 80095ba:	f815 1b01 	ldrb.w	r1, [r5], #1
 80095be:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80095c2:	2a09      	cmp	r2, #9
 80095c4:	d922      	bls.n	800960c <__ssvfiscanf_r+0xf4>
 80095c6:	2203      	movs	r2, #3
 80095c8:	4879      	ldr	r0, [pc, #484]	; (80097b0 <__ssvfiscanf_r+0x298>)
 80095ca:	f7f6 fe19 	bl	8000200 <memchr>
 80095ce:	b138      	cbz	r0, 80095e0 <__ssvfiscanf_r+0xc8>
 80095d0:	eba0 0309 	sub.w	r3, r0, r9
 80095d4:	2001      	movs	r0, #1
 80095d6:	4098      	lsls	r0, r3
 80095d8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80095da:	4318      	orrs	r0, r3
 80095dc:	9041      	str	r0, [sp, #260]	; 0x104
 80095de:	46aa      	mov	sl, r5
 80095e0:	f89a 3000 	ldrb.w	r3, [sl]
 80095e4:	2b67      	cmp	r3, #103	; 0x67
 80095e6:	f10a 0501 	add.w	r5, sl, #1
 80095ea:	d82b      	bhi.n	8009644 <__ssvfiscanf_r+0x12c>
 80095ec:	2b65      	cmp	r3, #101	; 0x65
 80095ee:	f080 809f 	bcs.w	8009730 <__ssvfiscanf_r+0x218>
 80095f2:	2b47      	cmp	r3, #71	; 0x47
 80095f4:	d810      	bhi.n	8009618 <__ssvfiscanf_r+0x100>
 80095f6:	2b45      	cmp	r3, #69	; 0x45
 80095f8:	f080 809a 	bcs.w	8009730 <__ssvfiscanf_r+0x218>
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d06c      	beq.n	80096da <__ssvfiscanf_r+0x1c2>
 8009600:	2b25      	cmp	r3, #37	; 0x25
 8009602:	d051      	beq.n	80096a8 <__ssvfiscanf_r+0x190>
 8009604:	2303      	movs	r3, #3
 8009606:	9347      	str	r3, [sp, #284]	; 0x11c
 8009608:	9742      	str	r7, [sp, #264]	; 0x108
 800960a:	e027      	b.n	800965c <__ssvfiscanf_r+0x144>
 800960c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800960e:	fb07 1303 	mla	r3, r7, r3, r1
 8009612:	3b30      	subs	r3, #48	; 0x30
 8009614:	9343      	str	r3, [sp, #268]	; 0x10c
 8009616:	e7cf      	b.n	80095b8 <__ssvfiscanf_r+0xa0>
 8009618:	2b5b      	cmp	r3, #91	; 0x5b
 800961a:	d06a      	beq.n	80096f2 <__ssvfiscanf_r+0x1da>
 800961c:	d80c      	bhi.n	8009638 <__ssvfiscanf_r+0x120>
 800961e:	2b58      	cmp	r3, #88	; 0x58
 8009620:	d1f0      	bne.n	8009604 <__ssvfiscanf_r+0xec>
 8009622:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009624:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009628:	9241      	str	r2, [sp, #260]	; 0x104
 800962a:	2210      	movs	r2, #16
 800962c:	9242      	str	r2, [sp, #264]	; 0x108
 800962e:	2b6e      	cmp	r3, #110	; 0x6e
 8009630:	bf8c      	ite	hi
 8009632:	2304      	movhi	r3, #4
 8009634:	2303      	movls	r3, #3
 8009636:	e010      	b.n	800965a <__ssvfiscanf_r+0x142>
 8009638:	2b63      	cmp	r3, #99	; 0x63
 800963a:	d065      	beq.n	8009708 <__ssvfiscanf_r+0x1f0>
 800963c:	2b64      	cmp	r3, #100	; 0x64
 800963e:	d1e1      	bne.n	8009604 <__ssvfiscanf_r+0xec>
 8009640:	9742      	str	r7, [sp, #264]	; 0x108
 8009642:	e7f4      	b.n	800962e <__ssvfiscanf_r+0x116>
 8009644:	2b70      	cmp	r3, #112	; 0x70
 8009646:	d04b      	beq.n	80096e0 <__ssvfiscanf_r+0x1c8>
 8009648:	d826      	bhi.n	8009698 <__ssvfiscanf_r+0x180>
 800964a:	2b6e      	cmp	r3, #110	; 0x6e
 800964c:	d062      	beq.n	8009714 <__ssvfiscanf_r+0x1fc>
 800964e:	d84c      	bhi.n	80096ea <__ssvfiscanf_r+0x1d2>
 8009650:	2b69      	cmp	r3, #105	; 0x69
 8009652:	d1d7      	bne.n	8009604 <__ssvfiscanf_r+0xec>
 8009654:	2300      	movs	r3, #0
 8009656:	9342      	str	r3, [sp, #264]	; 0x108
 8009658:	2303      	movs	r3, #3
 800965a:	9347      	str	r3, [sp, #284]	; 0x11c
 800965c:	6863      	ldr	r3, [r4, #4]
 800965e:	2b00      	cmp	r3, #0
 8009660:	dd68      	ble.n	8009734 <__ssvfiscanf_r+0x21c>
 8009662:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009664:	0659      	lsls	r1, r3, #25
 8009666:	d407      	bmi.n	8009678 <__ssvfiscanf_r+0x160>
 8009668:	f000 fb88 	bl	8009d7c <__locale_ctype_ptr>
 800966c:	6823      	ldr	r3, [r4, #0]
 800966e:	781a      	ldrb	r2, [r3, #0]
 8009670:	4410      	add	r0, r2
 8009672:	7842      	ldrb	r2, [r0, #1]
 8009674:	0712      	lsls	r2, r2, #28
 8009676:	d464      	bmi.n	8009742 <__ssvfiscanf_r+0x22a>
 8009678:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800967a:	2b02      	cmp	r3, #2
 800967c:	dc73      	bgt.n	8009766 <__ssvfiscanf_r+0x24e>
 800967e:	466b      	mov	r3, sp
 8009680:	4622      	mov	r2, r4
 8009682:	a941      	add	r1, sp, #260	; 0x104
 8009684:	4630      	mov	r0, r6
 8009686:	f000 f897 	bl	80097b8 <_scanf_chars>
 800968a:	2801      	cmp	r0, #1
 800968c:	f000 8089 	beq.w	80097a2 <__ssvfiscanf_r+0x28a>
 8009690:	2802      	cmp	r0, #2
 8009692:	f47f af71 	bne.w	8009578 <__ssvfiscanf_r+0x60>
 8009696:	e01d      	b.n	80096d4 <__ssvfiscanf_r+0x1bc>
 8009698:	2b75      	cmp	r3, #117	; 0x75
 800969a:	d0d1      	beq.n	8009640 <__ssvfiscanf_r+0x128>
 800969c:	2b78      	cmp	r3, #120	; 0x78
 800969e:	d0c0      	beq.n	8009622 <__ssvfiscanf_r+0x10a>
 80096a0:	2b73      	cmp	r3, #115	; 0x73
 80096a2:	d1af      	bne.n	8009604 <__ssvfiscanf_r+0xec>
 80096a4:	2302      	movs	r3, #2
 80096a6:	e7d8      	b.n	800965a <__ssvfiscanf_r+0x142>
 80096a8:	6863      	ldr	r3, [r4, #4]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	dd0c      	ble.n	80096c8 <__ssvfiscanf_r+0x1b0>
 80096ae:	6823      	ldr	r3, [r4, #0]
 80096b0:	781a      	ldrb	r2, [r3, #0]
 80096b2:	455a      	cmp	r2, fp
 80096b4:	d175      	bne.n	80097a2 <__ssvfiscanf_r+0x28a>
 80096b6:	3301      	adds	r3, #1
 80096b8:	6862      	ldr	r2, [r4, #4]
 80096ba:	6023      	str	r3, [r4, #0]
 80096bc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80096be:	3a01      	subs	r2, #1
 80096c0:	3301      	adds	r3, #1
 80096c2:	6062      	str	r2, [r4, #4]
 80096c4:	9345      	str	r3, [sp, #276]	; 0x114
 80096c6:	e757      	b.n	8009578 <__ssvfiscanf_r+0x60>
 80096c8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80096ca:	4621      	mov	r1, r4
 80096cc:	4630      	mov	r0, r6
 80096ce:	4798      	blx	r3
 80096d0:	2800      	cmp	r0, #0
 80096d2:	d0ec      	beq.n	80096ae <__ssvfiscanf_r+0x196>
 80096d4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80096d6:	2800      	cmp	r0, #0
 80096d8:	d159      	bne.n	800978e <__ssvfiscanf_r+0x276>
 80096da:	f04f 30ff 	mov.w	r0, #4294967295
 80096de:	e05c      	b.n	800979a <__ssvfiscanf_r+0x282>
 80096e0:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80096e2:	f042 0220 	orr.w	r2, r2, #32
 80096e6:	9241      	str	r2, [sp, #260]	; 0x104
 80096e8:	e79b      	b.n	8009622 <__ssvfiscanf_r+0x10a>
 80096ea:	2308      	movs	r3, #8
 80096ec:	9342      	str	r3, [sp, #264]	; 0x108
 80096ee:	2304      	movs	r3, #4
 80096f0:	e7b3      	b.n	800965a <__ssvfiscanf_r+0x142>
 80096f2:	4629      	mov	r1, r5
 80096f4:	4640      	mov	r0, r8
 80096f6:	f000 f9b7 	bl	8009a68 <__sccl>
 80096fa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80096fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009700:	9341      	str	r3, [sp, #260]	; 0x104
 8009702:	4605      	mov	r5, r0
 8009704:	2301      	movs	r3, #1
 8009706:	e7a8      	b.n	800965a <__ssvfiscanf_r+0x142>
 8009708:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800970a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800970e:	9341      	str	r3, [sp, #260]	; 0x104
 8009710:	2300      	movs	r3, #0
 8009712:	e7a2      	b.n	800965a <__ssvfiscanf_r+0x142>
 8009714:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009716:	06c3      	lsls	r3, r0, #27
 8009718:	f53f af2e 	bmi.w	8009578 <__ssvfiscanf_r+0x60>
 800971c:	9b00      	ldr	r3, [sp, #0]
 800971e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009720:	1d19      	adds	r1, r3, #4
 8009722:	9100      	str	r1, [sp, #0]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	07c0      	lsls	r0, r0, #31
 8009728:	bf4c      	ite	mi
 800972a:	801a      	strhmi	r2, [r3, #0]
 800972c:	601a      	strpl	r2, [r3, #0]
 800972e:	e723      	b.n	8009578 <__ssvfiscanf_r+0x60>
 8009730:	2305      	movs	r3, #5
 8009732:	e792      	b.n	800965a <__ssvfiscanf_r+0x142>
 8009734:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009736:	4621      	mov	r1, r4
 8009738:	4630      	mov	r0, r6
 800973a:	4798      	blx	r3
 800973c:	2800      	cmp	r0, #0
 800973e:	d090      	beq.n	8009662 <__ssvfiscanf_r+0x14a>
 8009740:	e7c8      	b.n	80096d4 <__ssvfiscanf_r+0x1bc>
 8009742:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009744:	3201      	adds	r2, #1
 8009746:	9245      	str	r2, [sp, #276]	; 0x114
 8009748:	6862      	ldr	r2, [r4, #4]
 800974a:	3a01      	subs	r2, #1
 800974c:	2a00      	cmp	r2, #0
 800974e:	6062      	str	r2, [r4, #4]
 8009750:	dd02      	ble.n	8009758 <__ssvfiscanf_r+0x240>
 8009752:	3301      	adds	r3, #1
 8009754:	6023      	str	r3, [r4, #0]
 8009756:	e787      	b.n	8009668 <__ssvfiscanf_r+0x150>
 8009758:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800975a:	4621      	mov	r1, r4
 800975c:	4630      	mov	r0, r6
 800975e:	4798      	blx	r3
 8009760:	2800      	cmp	r0, #0
 8009762:	d081      	beq.n	8009668 <__ssvfiscanf_r+0x150>
 8009764:	e7b6      	b.n	80096d4 <__ssvfiscanf_r+0x1bc>
 8009766:	2b04      	cmp	r3, #4
 8009768:	dc06      	bgt.n	8009778 <__ssvfiscanf_r+0x260>
 800976a:	466b      	mov	r3, sp
 800976c:	4622      	mov	r2, r4
 800976e:	a941      	add	r1, sp, #260	; 0x104
 8009770:	4630      	mov	r0, r6
 8009772:	f000 f885 	bl	8009880 <_scanf_i>
 8009776:	e788      	b.n	800968a <__ssvfiscanf_r+0x172>
 8009778:	4b0e      	ldr	r3, [pc, #56]	; (80097b4 <__ssvfiscanf_r+0x29c>)
 800977a:	2b00      	cmp	r3, #0
 800977c:	f43f aefc 	beq.w	8009578 <__ssvfiscanf_r+0x60>
 8009780:	466b      	mov	r3, sp
 8009782:	4622      	mov	r2, r4
 8009784:	a941      	add	r1, sp, #260	; 0x104
 8009786:	4630      	mov	r0, r6
 8009788:	f3af 8000 	nop.w
 800978c:	e77d      	b.n	800968a <__ssvfiscanf_r+0x172>
 800978e:	89a3      	ldrh	r3, [r4, #12]
 8009790:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009794:	bf18      	it	ne
 8009796:	f04f 30ff 	movne.w	r0, #4294967295
 800979a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800979e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097a2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80097a4:	e7f9      	b.n	800979a <__ssvfiscanf_r+0x282>
 80097a6:	bf00      	nop
 80097a8:	08009465 	.word	0x08009465
 80097ac:	080094df 	.word	0x080094df
 80097b0:	08009eac 	.word	0x08009eac
 80097b4:	00000000 	.word	0x00000000

080097b8 <_scanf_chars>:
 80097b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097bc:	4615      	mov	r5, r2
 80097be:	688a      	ldr	r2, [r1, #8]
 80097c0:	4680      	mov	r8, r0
 80097c2:	460c      	mov	r4, r1
 80097c4:	b932      	cbnz	r2, 80097d4 <_scanf_chars+0x1c>
 80097c6:	698a      	ldr	r2, [r1, #24]
 80097c8:	2a00      	cmp	r2, #0
 80097ca:	bf14      	ite	ne
 80097cc:	f04f 32ff 	movne.w	r2, #4294967295
 80097d0:	2201      	moveq	r2, #1
 80097d2:	608a      	str	r2, [r1, #8]
 80097d4:	6822      	ldr	r2, [r4, #0]
 80097d6:	06d1      	lsls	r1, r2, #27
 80097d8:	bf5f      	itttt	pl
 80097da:	681a      	ldrpl	r2, [r3, #0]
 80097dc:	1d11      	addpl	r1, r2, #4
 80097de:	6019      	strpl	r1, [r3, #0]
 80097e0:	6817      	ldrpl	r7, [r2, #0]
 80097e2:	2600      	movs	r6, #0
 80097e4:	69a3      	ldr	r3, [r4, #24]
 80097e6:	b1db      	cbz	r3, 8009820 <_scanf_chars+0x68>
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d107      	bne.n	80097fc <_scanf_chars+0x44>
 80097ec:	682b      	ldr	r3, [r5, #0]
 80097ee:	6962      	ldr	r2, [r4, #20]
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	5cd3      	ldrb	r3, [r2, r3]
 80097f4:	b9a3      	cbnz	r3, 8009820 <_scanf_chars+0x68>
 80097f6:	2e00      	cmp	r6, #0
 80097f8:	d132      	bne.n	8009860 <_scanf_chars+0xa8>
 80097fa:	e006      	b.n	800980a <_scanf_chars+0x52>
 80097fc:	2b02      	cmp	r3, #2
 80097fe:	d007      	beq.n	8009810 <_scanf_chars+0x58>
 8009800:	2e00      	cmp	r6, #0
 8009802:	d12d      	bne.n	8009860 <_scanf_chars+0xa8>
 8009804:	69a3      	ldr	r3, [r4, #24]
 8009806:	2b01      	cmp	r3, #1
 8009808:	d12a      	bne.n	8009860 <_scanf_chars+0xa8>
 800980a:	2001      	movs	r0, #1
 800980c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009810:	f000 fab4 	bl	8009d7c <__locale_ctype_ptr>
 8009814:	682b      	ldr	r3, [r5, #0]
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	4418      	add	r0, r3
 800981a:	7843      	ldrb	r3, [r0, #1]
 800981c:	071b      	lsls	r3, r3, #28
 800981e:	d4ef      	bmi.n	8009800 <_scanf_chars+0x48>
 8009820:	6823      	ldr	r3, [r4, #0]
 8009822:	06da      	lsls	r2, r3, #27
 8009824:	bf5e      	ittt	pl
 8009826:	682b      	ldrpl	r3, [r5, #0]
 8009828:	781b      	ldrbpl	r3, [r3, #0]
 800982a:	703b      	strbpl	r3, [r7, #0]
 800982c:	682a      	ldr	r2, [r5, #0]
 800982e:	686b      	ldr	r3, [r5, #4]
 8009830:	f102 0201 	add.w	r2, r2, #1
 8009834:	602a      	str	r2, [r5, #0]
 8009836:	68a2      	ldr	r2, [r4, #8]
 8009838:	f103 33ff 	add.w	r3, r3, #4294967295
 800983c:	f102 32ff 	add.w	r2, r2, #4294967295
 8009840:	606b      	str	r3, [r5, #4]
 8009842:	f106 0601 	add.w	r6, r6, #1
 8009846:	bf58      	it	pl
 8009848:	3701      	addpl	r7, #1
 800984a:	60a2      	str	r2, [r4, #8]
 800984c:	b142      	cbz	r2, 8009860 <_scanf_chars+0xa8>
 800984e:	2b00      	cmp	r3, #0
 8009850:	dcc8      	bgt.n	80097e4 <_scanf_chars+0x2c>
 8009852:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009856:	4629      	mov	r1, r5
 8009858:	4640      	mov	r0, r8
 800985a:	4798      	blx	r3
 800985c:	2800      	cmp	r0, #0
 800985e:	d0c1      	beq.n	80097e4 <_scanf_chars+0x2c>
 8009860:	6823      	ldr	r3, [r4, #0]
 8009862:	f013 0310 	ands.w	r3, r3, #16
 8009866:	d105      	bne.n	8009874 <_scanf_chars+0xbc>
 8009868:	68e2      	ldr	r2, [r4, #12]
 800986a:	3201      	adds	r2, #1
 800986c:	60e2      	str	r2, [r4, #12]
 800986e:	69a2      	ldr	r2, [r4, #24]
 8009870:	b102      	cbz	r2, 8009874 <_scanf_chars+0xbc>
 8009872:	703b      	strb	r3, [r7, #0]
 8009874:	6923      	ldr	r3, [r4, #16]
 8009876:	441e      	add	r6, r3
 8009878:	6126      	str	r6, [r4, #16]
 800987a:	2000      	movs	r0, #0
 800987c:	e7c6      	b.n	800980c <_scanf_chars+0x54>
	...

08009880 <_scanf_i>:
 8009880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009884:	469a      	mov	sl, r3
 8009886:	4b74      	ldr	r3, [pc, #464]	; (8009a58 <_scanf_i+0x1d8>)
 8009888:	460c      	mov	r4, r1
 800988a:	4683      	mov	fp, r0
 800988c:	4616      	mov	r6, r2
 800988e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009892:	b087      	sub	sp, #28
 8009894:	ab03      	add	r3, sp, #12
 8009896:	68a7      	ldr	r7, [r4, #8]
 8009898:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800989c:	4b6f      	ldr	r3, [pc, #444]	; (8009a5c <_scanf_i+0x1dc>)
 800989e:	69a1      	ldr	r1, [r4, #24]
 80098a0:	4a6f      	ldr	r2, [pc, #444]	; (8009a60 <_scanf_i+0x1e0>)
 80098a2:	2903      	cmp	r1, #3
 80098a4:	bf08      	it	eq
 80098a6:	461a      	moveq	r2, r3
 80098a8:	1e7b      	subs	r3, r7, #1
 80098aa:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80098ae:	bf84      	itt	hi
 80098b0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80098b4:	60a3      	strhi	r3, [r4, #8]
 80098b6:	6823      	ldr	r3, [r4, #0]
 80098b8:	9200      	str	r2, [sp, #0]
 80098ba:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80098be:	bf88      	it	hi
 80098c0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80098c4:	f104 091c 	add.w	r9, r4, #28
 80098c8:	6023      	str	r3, [r4, #0]
 80098ca:	bf8c      	ite	hi
 80098cc:	197f      	addhi	r7, r7, r5
 80098ce:	2700      	movls	r7, #0
 80098d0:	464b      	mov	r3, r9
 80098d2:	f04f 0800 	mov.w	r8, #0
 80098d6:	9301      	str	r3, [sp, #4]
 80098d8:	6831      	ldr	r1, [r6, #0]
 80098da:	ab03      	add	r3, sp, #12
 80098dc:	2202      	movs	r2, #2
 80098de:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80098e2:	7809      	ldrb	r1, [r1, #0]
 80098e4:	f7f6 fc8c 	bl	8000200 <memchr>
 80098e8:	9b01      	ldr	r3, [sp, #4]
 80098ea:	b330      	cbz	r0, 800993a <_scanf_i+0xba>
 80098ec:	f1b8 0f01 	cmp.w	r8, #1
 80098f0:	d15a      	bne.n	80099a8 <_scanf_i+0x128>
 80098f2:	6862      	ldr	r2, [r4, #4]
 80098f4:	b92a      	cbnz	r2, 8009902 <_scanf_i+0x82>
 80098f6:	6822      	ldr	r2, [r4, #0]
 80098f8:	2108      	movs	r1, #8
 80098fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098fe:	6061      	str	r1, [r4, #4]
 8009900:	6022      	str	r2, [r4, #0]
 8009902:	6822      	ldr	r2, [r4, #0]
 8009904:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009908:	6022      	str	r2, [r4, #0]
 800990a:	68a2      	ldr	r2, [r4, #8]
 800990c:	1e51      	subs	r1, r2, #1
 800990e:	60a1      	str	r1, [r4, #8]
 8009910:	b19a      	cbz	r2, 800993a <_scanf_i+0xba>
 8009912:	6832      	ldr	r2, [r6, #0]
 8009914:	1c51      	adds	r1, r2, #1
 8009916:	6031      	str	r1, [r6, #0]
 8009918:	7812      	ldrb	r2, [r2, #0]
 800991a:	701a      	strb	r2, [r3, #0]
 800991c:	1c5d      	adds	r5, r3, #1
 800991e:	6873      	ldr	r3, [r6, #4]
 8009920:	3b01      	subs	r3, #1
 8009922:	2b00      	cmp	r3, #0
 8009924:	6073      	str	r3, [r6, #4]
 8009926:	dc07      	bgt.n	8009938 <_scanf_i+0xb8>
 8009928:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800992c:	4631      	mov	r1, r6
 800992e:	4658      	mov	r0, fp
 8009930:	4798      	blx	r3
 8009932:	2800      	cmp	r0, #0
 8009934:	f040 8086 	bne.w	8009a44 <_scanf_i+0x1c4>
 8009938:	462b      	mov	r3, r5
 800993a:	f108 0801 	add.w	r8, r8, #1
 800993e:	f1b8 0f03 	cmp.w	r8, #3
 8009942:	d1c8      	bne.n	80098d6 <_scanf_i+0x56>
 8009944:	6862      	ldr	r2, [r4, #4]
 8009946:	b90a      	cbnz	r2, 800994c <_scanf_i+0xcc>
 8009948:	220a      	movs	r2, #10
 800994a:	6062      	str	r2, [r4, #4]
 800994c:	6862      	ldr	r2, [r4, #4]
 800994e:	4945      	ldr	r1, [pc, #276]	; (8009a64 <_scanf_i+0x1e4>)
 8009950:	6960      	ldr	r0, [r4, #20]
 8009952:	9301      	str	r3, [sp, #4]
 8009954:	1a89      	subs	r1, r1, r2
 8009956:	f000 f887 	bl	8009a68 <__sccl>
 800995a:	9b01      	ldr	r3, [sp, #4]
 800995c:	f04f 0800 	mov.w	r8, #0
 8009960:	461d      	mov	r5, r3
 8009962:	68a3      	ldr	r3, [r4, #8]
 8009964:	6822      	ldr	r2, [r4, #0]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d03a      	beq.n	80099e0 <_scanf_i+0x160>
 800996a:	6831      	ldr	r1, [r6, #0]
 800996c:	6960      	ldr	r0, [r4, #20]
 800996e:	f891 c000 	ldrb.w	ip, [r1]
 8009972:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009976:	2800      	cmp	r0, #0
 8009978:	d032      	beq.n	80099e0 <_scanf_i+0x160>
 800997a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800997e:	d121      	bne.n	80099c4 <_scanf_i+0x144>
 8009980:	0510      	lsls	r0, r2, #20
 8009982:	d51f      	bpl.n	80099c4 <_scanf_i+0x144>
 8009984:	f108 0801 	add.w	r8, r8, #1
 8009988:	b117      	cbz	r7, 8009990 <_scanf_i+0x110>
 800998a:	3301      	adds	r3, #1
 800998c:	3f01      	subs	r7, #1
 800998e:	60a3      	str	r3, [r4, #8]
 8009990:	6873      	ldr	r3, [r6, #4]
 8009992:	3b01      	subs	r3, #1
 8009994:	2b00      	cmp	r3, #0
 8009996:	6073      	str	r3, [r6, #4]
 8009998:	dd1b      	ble.n	80099d2 <_scanf_i+0x152>
 800999a:	6833      	ldr	r3, [r6, #0]
 800999c:	3301      	adds	r3, #1
 800999e:	6033      	str	r3, [r6, #0]
 80099a0:	68a3      	ldr	r3, [r4, #8]
 80099a2:	3b01      	subs	r3, #1
 80099a4:	60a3      	str	r3, [r4, #8]
 80099a6:	e7dc      	b.n	8009962 <_scanf_i+0xe2>
 80099a8:	f1b8 0f02 	cmp.w	r8, #2
 80099ac:	d1ad      	bne.n	800990a <_scanf_i+0x8a>
 80099ae:	6822      	ldr	r2, [r4, #0]
 80099b0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80099b4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80099b8:	d1bf      	bne.n	800993a <_scanf_i+0xba>
 80099ba:	2110      	movs	r1, #16
 80099bc:	6061      	str	r1, [r4, #4]
 80099be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099c2:	e7a1      	b.n	8009908 <_scanf_i+0x88>
 80099c4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80099c8:	6022      	str	r2, [r4, #0]
 80099ca:	780b      	ldrb	r3, [r1, #0]
 80099cc:	702b      	strb	r3, [r5, #0]
 80099ce:	3501      	adds	r5, #1
 80099d0:	e7de      	b.n	8009990 <_scanf_i+0x110>
 80099d2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80099d6:	4631      	mov	r1, r6
 80099d8:	4658      	mov	r0, fp
 80099da:	4798      	blx	r3
 80099dc:	2800      	cmp	r0, #0
 80099de:	d0df      	beq.n	80099a0 <_scanf_i+0x120>
 80099e0:	6823      	ldr	r3, [r4, #0]
 80099e2:	05d9      	lsls	r1, r3, #23
 80099e4:	d50c      	bpl.n	8009a00 <_scanf_i+0x180>
 80099e6:	454d      	cmp	r5, r9
 80099e8:	d908      	bls.n	80099fc <_scanf_i+0x17c>
 80099ea:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80099ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80099f2:	4632      	mov	r2, r6
 80099f4:	4658      	mov	r0, fp
 80099f6:	4798      	blx	r3
 80099f8:	1e6f      	subs	r7, r5, #1
 80099fa:	463d      	mov	r5, r7
 80099fc:	454d      	cmp	r5, r9
 80099fe:	d029      	beq.n	8009a54 <_scanf_i+0x1d4>
 8009a00:	6822      	ldr	r2, [r4, #0]
 8009a02:	f012 0210 	ands.w	r2, r2, #16
 8009a06:	d113      	bne.n	8009a30 <_scanf_i+0x1b0>
 8009a08:	702a      	strb	r2, [r5, #0]
 8009a0a:	6863      	ldr	r3, [r4, #4]
 8009a0c:	9e00      	ldr	r6, [sp, #0]
 8009a0e:	4649      	mov	r1, r9
 8009a10:	4658      	mov	r0, fp
 8009a12:	47b0      	blx	r6
 8009a14:	f8da 3000 	ldr.w	r3, [sl]
 8009a18:	6821      	ldr	r1, [r4, #0]
 8009a1a:	1d1a      	adds	r2, r3, #4
 8009a1c:	f8ca 2000 	str.w	r2, [sl]
 8009a20:	f011 0f20 	tst.w	r1, #32
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	d010      	beq.n	8009a4a <_scanf_i+0x1ca>
 8009a28:	6018      	str	r0, [r3, #0]
 8009a2a:	68e3      	ldr	r3, [r4, #12]
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	60e3      	str	r3, [r4, #12]
 8009a30:	eba5 0509 	sub.w	r5, r5, r9
 8009a34:	44a8      	add	r8, r5
 8009a36:	6925      	ldr	r5, [r4, #16]
 8009a38:	4445      	add	r5, r8
 8009a3a:	6125      	str	r5, [r4, #16]
 8009a3c:	2000      	movs	r0, #0
 8009a3e:	b007      	add	sp, #28
 8009a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a44:	f04f 0800 	mov.w	r8, #0
 8009a48:	e7ca      	b.n	80099e0 <_scanf_i+0x160>
 8009a4a:	07ca      	lsls	r2, r1, #31
 8009a4c:	bf4c      	ite	mi
 8009a4e:	8018      	strhmi	r0, [r3, #0]
 8009a50:	6018      	strpl	r0, [r3, #0]
 8009a52:	e7ea      	b.n	8009a2a <_scanf_i+0x1aa>
 8009a54:	2001      	movs	r0, #1
 8009a56:	e7f2      	b.n	8009a3e <_scanf_i+0x1be>
 8009a58:	08009e88 	.word	0x08009e88
 8009a5c:	08009bc5 	.word	0x08009bc5
 8009a60:	08009cdd 	.word	0x08009cdd
 8009a64:	08009ec0 	.word	0x08009ec0

08009a68 <__sccl>:
 8009a68:	b570      	push	{r4, r5, r6, lr}
 8009a6a:	780b      	ldrb	r3, [r1, #0]
 8009a6c:	2b5e      	cmp	r3, #94	; 0x5e
 8009a6e:	bf13      	iteet	ne
 8009a70:	1c4a      	addne	r2, r1, #1
 8009a72:	1c8a      	addeq	r2, r1, #2
 8009a74:	784b      	ldrbeq	r3, [r1, #1]
 8009a76:	2100      	movne	r1, #0
 8009a78:	bf08      	it	eq
 8009a7a:	2101      	moveq	r1, #1
 8009a7c:	1e44      	subs	r4, r0, #1
 8009a7e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8009a82:	f804 1f01 	strb.w	r1, [r4, #1]!
 8009a86:	42ac      	cmp	r4, r5
 8009a88:	d1fb      	bne.n	8009a82 <__sccl+0x1a>
 8009a8a:	b913      	cbnz	r3, 8009a92 <__sccl+0x2a>
 8009a8c:	3a01      	subs	r2, #1
 8009a8e:	4610      	mov	r0, r2
 8009a90:	bd70      	pop	{r4, r5, r6, pc}
 8009a92:	f081 0401 	eor.w	r4, r1, #1
 8009a96:	54c4      	strb	r4, [r0, r3]
 8009a98:	1c51      	adds	r1, r2, #1
 8009a9a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8009a9e:	2d2d      	cmp	r5, #45	; 0x2d
 8009aa0:	f101 36ff 	add.w	r6, r1, #4294967295
 8009aa4:	460a      	mov	r2, r1
 8009aa6:	d006      	beq.n	8009ab6 <__sccl+0x4e>
 8009aa8:	2d5d      	cmp	r5, #93	; 0x5d
 8009aaa:	d0f0      	beq.n	8009a8e <__sccl+0x26>
 8009aac:	b90d      	cbnz	r5, 8009ab2 <__sccl+0x4a>
 8009aae:	4632      	mov	r2, r6
 8009ab0:	e7ed      	b.n	8009a8e <__sccl+0x26>
 8009ab2:	462b      	mov	r3, r5
 8009ab4:	e7ef      	b.n	8009a96 <__sccl+0x2e>
 8009ab6:	780e      	ldrb	r6, [r1, #0]
 8009ab8:	2e5d      	cmp	r6, #93	; 0x5d
 8009aba:	d0fa      	beq.n	8009ab2 <__sccl+0x4a>
 8009abc:	42b3      	cmp	r3, r6
 8009abe:	dcf8      	bgt.n	8009ab2 <__sccl+0x4a>
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	429e      	cmp	r6, r3
 8009ac4:	54c4      	strb	r4, [r0, r3]
 8009ac6:	dcfb      	bgt.n	8009ac0 <__sccl+0x58>
 8009ac8:	3102      	adds	r1, #2
 8009aca:	e7e6      	b.n	8009a9a <__sccl+0x32>

08009acc <_strtol_l.isra.0>:
 8009acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ad0:	4680      	mov	r8, r0
 8009ad2:	4689      	mov	r9, r1
 8009ad4:	4692      	mov	sl, r2
 8009ad6:	461e      	mov	r6, r3
 8009ad8:	460f      	mov	r7, r1
 8009ada:	463d      	mov	r5, r7
 8009adc:	9808      	ldr	r0, [sp, #32]
 8009ade:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ae2:	f000 f947 	bl	8009d74 <__locale_ctype_ptr_l>
 8009ae6:	4420      	add	r0, r4
 8009ae8:	7843      	ldrb	r3, [r0, #1]
 8009aea:	f013 0308 	ands.w	r3, r3, #8
 8009aee:	d132      	bne.n	8009b56 <_strtol_l.isra.0+0x8a>
 8009af0:	2c2d      	cmp	r4, #45	; 0x2d
 8009af2:	d132      	bne.n	8009b5a <_strtol_l.isra.0+0x8e>
 8009af4:	787c      	ldrb	r4, [r7, #1]
 8009af6:	1cbd      	adds	r5, r7, #2
 8009af8:	2201      	movs	r2, #1
 8009afa:	2e00      	cmp	r6, #0
 8009afc:	d05d      	beq.n	8009bba <_strtol_l.isra.0+0xee>
 8009afe:	2e10      	cmp	r6, #16
 8009b00:	d109      	bne.n	8009b16 <_strtol_l.isra.0+0x4a>
 8009b02:	2c30      	cmp	r4, #48	; 0x30
 8009b04:	d107      	bne.n	8009b16 <_strtol_l.isra.0+0x4a>
 8009b06:	782b      	ldrb	r3, [r5, #0]
 8009b08:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009b0c:	2b58      	cmp	r3, #88	; 0x58
 8009b0e:	d14f      	bne.n	8009bb0 <_strtol_l.isra.0+0xe4>
 8009b10:	786c      	ldrb	r4, [r5, #1]
 8009b12:	2610      	movs	r6, #16
 8009b14:	3502      	adds	r5, #2
 8009b16:	2a00      	cmp	r2, #0
 8009b18:	bf14      	ite	ne
 8009b1a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009b1e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009b22:	2700      	movs	r7, #0
 8009b24:	fbb1 fcf6 	udiv	ip, r1, r6
 8009b28:	4638      	mov	r0, r7
 8009b2a:	fb06 1e1c 	mls	lr, r6, ip, r1
 8009b2e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009b32:	2b09      	cmp	r3, #9
 8009b34:	d817      	bhi.n	8009b66 <_strtol_l.isra.0+0x9a>
 8009b36:	461c      	mov	r4, r3
 8009b38:	42a6      	cmp	r6, r4
 8009b3a:	dd23      	ble.n	8009b84 <_strtol_l.isra.0+0xb8>
 8009b3c:	1c7b      	adds	r3, r7, #1
 8009b3e:	d007      	beq.n	8009b50 <_strtol_l.isra.0+0x84>
 8009b40:	4584      	cmp	ip, r0
 8009b42:	d31c      	bcc.n	8009b7e <_strtol_l.isra.0+0xb2>
 8009b44:	d101      	bne.n	8009b4a <_strtol_l.isra.0+0x7e>
 8009b46:	45a6      	cmp	lr, r4
 8009b48:	db19      	blt.n	8009b7e <_strtol_l.isra.0+0xb2>
 8009b4a:	fb00 4006 	mla	r0, r0, r6, r4
 8009b4e:	2701      	movs	r7, #1
 8009b50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b54:	e7eb      	b.n	8009b2e <_strtol_l.isra.0+0x62>
 8009b56:	462f      	mov	r7, r5
 8009b58:	e7bf      	b.n	8009ada <_strtol_l.isra.0+0xe>
 8009b5a:	2c2b      	cmp	r4, #43	; 0x2b
 8009b5c:	bf04      	itt	eq
 8009b5e:	1cbd      	addeq	r5, r7, #2
 8009b60:	787c      	ldrbeq	r4, [r7, #1]
 8009b62:	461a      	mov	r2, r3
 8009b64:	e7c9      	b.n	8009afa <_strtol_l.isra.0+0x2e>
 8009b66:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009b6a:	2b19      	cmp	r3, #25
 8009b6c:	d801      	bhi.n	8009b72 <_strtol_l.isra.0+0xa6>
 8009b6e:	3c37      	subs	r4, #55	; 0x37
 8009b70:	e7e2      	b.n	8009b38 <_strtol_l.isra.0+0x6c>
 8009b72:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009b76:	2b19      	cmp	r3, #25
 8009b78:	d804      	bhi.n	8009b84 <_strtol_l.isra.0+0xb8>
 8009b7a:	3c57      	subs	r4, #87	; 0x57
 8009b7c:	e7dc      	b.n	8009b38 <_strtol_l.isra.0+0x6c>
 8009b7e:	f04f 37ff 	mov.w	r7, #4294967295
 8009b82:	e7e5      	b.n	8009b50 <_strtol_l.isra.0+0x84>
 8009b84:	1c7b      	adds	r3, r7, #1
 8009b86:	d108      	bne.n	8009b9a <_strtol_l.isra.0+0xce>
 8009b88:	2322      	movs	r3, #34	; 0x22
 8009b8a:	f8c8 3000 	str.w	r3, [r8]
 8009b8e:	4608      	mov	r0, r1
 8009b90:	f1ba 0f00 	cmp.w	sl, #0
 8009b94:	d107      	bne.n	8009ba6 <_strtol_l.isra.0+0xda>
 8009b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b9a:	b102      	cbz	r2, 8009b9e <_strtol_l.isra.0+0xd2>
 8009b9c:	4240      	negs	r0, r0
 8009b9e:	f1ba 0f00 	cmp.w	sl, #0
 8009ba2:	d0f8      	beq.n	8009b96 <_strtol_l.isra.0+0xca>
 8009ba4:	b10f      	cbz	r7, 8009baa <_strtol_l.isra.0+0xde>
 8009ba6:	f105 39ff 	add.w	r9, r5, #4294967295
 8009baa:	f8ca 9000 	str.w	r9, [sl]
 8009bae:	e7f2      	b.n	8009b96 <_strtol_l.isra.0+0xca>
 8009bb0:	2430      	movs	r4, #48	; 0x30
 8009bb2:	2e00      	cmp	r6, #0
 8009bb4:	d1af      	bne.n	8009b16 <_strtol_l.isra.0+0x4a>
 8009bb6:	2608      	movs	r6, #8
 8009bb8:	e7ad      	b.n	8009b16 <_strtol_l.isra.0+0x4a>
 8009bba:	2c30      	cmp	r4, #48	; 0x30
 8009bbc:	d0a3      	beq.n	8009b06 <_strtol_l.isra.0+0x3a>
 8009bbe:	260a      	movs	r6, #10
 8009bc0:	e7a9      	b.n	8009b16 <_strtol_l.isra.0+0x4a>
	...

08009bc4 <_strtol_r>:
 8009bc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bc6:	4c06      	ldr	r4, [pc, #24]	; (8009be0 <_strtol_r+0x1c>)
 8009bc8:	4d06      	ldr	r5, [pc, #24]	; (8009be4 <_strtol_r+0x20>)
 8009bca:	6824      	ldr	r4, [r4, #0]
 8009bcc:	6a24      	ldr	r4, [r4, #32]
 8009bce:	2c00      	cmp	r4, #0
 8009bd0:	bf08      	it	eq
 8009bd2:	462c      	moveq	r4, r5
 8009bd4:	9400      	str	r4, [sp, #0]
 8009bd6:	f7ff ff79 	bl	8009acc <_strtol_l.isra.0>
 8009bda:	b003      	add	sp, #12
 8009bdc:	bd30      	pop	{r4, r5, pc}
 8009bde:	bf00      	nop
 8009be0:	20000038 	.word	0x20000038
 8009be4:	2000009c 	.word	0x2000009c

08009be8 <_strtoul_l.isra.0>:
 8009be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bec:	4680      	mov	r8, r0
 8009bee:	4689      	mov	r9, r1
 8009bf0:	4692      	mov	sl, r2
 8009bf2:	461e      	mov	r6, r3
 8009bf4:	460f      	mov	r7, r1
 8009bf6:	463d      	mov	r5, r7
 8009bf8:	9808      	ldr	r0, [sp, #32]
 8009bfa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009bfe:	f000 f8b9 	bl	8009d74 <__locale_ctype_ptr_l>
 8009c02:	4420      	add	r0, r4
 8009c04:	7843      	ldrb	r3, [r0, #1]
 8009c06:	f013 0308 	ands.w	r3, r3, #8
 8009c0a:	d130      	bne.n	8009c6e <_strtoul_l.isra.0+0x86>
 8009c0c:	2c2d      	cmp	r4, #45	; 0x2d
 8009c0e:	d130      	bne.n	8009c72 <_strtoul_l.isra.0+0x8a>
 8009c10:	787c      	ldrb	r4, [r7, #1]
 8009c12:	1cbd      	adds	r5, r7, #2
 8009c14:	2101      	movs	r1, #1
 8009c16:	2e00      	cmp	r6, #0
 8009c18:	d05c      	beq.n	8009cd4 <_strtoul_l.isra.0+0xec>
 8009c1a:	2e10      	cmp	r6, #16
 8009c1c:	d109      	bne.n	8009c32 <_strtoul_l.isra.0+0x4a>
 8009c1e:	2c30      	cmp	r4, #48	; 0x30
 8009c20:	d107      	bne.n	8009c32 <_strtoul_l.isra.0+0x4a>
 8009c22:	782b      	ldrb	r3, [r5, #0]
 8009c24:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009c28:	2b58      	cmp	r3, #88	; 0x58
 8009c2a:	d14e      	bne.n	8009cca <_strtoul_l.isra.0+0xe2>
 8009c2c:	786c      	ldrb	r4, [r5, #1]
 8009c2e:	2610      	movs	r6, #16
 8009c30:	3502      	adds	r5, #2
 8009c32:	f04f 32ff 	mov.w	r2, #4294967295
 8009c36:	2300      	movs	r3, #0
 8009c38:	fbb2 f2f6 	udiv	r2, r2, r6
 8009c3c:	fb06 fc02 	mul.w	ip, r6, r2
 8009c40:	ea6f 0c0c 	mvn.w	ip, ip
 8009c44:	4618      	mov	r0, r3
 8009c46:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009c4a:	2f09      	cmp	r7, #9
 8009c4c:	d817      	bhi.n	8009c7e <_strtoul_l.isra.0+0x96>
 8009c4e:	463c      	mov	r4, r7
 8009c50:	42a6      	cmp	r6, r4
 8009c52:	dd23      	ble.n	8009c9c <_strtoul_l.isra.0+0xb4>
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	db1e      	blt.n	8009c96 <_strtoul_l.isra.0+0xae>
 8009c58:	4282      	cmp	r2, r0
 8009c5a:	d31c      	bcc.n	8009c96 <_strtoul_l.isra.0+0xae>
 8009c5c:	d101      	bne.n	8009c62 <_strtoul_l.isra.0+0x7a>
 8009c5e:	45a4      	cmp	ip, r4
 8009c60:	db19      	blt.n	8009c96 <_strtoul_l.isra.0+0xae>
 8009c62:	fb00 4006 	mla	r0, r0, r6, r4
 8009c66:	2301      	movs	r3, #1
 8009c68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c6c:	e7eb      	b.n	8009c46 <_strtoul_l.isra.0+0x5e>
 8009c6e:	462f      	mov	r7, r5
 8009c70:	e7c1      	b.n	8009bf6 <_strtoul_l.isra.0+0xe>
 8009c72:	2c2b      	cmp	r4, #43	; 0x2b
 8009c74:	bf04      	itt	eq
 8009c76:	1cbd      	addeq	r5, r7, #2
 8009c78:	787c      	ldrbeq	r4, [r7, #1]
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	e7cb      	b.n	8009c16 <_strtoul_l.isra.0+0x2e>
 8009c7e:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009c82:	2f19      	cmp	r7, #25
 8009c84:	d801      	bhi.n	8009c8a <_strtoul_l.isra.0+0xa2>
 8009c86:	3c37      	subs	r4, #55	; 0x37
 8009c88:	e7e2      	b.n	8009c50 <_strtoul_l.isra.0+0x68>
 8009c8a:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009c8e:	2f19      	cmp	r7, #25
 8009c90:	d804      	bhi.n	8009c9c <_strtoul_l.isra.0+0xb4>
 8009c92:	3c57      	subs	r4, #87	; 0x57
 8009c94:	e7dc      	b.n	8009c50 <_strtoul_l.isra.0+0x68>
 8009c96:	f04f 33ff 	mov.w	r3, #4294967295
 8009c9a:	e7e5      	b.n	8009c68 <_strtoul_l.isra.0+0x80>
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	da09      	bge.n	8009cb4 <_strtoul_l.isra.0+0xcc>
 8009ca0:	2322      	movs	r3, #34	; 0x22
 8009ca2:	f8c8 3000 	str.w	r3, [r8]
 8009ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8009caa:	f1ba 0f00 	cmp.w	sl, #0
 8009cae:	d107      	bne.n	8009cc0 <_strtoul_l.isra.0+0xd8>
 8009cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cb4:	b101      	cbz	r1, 8009cb8 <_strtoul_l.isra.0+0xd0>
 8009cb6:	4240      	negs	r0, r0
 8009cb8:	f1ba 0f00 	cmp.w	sl, #0
 8009cbc:	d0f8      	beq.n	8009cb0 <_strtoul_l.isra.0+0xc8>
 8009cbe:	b10b      	cbz	r3, 8009cc4 <_strtoul_l.isra.0+0xdc>
 8009cc0:	f105 39ff 	add.w	r9, r5, #4294967295
 8009cc4:	f8ca 9000 	str.w	r9, [sl]
 8009cc8:	e7f2      	b.n	8009cb0 <_strtoul_l.isra.0+0xc8>
 8009cca:	2430      	movs	r4, #48	; 0x30
 8009ccc:	2e00      	cmp	r6, #0
 8009cce:	d1b0      	bne.n	8009c32 <_strtoul_l.isra.0+0x4a>
 8009cd0:	2608      	movs	r6, #8
 8009cd2:	e7ae      	b.n	8009c32 <_strtoul_l.isra.0+0x4a>
 8009cd4:	2c30      	cmp	r4, #48	; 0x30
 8009cd6:	d0a4      	beq.n	8009c22 <_strtoul_l.isra.0+0x3a>
 8009cd8:	260a      	movs	r6, #10
 8009cda:	e7aa      	b.n	8009c32 <_strtoul_l.isra.0+0x4a>

08009cdc <_strtoul_r>:
 8009cdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009cde:	4c06      	ldr	r4, [pc, #24]	; (8009cf8 <_strtoul_r+0x1c>)
 8009ce0:	4d06      	ldr	r5, [pc, #24]	; (8009cfc <_strtoul_r+0x20>)
 8009ce2:	6824      	ldr	r4, [r4, #0]
 8009ce4:	6a24      	ldr	r4, [r4, #32]
 8009ce6:	2c00      	cmp	r4, #0
 8009ce8:	bf08      	it	eq
 8009cea:	462c      	moveq	r4, r5
 8009cec:	9400      	str	r4, [sp, #0]
 8009cee:	f7ff ff7b 	bl	8009be8 <_strtoul_l.isra.0>
 8009cf2:	b003      	add	sp, #12
 8009cf4:	bd30      	pop	{r4, r5, pc}
 8009cf6:	bf00      	nop
 8009cf8:	20000038 	.word	0x20000038
 8009cfc:	2000009c 	.word	0x2000009c

08009d00 <__submore>:
 8009d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d04:	460c      	mov	r4, r1
 8009d06:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009d08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d0c:	4299      	cmp	r1, r3
 8009d0e:	d11d      	bne.n	8009d4c <__submore+0x4c>
 8009d10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009d14:	f7ff fb0e 	bl	8009334 <_malloc_r>
 8009d18:	b918      	cbnz	r0, 8009d22 <__submore+0x22>
 8009d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d26:	63a3      	str	r3, [r4, #56]	; 0x38
 8009d28:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009d2c:	6360      	str	r0, [r4, #52]	; 0x34
 8009d2e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009d32:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009d36:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009d3a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009d3e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009d42:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009d46:	6020      	str	r0, [r4, #0]
 8009d48:	2000      	movs	r0, #0
 8009d4a:	e7e8      	b.n	8009d1e <__submore+0x1e>
 8009d4c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009d4e:	0077      	lsls	r7, r6, #1
 8009d50:	463a      	mov	r2, r7
 8009d52:	f000 f83e 	bl	8009dd2 <_realloc_r>
 8009d56:	4605      	mov	r5, r0
 8009d58:	2800      	cmp	r0, #0
 8009d5a:	d0de      	beq.n	8009d1a <__submore+0x1a>
 8009d5c:	eb00 0806 	add.w	r8, r0, r6
 8009d60:	4601      	mov	r1, r0
 8009d62:	4632      	mov	r2, r6
 8009d64:	4640      	mov	r0, r8
 8009d66:	f000 f829 	bl	8009dbc <memcpy>
 8009d6a:	f8c4 8000 	str.w	r8, [r4]
 8009d6e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009d72:	e7e9      	b.n	8009d48 <__submore+0x48>

08009d74 <__locale_ctype_ptr_l>:
 8009d74:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009d78:	4770      	bx	lr
	...

08009d7c <__locale_ctype_ptr>:
 8009d7c:	4b04      	ldr	r3, [pc, #16]	; (8009d90 <__locale_ctype_ptr+0x14>)
 8009d7e:	4a05      	ldr	r2, [pc, #20]	; (8009d94 <__locale_ctype_ptr+0x18>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	6a1b      	ldr	r3, [r3, #32]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	bf08      	it	eq
 8009d88:	4613      	moveq	r3, r2
 8009d8a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8009d8e:	4770      	bx	lr
 8009d90:	20000038 	.word	0x20000038
 8009d94:	2000009c 	.word	0x2000009c

08009d98 <__ascii_mbtowc>:
 8009d98:	b082      	sub	sp, #8
 8009d9a:	b901      	cbnz	r1, 8009d9e <__ascii_mbtowc+0x6>
 8009d9c:	a901      	add	r1, sp, #4
 8009d9e:	b142      	cbz	r2, 8009db2 <__ascii_mbtowc+0x1a>
 8009da0:	b14b      	cbz	r3, 8009db6 <__ascii_mbtowc+0x1e>
 8009da2:	7813      	ldrb	r3, [r2, #0]
 8009da4:	600b      	str	r3, [r1, #0]
 8009da6:	7812      	ldrb	r2, [r2, #0]
 8009da8:	1c10      	adds	r0, r2, #0
 8009daa:	bf18      	it	ne
 8009dac:	2001      	movne	r0, #1
 8009dae:	b002      	add	sp, #8
 8009db0:	4770      	bx	lr
 8009db2:	4610      	mov	r0, r2
 8009db4:	e7fb      	b.n	8009dae <__ascii_mbtowc+0x16>
 8009db6:	f06f 0001 	mvn.w	r0, #1
 8009dba:	e7f8      	b.n	8009dae <__ascii_mbtowc+0x16>

08009dbc <memcpy>:
 8009dbc:	b510      	push	{r4, lr}
 8009dbe:	1e43      	subs	r3, r0, #1
 8009dc0:	440a      	add	r2, r1
 8009dc2:	4291      	cmp	r1, r2
 8009dc4:	d100      	bne.n	8009dc8 <memcpy+0xc>
 8009dc6:	bd10      	pop	{r4, pc}
 8009dc8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dcc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009dd0:	e7f7      	b.n	8009dc2 <memcpy+0x6>

08009dd2 <_realloc_r>:
 8009dd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dd4:	4607      	mov	r7, r0
 8009dd6:	4614      	mov	r4, r2
 8009dd8:	460e      	mov	r6, r1
 8009dda:	b921      	cbnz	r1, 8009de6 <_realloc_r+0x14>
 8009ddc:	4611      	mov	r1, r2
 8009dde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009de2:	f7ff baa7 	b.w	8009334 <_malloc_r>
 8009de6:	b922      	cbnz	r2, 8009df2 <_realloc_r+0x20>
 8009de8:	f7ff fa56 	bl	8009298 <_free_r>
 8009dec:	4625      	mov	r5, r4
 8009dee:	4628      	mov	r0, r5
 8009df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009df2:	f000 f821 	bl	8009e38 <_malloc_usable_size_r>
 8009df6:	42a0      	cmp	r0, r4
 8009df8:	d20f      	bcs.n	8009e1a <_realloc_r+0x48>
 8009dfa:	4621      	mov	r1, r4
 8009dfc:	4638      	mov	r0, r7
 8009dfe:	f7ff fa99 	bl	8009334 <_malloc_r>
 8009e02:	4605      	mov	r5, r0
 8009e04:	2800      	cmp	r0, #0
 8009e06:	d0f2      	beq.n	8009dee <_realloc_r+0x1c>
 8009e08:	4631      	mov	r1, r6
 8009e0a:	4622      	mov	r2, r4
 8009e0c:	f7ff ffd6 	bl	8009dbc <memcpy>
 8009e10:	4631      	mov	r1, r6
 8009e12:	4638      	mov	r0, r7
 8009e14:	f7ff fa40 	bl	8009298 <_free_r>
 8009e18:	e7e9      	b.n	8009dee <_realloc_r+0x1c>
 8009e1a:	4635      	mov	r5, r6
 8009e1c:	e7e7      	b.n	8009dee <_realloc_r+0x1c>

08009e1e <__ascii_wctomb>:
 8009e1e:	b149      	cbz	r1, 8009e34 <__ascii_wctomb+0x16>
 8009e20:	2aff      	cmp	r2, #255	; 0xff
 8009e22:	bf85      	ittet	hi
 8009e24:	238a      	movhi	r3, #138	; 0x8a
 8009e26:	6003      	strhi	r3, [r0, #0]
 8009e28:	700a      	strbls	r2, [r1, #0]
 8009e2a:	f04f 30ff 	movhi.w	r0, #4294967295
 8009e2e:	bf98      	it	ls
 8009e30:	2001      	movls	r0, #1
 8009e32:	4770      	bx	lr
 8009e34:	4608      	mov	r0, r1
 8009e36:	4770      	bx	lr

08009e38 <_malloc_usable_size_r>:
 8009e38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e3c:	1f18      	subs	r0, r3, #4
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	bfbc      	itt	lt
 8009e42:	580b      	ldrlt	r3, [r1, r0]
 8009e44:	18c0      	addlt	r0, r0, r3
 8009e46:	4770      	bx	lr

08009e48 <_init>:
 8009e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4a:	bf00      	nop
 8009e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e4e:	bc08      	pop	{r3}
 8009e50:	469e      	mov	lr, r3
 8009e52:	4770      	bx	lr

08009e54 <_fini>:
 8009e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e56:	bf00      	nop
 8009e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e5a:	bc08      	pop	{r3}
 8009e5c:	469e      	mov	lr, r3
 8009e5e:	4770      	bx	lr
